
bin/Debug/AVR_Radio.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00000ba4  00000c38  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ba4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  0080010c  0080010c  00000c44  2**0
                  ALLOC
  3 .stab         00002a54  00000000  00000000  00000c44  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001441  00000000  00000000  00003698  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00004ad9  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004aec  2**2
                  CONTENTS, READONLY
  7 .debug_info   000005f4  00000000  00000000  00004b2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000005a2  00000000  00000000  00005120  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001d  00000000  00000000  000056c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000208  00000000  00000000  000056df  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__ctors_end>
   4:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
   8:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
   c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  10:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  14:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  18:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  1c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  20:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  24:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  28:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  2c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  30:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  34:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  38:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  3c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  40:	0c 94 65 03 	jmp	0x6ca	; 0x6ca <__vector_16>
  44:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  48:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  4c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  50:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  54:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  58:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  5c:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  60:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>
  64:	0c 94 6f 00 	jmp	0xde	; 0xde <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	20 4b       	sbci	r18, 0xB0	; 176
  6a:	48 7a       	andi	r20, 0xA8	; 168
  6c:	20 00       	.word	0x0020	; ????

0000006e <__c.2243>:
  6e:	41 4d 20 00                                         AM .

00000072 <__c.2241>:
  72:	20 4d 48 7a 20 00                                    MHz .

00000078 <__c.2239>:
  78:	46 4d 20 00                                         FM .

0000007c <__c.2231>:
  7c:	41 55 54 4f 20 53 43 41 4e 20 20 00                 AUTO SCAN  .

00000088 <__c.2229>:
  88:	4d 41 4e 55 41 4c 20 53 43 41 4e 00                 MANUAL SCAN.

00000094 <__c.2221>:
  94:	2d 2d 20 41 56 52 20 52 41 44 49 4f 20 2d 2d 00     -- AVR RADIO --.

000000a4 <__ctors_end>:
  a4:	11 24       	eor	r1, r1
  a6:	1f be       	out	0x3f, r1	; 63
  a8:	cf ef       	ldi	r28, 0xFF	; 255
  aa:	d8 e0       	ldi	r29, 0x08	; 8
  ac:	de bf       	out	0x3e, r29	; 62
  ae:	cd bf       	out	0x3d, r28	; 61

000000b0 <__do_copy_data>:
  b0:	11 e0       	ldi	r17, 0x01	; 1
  b2:	a0 e0       	ldi	r26, 0x00	; 0
  b4:	b1 e0       	ldi	r27, 0x01	; 1
  b6:	e4 ea       	ldi	r30, 0xA4	; 164
  b8:	fb e0       	ldi	r31, 0x0B	; 11
  ba:	02 c0       	rjmp	.+4      	; 0xc0 <__do_copy_data+0x10>
  bc:	05 90       	lpm	r0, Z+
  be:	0d 92       	st	X+, r0
  c0:	ac 30       	cpi	r26, 0x0C	; 12
  c2:	b1 07       	cpc	r27, r17
  c4:	d9 f7       	brne	.-10     	; 0xbc <__do_copy_data+0xc>

000000c6 <__do_clear_bss>:
  c6:	21 e0       	ldi	r18, 0x01	; 1
  c8:	ac e0       	ldi	r26, 0x0C	; 12
  ca:	b1 e0       	ldi	r27, 0x01	; 1
  cc:	01 c0       	rjmp	.+2      	; 0xd0 <.do_clear_bss_start>

000000ce <.do_clear_bss_loop>:
  ce:	1d 92       	st	X+, r1

000000d0 <.do_clear_bss_start>:
  d0:	a7 31       	cpi	r26, 0x17	; 23
  d2:	b2 07       	cpc	r27, r18
  d4:	e1 f7       	brne	.-8      	; 0xce <.do_clear_bss_loop>
  d6:	0e 94 76 04 	call	0x8ec	; 0x8ec <main>
  da:	0c 94 d0 05 	jmp	0xba0	; 0xba0 <_exit>

000000de <__bad_interrupt>:
  de:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e2 <digitalWrite>:
#include <stdio.h>

#include "bit_manipulation.h"

void digitalWrite(uint8_t pin, volatile uint8_t *port, uint8_t val)
{
  e2:	fb 01       	movw	r30, r22
  e4:	21 e0       	ldi	r18, 0x01	; 1
  e6:	30 e0       	ldi	r19, 0x00	; 0
  e8:	b9 01       	movw	r22, r18
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <digitalWrite+0xe>
  ec:	66 0f       	add	r22, r22
  ee:	77 1f       	adc	r23, r23
  f0:	8a 95       	dec	r24
  f2:	e2 f7       	brpl	.-8      	; 0xec <digitalWrite+0xa>
  f4:	cb 01       	movw	r24, r22

        if (val == 0) {
                *port &= ~(1<<pin);
  f6:	90 81       	ld	r25, Z
        if (val == 0) {
  f8:	41 11       	cpse	r20, r1
  fa:	04 c0       	rjmp	.+8      	; 0x104 <digitalWrite+0x22>
                *port &= ~(1<<pin);
  fc:	80 95       	com	r24
  fe:	89 23       	and	r24, r25
        } else {
                *port |= (1<<pin);
 100:	80 83       	st	Z, r24
        };
}
 102:	08 95       	ret
                *port |= (1<<pin);
 104:	89 2b       	or	r24, r25
 106:	fc cf       	rjmp	.-8      	; 0x100 <digitalWrite+0x1e>

00000108 <digitalRead>:

uint8_t digitalRead(uint8_t pin, volatile uint8_t *port)
{

        if (bit_is_clear(*port, pin)) {
 108:	fb 01       	movw	r30, r22
 10a:	20 81       	ld	r18, Z
 10c:	30 e0       	ldi	r19, 0x00	; 0
 10e:	a9 01       	movw	r20, r18
 110:	02 c0       	rjmp	.+4      	; 0x116 <digitalRead+0xe>
 112:	55 95       	asr	r21
 114:	47 95       	ror	r20
 116:	8a 95       	dec	r24
 118:	e2 f7       	brpl	.-8      	; 0x112 <digitalRead+0xa>
 11a:	ca 01       	movw	r24, r20
                return 0;
        } else {
                return 1;
        }
}
 11c:	81 70       	andi	r24, 0x01	; 1
 11e:	08 95       	ret

00000120 <lcd_e_port_low>:
      case 4 : LCD_E4_PORT&=~_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT&=~_BV(LCD_E_PIN);
 120:	5b 98       	cbi	0x0b, 3	; 11
  #if (LCD_DISPLAYS>1)
    }
  #endif
}
 122:	08 95       	ret

00000124 <lcd_e_port_high>:
      case 4 : LCD_E4_PORT|=_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT|=_BV(LCD_E_PIN);
 124:	5b 9a       	sbi	0x0b, 3	; 11
  #if (LCD_DISPLAYS>1)
    }
  #endif
}
 126:	08 95       	ret

00000128 <lcd_write>:
          rs     1: write data
                 0: write instruction
Returns:  none
*************************************************************************/
static void lcd_write(uint8_t data,uint8_t rs)
  {
 128:	cf 93       	push	r28
 12a:	df 93       	push	r29
 12c:	c8 2f       	mov	r28, r24
 12e:	d6 2f       	mov	r29, r22
          Delay_us(5);
          PrevCmdInvolvedAddressCounter=0;
        }
    #endif

    if (rs)
 130:	66 23       	and	r22, r22
 132:	e1 f1       	breq	.+120    	; 0x1ac <lcd_write+0x84>
      {
        lcd_rs_port_high();                            // RS=1: Write Character
 134:	5a 9a       	sbi	0x0b, 2	; 11
        PrevCmdInvolvedAddressCounter=0;
        #endif
      }

    #if LCD_BITS==4
      lcd_db7_port_set(data&_BV(7));                  //Output High Nibble
 136:	c7 ff       	sbrs	r28, 7
 138:	3b c0       	rjmp	.+118    	; 0x1b0 <lcd_write+0x88>
 13a:	5f 9a       	sbi	0x0b, 7	; 11
      lcd_db6_port_set(data&_BV(6));
 13c:	c6 ff       	sbrs	r28, 6
 13e:	3a c0       	rjmp	.+116    	; 0x1b4 <lcd_write+0x8c>
 140:	5e 9a       	sbi	0x0b, 6	; 11
      lcd_db5_port_set(data&_BV(5));
 142:	c5 ff       	sbrs	r28, 5
 144:	39 c0       	rjmp	.+114    	; 0x1b8 <lcd_write+0x90>
 146:	5d 9a       	sbi	0x0b, 5	; 11
      lcd_db4_port_set(data&_BV(4));
 148:	c4 ff       	sbrs	r28, 4
 14a:	38 c0       	rjmp	.+112    	; 0x1bc <lcd_write+0x94>
 14c:	5c 9a       	sbi	0x0b, 4	; 11

      Delay_ns(100);
 14e:	00 c0       	rjmp	.+0      	; 0x150 <lcd_write+0x28>
      lcd_e_port_high();
 150:	0e 94 92 00 	call	0x124	; 0x124 <lcd_e_port_high>

      Delay_ns(500);
 154:	82 e0       	ldi	r24, 0x02	; 2
 156:	8a 95       	dec	r24
 158:	f1 f7       	brne	.-4      	; 0x156 <lcd_write+0x2e>
 15a:	00 c0       	rjmp	.+0      	; 0x15c <lcd_write+0x34>
      lcd_e_port_low();
 15c:	0e 94 90 00 	call	0x120	; 0x120 <lcd_e_port_low>

      lcd_db7_port_set(data&_BV(3));                  //Output High Nibble
 160:	c3 ff       	sbrs	r28, 3
 162:	2e c0       	rjmp	.+92     	; 0x1c0 <lcd_write+0x98>
 164:	5f 9a       	sbi	0x0b, 7	; 11
      lcd_db6_port_set(data&_BV(2));
 166:	c2 ff       	sbrs	r28, 2
 168:	2d c0       	rjmp	.+90     	; 0x1c4 <lcd_write+0x9c>
 16a:	5e 9a       	sbi	0x0b, 6	; 11
      lcd_db5_port_set(data&_BV(1));
 16c:	c1 ff       	sbrs	r28, 1
 16e:	2c c0       	rjmp	.+88     	; 0x1c8 <lcd_write+0xa0>
 170:	5d 9a       	sbi	0x0b, 5	; 11
      lcd_db4_port_set(data&_BV(0));
 172:	c0 ff       	sbrs	r28, 0
 174:	2b c0       	rjmp	.+86     	; 0x1cc <lcd_write+0xa4>
 176:	5c 9a       	sbi	0x0b, 4	; 11

      Delay_ns(100);
 178:	00 c0       	rjmp	.+0      	; 0x17a <lcd_write+0x52>
      lcd_e_port_high();
 17a:	0e 94 92 00 	call	0x124	; 0x124 <lcd_e_port_high>

      Delay_ns(500);
 17e:	92 e0       	ldi	r25, 0x02	; 2
 180:	9a 95       	dec	r25
 182:	f1 f7       	brne	.-4      	; 0x180 <lcd_write+0x58>
 184:	00 c0       	rjmp	.+0      	; 0x186 <lcd_write+0x5e>
      lcd_e_port_low();
 186:	0e 94 90 00 	call	0x120	; 0x120 <lcd_e_port_low>

      lcd_db7_port_high();                            // All Data Pins High (Inactive)
 18a:	5f 9a       	sbi	0x0b, 7	; 11
      lcd_db6_port_high();
 18c:	5e 9a       	sbi	0x0b, 6	; 11
      lcd_db5_port_high();
 18e:	5d 9a       	sbi	0x0b, 5	; 11
      lcd_db4_port_high();
 190:	5c 9a       	sbi	0x0b, 4	; 11
      lcd_db1_port_high();
      lcd_db0_port_high();
    #endif

    #if (WAIT_MODE==0 || RW_LINE_IMPLEMENTED==0)
      if (!rs && data<=((1<<LCD_CLR) | (1<<LCD_HOME))) // Is command clrscr or home?
 192:	d1 11       	cpse	r29, r1
 194:	1d c0       	rjmp	.+58     	; 0x1d0 <lcd_write+0xa8>
 196:	c4 30       	cpi	r28, 0x04	; 4
 198:	d8 f4       	brcc	.+54     	; 0x1d0 <lcd_write+0xa8>
        Delay_us(1640);
 19a:	8f e9       	ldi	r24, 0x9F	; 159
 19c:	99 e1       	ldi	r25, 0x19	; 25
 19e:	01 97       	sbiw	r24, 0x01	; 1
 1a0:	f1 f7       	brne	.-4      	; 0x19e <lcd_write+0x76>
 1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <lcd_write+0x7c>
      else Delay_us(40);
 1a4:	00 00       	nop
    #endif
  }
 1a6:	df 91       	pop	r29
 1a8:	cf 91       	pop	r28
 1aa:	08 95       	ret
        lcd_rs_port_low();                          // RS=0: Write Command
 1ac:	5a 98       	cbi	0x0b, 2	; 11
 1ae:	c3 cf       	rjmp	.-122    	; 0x136 <lcd_write+0xe>
      lcd_db7_port_set(data&_BV(7));                  //Output High Nibble
 1b0:	5f 98       	cbi	0x0b, 7	; 11
 1b2:	c4 cf       	rjmp	.-120    	; 0x13c <lcd_write+0x14>
      lcd_db6_port_set(data&_BV(6));
 1b4:	5e 98       	cbi	0x0b, 6	; 11
 1b6:	c5 cf       	rjmp	.-118    	; 0x142 <lcd_write+0x1a>
      lcd_db5_port_set(data&_BV(5));
 1b8:	5d 98       	cbi	0x0b, 5	; 11
 1ba:	c6 cf       	rjmp	.-116    	; 0x148 <lcd_write+0x20>
      lcd_db4_port_set(data&_BV(4));
 1bc:	5c 98       	cbi	0x0b, 4	; 11
 1be:	c7 cf       	rjmp	.-114    	; 0x14e <lcd_write+0x26>
      lcd_db7_port_set(data&_BV(3));                  //Output High Nibble
 1c0:	5f 98       	cbi	0x0b, 7	; 11
 1c2:	d1 cf       	rjmp	.-94     	; 0x166 <lcd_write+0x3e>
      lcd_db6_port_set(data&_BV(2));
 1c4:	5e 98       	cbi	0x0b, 6	; 11
 1c6:	d2 cf       	rjmp	.-92     	; 0x16c <lcd_write+0x44>
      lcd_db5_port_set(data&_BV(1));
 1c8:	5d 98       	cbi	0x0b, 5	; 11
 1ca:	d3 cf       	rjmp	.-90     	; 0x172 <lcd_write+0x4a>
      lcd_db4_port_set(data&_BV(0));
 1cc:	5c 98       	cbi	0x0b, 4	; 11
 1ce:	d4 cf       	rjmp	.-88     	; 0x178 <lcd_write+0x50>
      else Delay_us(40);
 1d0:	95 ed       	ldi	r25, 0xD5	; 213
 1d2:	9a 95       	dec	r25
 1d4:	f1 f7       	brne	.-4      	; 0x1d2 <lcd_write+0xaa>
 1d6:	e6 cf       	rjmp	.-52     	; 0x1a4 <lcd_write+0x7c>

000001d8 <lcd_command>:
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
  {
    lcd_write(cmd,0);
 1d8:	60 e0       	ldi	r22, 0x00	; 0
 1da:	0c 94 94 00 	jmp	0x128	; 0x128 <lcd_write>

000001de <lcd_goto>:
Input:    pos position
Returns:  none
*************************************************************************/
void lcd_goto(uint8_t pos)
  {
    lcd_command((1<<LCD_DDRAM)+pos);
 1de:	80 58       	subi	r24, 0x80	; 128
 1e0:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <lcd_command>

000001e4 <lcd_gotoxy>:
{
#if LCD_DISPLAY_LINES==1
    lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
#endif
#if LCD_DISPLAY_LINES==2
    if ( y==0 )
 1e4:	61 11       	cpse	r22, r1
 1e6:	03 c0       	rjmp	.+6      	; 0x1ee <lcd_gotoxy+0xa>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
 1e8:	80 58       	subi	r24, 0x80	; 128
    else
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
 1ea:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <lcd_command>
 1ee:	80 54       	subi	r24, 0x40	; 64
 1f0:	fc cf       	rjmp	.-8      	; 0x1ea <lcd_gotoxy+0x6>

000001f2 <lcd_clrscr>:
Input:    none
Returns:  none
*************************************************************************/
void lcd_clrscr()
  {
    lcd_command(1<<LCD_CLR);
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <lcd_command>

000001f8 <lcd_home>:
Input:    none
Returns:  none
*************************************************************************/
void lcd_home()
  {
    lcd_command(1<<LCD_HOME);
 1f8:	82 e0       	ldi	r24, 0x02	; 2
 1fa:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <lcd_command>

000001fe <lcd_putc>:
Input:    character to be displayed
Returns:  none
*************************************************************************/
void lcd_putc(char c)
  {
    lcd_write(c,1);
 1fe:	61 e0       	ldi	r22, 0x01	; 1
 200:	0c 94 94 00 	jmp	0x128	; 0x128 <lcd_write>

00000204 <lcd_puts>:
Display string
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
  {
 204:	cf 93       	push	r28
 206:	df 93       	push	r29
 208:	ec 01       	movw	r28, r24
    register char c;

    while ((c=*s++))
 20a:	89 91       	ld	r24, Y+
 20c:	81 11       	cpse	r24, r1
 20e:	03 c0       	rjmp	.+6      	; 0x216 <lcd_puts+0x12>
      lcd_putc(c);
  }
 210:	df 91       	pop	r29
 212:	cf 91       	pop	r28
 214:	08 95       	ret
      lcd_putc(c);
 216:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_putc>
 21a:	f7 cf       	rjmp	.-18     	; 0x20a <lcd_puts+0x6>

0000021c <lcd_puts_p>:
Display string from flash
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts_p(const char *progmem_s)
  {
 21c:	cf 93       	push	r28
 21e:	df 93       	push	r29
 220:	ec 01       	movw	r28, r24
    register char c;

    while ((c=pgm_read_byte(progmem_s++)))
 222:	fe 01       	movw	r30, r28
 224:	84 91       	lpm	r24, Z
 226:	21 96       	adiw	r28, 0x01	; 1
 228:	81 11       	cpse	r24, r1
 22a:	03 c0       	rjmp	.+6      	; 0x232 <lcd_puts_p+0x16>
      lcd_putc(c);
  }
 22c:	df 91       	pop	r29
 22e:	cf 91       	pop	r28
 230:	08 95       	ret
      lcd_putc(c);
 232:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_putc>
 236:	f5 cf       	rjmp	.-22     	; 0x222 <lcd_puts_p+0x6>

00000238 <lcd_init>:
                DDR(LCD_E_PORT)|=_BV(LCD_E_PIN);
 238:	53 9a       	sbi	0x0a, 3	; 10
*************************************************************************/
void lcd_init()
  {
    //Set All Pins as Output
    lcd_e_ddr_high();
    lcd_rs_ddr_high();
 23a:	52 9a       	sbi	0x0a, 2	; 10
    #if RW_LINE_IMPLEMENTED==1
      lcd_rw_ddr_high();
    #endif
    lcd_db7_ddr_high();
 23c:	57 9a       	sbi	0x0a, 7	; 10
    lcd_db6_ddr_high();
 23e:	56 9a       	sbi	0x0a, 6	; 10
    lcd_db5_ddr_high();
 240:	55 9a       	sbi	0x0a, 5	; 10
    lcd_db4_ddr_high();
 242:	54 9a       	sbi	0x0a, 4	; 10
      lcd_db1_ddr_high();
      lcd_db0_ddr_high();
    #endif

    //Set All Control Lines Low
    lcd_e_port_low();
 244:	0e 94 90 00 	call	0x120	; 0x120 <lcd_e_port_low>
    lcd_rs_port_low();
 248:	5a 98       	cbi	0x0b, 2	; 11
    #if RW_LINE_IMPLEMENTED==1
      lcd_rw_port_low();
    #endif

    //Set All Data Lines High
    lcd_db7_port_high();
 24a:	5f 9a       	sbi	0x0b, 7	; 11
    lcd_db6_port_high();
 24c:	5e 9a       	sbi	0x0b, 6	; 11
    lcd_db5_port_high();
 24e:	5d 9a       	sbi	0x0b, 5	; 11
    lcd_db4_port_high();
 250:	5c 9a       	sbi	0x0b, 4	; 11
      lcd_db1_port_high();
      lcd_db0_port_high();
    #endif

    //Startup Delay
    Delay_ms(DELAY_RESET);
 252:	8f e5       	ldi	r24, 0x5F	; 95
 254:	9a ee       	ldi	r25, 0xEA	; 234
 256:	01 97       	sbiw	r24, 0x01	; 1
 258:	f1 f7       	brne	.-4      	; 0x256 <lcd_init+0x1e>
 25a:	00 c0       	rjmp	.+0      	; 0x25c <lcd_init+0x24>
 25c:	00 00       	nop

    //Initialize Display
    lcd_db7_port_low();
 25e:	5f 98       	cbi	0x0b, 7	; 11
    lcd_db6_port_low();
 260:	5e 98       	cbi	0x0b, 6	; 11
    Delay_ns(100);
 262:	00 c0       	rjmp	.+0      	; 0x264 <lcd_init+0x2c>
    lcd_e_port_high();
 264:	0e 94 92 00 	call	0x124	; 0x124 <lcd_e_port_high>
    Delay_ns(500);
 268:	92 e0       	ldi	r25, 0x02	; 2
 26a:	9a 95       	dec	r25
 26c:	f1 f7       	brne	.-4      	; 0x26a <lcd_init+0x32>
 26e:	00 c0       	rjmp	.+0      	; 0x270 <lcd_init+0x38>
    lcd_e_port_low();
 270:	0e 94 90 00 	call	0x120	; 0x120 <lcd_e_port_low>

    Delay_us(4100);
 274:	8f e0       	ldi	r24, 0x0F	; 15
 276:	90 e4       	ldi	r25, 0x40	; 64
 278:	01 97       	sbiw	r24, 0x01	; 1
 27a:	f1 f7       	brne	.-4      	; 0x278 <lcd_init+0x40>
 27c:	00 c0       	rjmp	.+0      	; 0x27e <lcd_init+0x46>
 27e:	00 00       	nop

    lcd_e_port_high();
 280:	0e 94 92 00 	call	0x124	; 0x124 <lcd_e_port_high>
    Delay_ns(500);
 284:	92 e0       	ldi	r25, 0x02	; 2
 286:	9a 95       	dec	r25
 288:	f1 f7       	brne	.-4      	; 0x286 <lcd_init+0x4e>
 28a:	00 c0       	rjmp	.+0      	; 0x28c <lcd_init+0x54>
    lcd_e_port_low();
 28c:	0e 94 90 00 	call	0x120	; 0x120 <lcd_e_port_low>

    Delay_us(100);
 290:	8f e8       	ldi	r24, 0x8F	; 143
 292:	91 e0       	ldi	r25, 0x01	; 1
 294:	01 97       	sbiw	r24, 0x01	; 1
 296:	f1 f7       	brne	.-4      	; 0x294 <lcd_init+0x5c>
 298:	00 c0       	rjmp	.+0      	; 0x29a <lcd_init+0x62>
 29a:	00 00       	nop

    lcd_e_port_high();
 29c:	0e 94 92 00 	call	0x124	; 0x124 <lcd_e_port_high>
    Delay_ns(500);
 2a0:	92 e0       	ldi	r25, 0x02	; 2
 2a2:	9a 95       	dec	r25
 2a4:	f1 f7       	brne	.-4      	; 0x2a2 <lcd_init+0x6a>
 2a6:	00 c0       	rjmp	.+0      	; 0x2a8 <lcd_init+0x70>
    lcd_e_port_low();
 2a8:	0e 94 90 00 	call	0x120	; 0x120 <lcd_e_port_low>

    Delay_us(40);
 2ac:	85 ed       	ldi	r24, 0xD5	; 213
 2ae:	8a 95       	dec	r24
 2b0:	f1 f7       	brne	.-4      	; 0x2ae <lcd_init+0x76>
 2b2:	00 00       	nop

    //Init differs between 4-bit and 8-bit from here
    #if (LCD_BITS==4)
      lcd_db4_port_low();
 2b4:	5c 98       	cbi	0x0b, 4	; 11
      Delay_ns(100);
 2b6:	00 c0       	rjmp	.+0      	; 0x2b8 <lcd_init+0x80>
      lcd_e_port_high();
 2b8:	0e 94 92 00 	call	0x124	; 0x124 <lcd_e_port_high>
      Delay_ns(500);
 2bc:	92 e0       	ldi	r25, 0x02	; 2
 2be:	9a 95       	dec	r25
 2c0:	f1 f7       	brne	.-4      	; 0x2be <lcd_init+0x86>
 2c2:	00 c0       	rjmp	.+0      	; 0x2c4 <lcd_init+0x8c>
      lcd_e_port_low();
 2c4:	0e 94 90 00 	call	0x120	; 0x120 <lcd_e_port_low>
      Delay_us(40);
 2c8:	85 ed       	ldi	r24, 0xD5	; 213
 2ca:	8a 95       	dec	r24
 2cc:	f1 f7       	brne	.-4      	; 0x2ca <lcd_init+0x92>
 2ce:	00 00       	nop

      lcd_db4_port_low();
 2d0:	5c 98       	cbi	0x0b, 4	; 11
      Delay_ns(100);
 2d2:	00 c0       	rjmp	.+0      	; 0x2d4 <lcd_init+0x9c>
      lcd_e_port_high();
 2d4:	0e 94 92 00 	call	0x124	; 0x124 <lcd_e_port_high>
      Delay_ns(500);
 2d8:	92 e0       	ldi	r25, 0x02	; 2
 2da:	9a 95       	dec	r25
 2dc:	f1 f7       	brne	.-4      	; 0x2da <lcd_init+0xa2>
 2de:	00 c0       	rjmp	.+0      	; 0x2e0 <lcd_init+0xa8>
      lcd_e_port_low();
 2e0:	0e 94 90 00 	call	0x120	; 0x120 <lcd_e_port_low>
      Delay_ns(500);
 2e4:	82 e0       	ldi	r24, 0x02	; 2
 2e6:	8a 95       	dec	r24
 2e8:	f1 f7       	brne	.-4      	; 0x2e6 <lcd_init+0xae>
 2ea:	00 c0       	rjmp	.+0      	; 0x2ec <lcd_init+0xb4>

      #if (LCD_DISPLAYS==1)
        if (LCD_DISPLAY_LINES>1)
          lcd_db7_port_high();
 2ec:	5f 9a       	sbi	0x0b, 7	; 11
          }
        if (c>1)
          lcd_db7_port_high();
      #endif

      Delay_ns(100);
 2ee:	00 c0       	rjmp	.+0      	; 0x2f0 <lcd_init+0xb8>
      lcd_e_port_high();
 2f0:	0e 94 92 00 	call	0x124	; 0x124 <lcd_e_port_high>
      Delay_ns(500);
 2f4:	92 e0       	ldi	r25, 0x02	; 2
 2f6:	9a 95       	dec	r25
 2f8:	f1 f7       	brne	.-4      	; 0x2f6 <lcd_init+0xbe>
 2fa:	00 c0       	rjmp	.+0      	; 0x2fc <lcd_init+0xc4>
      lcd_e_port_low();
 2fc:	0e 94 90 00 	call	0x120	; 0x120 <lcd_e_port_low>
      Delay_us(40);
 300:	85 ed       	ldi	r24, 0xD5	; 213
 302:	8a 95       	dec	r24
 304:	f1 f7       	brne	.-4      	; 0x302 <lcd_init+0xca>
 306:	00 00       	nop
      lcd_e_port_low();
      Delay_us(40);
    #endif

    //Display Off
    lcd_command(_BV(LCD_DISPLAYMODE));
 308:	88 e0       	ldi	r24, 0x08	; 8
 30a:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <lcd_command>

    //Display Clear
    lcd_clrscr();
 30e:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <lcd_clrscr>

    //Entry Mode Set
    lcd_command(_BV(LCD_ENTRY_MODE) | _BV(LCD_ENTRY_INC));
 312:	86 e0       	ldi	r24, 0x06	; 6
 314:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <lcd_command>

    //Display On
    lcd_command(_BV(LCD_DISPLAYMODE) | _BV(LCD_DISPLAYMODE_ON));
 318:	8c e0       	ldi	r24, 0x0C	; 12
 31a:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <lcd_command>

0000031e <LC72131_init>:
 *  Set pin functions and initial states  *
 *                                        *
\******************************************/
void LC72131_init() {

    CE_DDR |=  (1<<CE);   // CE pin as Output.
 31e:	38 9a       	sbi	0x07, 0	; 7

    DI_DDR &=  ~(1<<DI);  // DI pin as Input.
 320:	39 98       	cbi	0x07, 1	; 7
    DI_PORT |= (1<<DI);   // DI pin pull-up resistor enabled.
 322:	41 9a       	sbi	0x08, 1	; 8

    CL_DDR |=  (1<<CL);   // CL pin as Output.
 324:	3a 9a       	sbi	0x07, 2	; 7

    DO_DDR |=  (1<<DO);   // DO pin as Output.
 326:	3b 9a       	sbi	0x07, 3	; 7

	DO_PORT &= ~(1<<DO);  // DO pin low.
 328:	43 98       	cbi	0x08, 3	; 8
	CL_PORT &= ~(1<<CL);  // Clock pin low.
 32a:	42 98       	cbi	0x08, 2	; 8

	// Toggling CE one to "flush" the bus.
	CE_PORT |= (1<<CE);
 32c:	40 9a       	sbi	0x08, 0	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 32e:	87 ec       	ldi	r24, 0xC7	; 199
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	01 97       	sbiw	r24, 0x01	; 1
 334:	f1 f7       	brne	.-4      	; 0x332 <LC72131_init+0x14>
 336:	00 c0       	rjmp	.+0      	; 0x338 <LC72131_init+0x1a>
 338:	00 00       	nop
	_delay_us(CCB_DELAY);
	CE_PORT &= ~(1<<CE);
 33a:	40 98       	cbi	0x08, 0	; 8
 33c:	87 ec       	ldi	r24, 0xC7	; 199
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	01 97       	sbiw	r24, 0x01	; 1
 342:	f1 f7       	brne	.-4      	; 0x340 <LC72131_init+0x22>
 344:	00 c0       	rjmp	.+0      	; 0x346 <LC72131_init+0x28>
 346:	00 00       	nop
	_delay_us(CCB_DELAY);
}
 348:	08 95       	ret

0000034a <writeByte>:
 *                                        *
 *              writeByte()               *
 *     Send a single byte via CCB bus     *
 *                                        *
\******************************************/
void writeByte(uint8_t data) {
 34a:	0f 93       	push	r16
 34c:	1f 93       	push	r17
 34e:	cf 93       	push	r28
 350:	df 93       	push	r29
 352:	d0 e0       	ldi	r29, 0x00	; 0
 354:	c0 e0       	ldi	r28, 0x00	; 0

	// Send one byte out bia CCB bus (LSB first)
	for(int8_t i = 0; i <= 7; i++) {
		digitalWrite(DO, &DO_PORT, bitRead(data, i));
 356:	08 2f       	mov	r16, r24
 358:	10 e0       	ldi	r17, 0x00	; 0
 35a:	a8 01       	movw	r20, r16
 35c:	0c 2e       	mov	r0, r28
 35e:	02 c0       	rjmp	.+4      	; 0x364 <writeByte+0x1a>
 360:	55 95       	asr	r21
 362:	47 95       	ror	r20
 364:	0a 94       	dec	r0
 366:	e2 f7       	brpl	.-8      	; 0x360 <writeByte+0x16>
 368:	41 70       	andi	r20, 0x01	; 1
 36a:	68 e2       	ldi	r22, 0x28	; 40
 36c:	70 e0       	ldi	r23, 0x00	; 0
 36e:	83 e0       	ldi	r24, 0x03	; 3
 370:	0e 94 71 00 	call	0xe2	; 0xe2 <digitalWrite>
		digitalWrite(CL, &CL_PORT, 1); _delay_us(CCB_DELAY);
 374:	41 e0       	ldi	r20, 0x01	; 1
 376:	68 e2       	ldi	r22, 0x28	; 40
 378:	70 e0       	ldi	r23, 0x00	; 0
 37a:	82 e0       	ldi	r24, 0x02	; 2
 37c:	0e 94 71 00 	call	0xe2	; 0xe2 <digitalWrite>
 380:	87 ec       	ldi	r24, 0xC7	; 199
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	01 97       	sbiw	r24, 0x01	; 1
 386:	f1 f7       	brne	.-4      	; 0x384 <writeByte+0x3a>
 388:	00 c0       	rjmp	.+0      	; 0x38a <writeByte+0x40>
 38a:	00 00       	nop
		digitalWrite(CL, &CL_PORT, 0); _delay_us(CCB_DELAY);
 38c:	40 e0       	ldi	r20, 0x00	; 0
 38e:	68 e2       	ldi	r22, 0x28	; 40
 390:	70 e0       	ldi	r23, 0x00	; 0
 392:	82 e0       	ldi	r24, 0x02	; 2
 394:	0e 94 71 00 	call	0xe2	; 0xe2 <digitalWrite>
 398:	87 ec       	ldi	r24, 0xC7	; 199
 39a:	90 e0       	ldi	r25, 0x00	; 0
 39c:	01 97       	sbiw	r24, 0x01	; 1
 39e:	f1 f7       	brne	.-4      	; 0x39c <writeByte+0x52>
 3a0:	00 c0       	rjmp	.+0      	; 0x3a2 <writeByte+0x58>
 3a2:	00 00       	nop
 3a4:	21 96       	adiw	r28, 0x01	; 1
	for(int8_t i = 0; i <= 7; i++) {
 3a6:	c8 30       	cpi	r28, 0x08	; 8
 3a8:	d1 05       	cpc	r29, r1
 3aa:	b9 f6       	brne	.-82     	; 0x35a <writeByte+0x10>
	};
}
 3ac:	df 91       	pop	r29
 3ae:	cf 91       	pop	r28
 3b0:	1f 91       	pop	r17
 3b2:	0f 91       	pop	r16
 3b4:	08 95       	ret

000003b6 <readByte>:
 *                                        *
 *               readByte()               *
 *    Receive a single byte via CCB bus   *
 *                                        *
\******************************************/
uint8_t readByte() {
 3b6:	cf 92       	push	r12
 3b8:	df 92       	push	r13
 3ba:	ef 92       	push	r14
 3bc:	ff 92       	push	r15
 3be:	0f 93       	push	r16
 3c0:	1f 93       	push	r17
 3c2:	cf 93       	push	r28
 3c4:	07 e0       	ldi	r16, 0x07	; 7
 3c6:	10 e0       	ldi	r17, 0x00	; 0

	uint8_t data = 0;
 3c8:	c0 e0       	ldi	r28, 0x00	; 0
 3ca:	c1 2c       	mov	r12, r1
 3cc:	d1 2c       	mov	r13, r1
 3ce:	76 01       	movw	r14, r12
 3d0:	c3 94       	inc	r12
	// Receive one byte from the CCB bus (MSB first)
	for(int8_t i = 7; i >= 0; i--) {
		digitalWrite(CL, &CL_PORT, 1); _delay_us(CCB_DELAY);
 3d2:	41 e0       	ldi	r20, 0x01	; 1
 3d4:	68 e2       	ldi	r22, 0x28	; 40
 3d6:	70 e0       	ldi	r23, 0x00	; 0
 3d8:	82 e0       	ldi	r24, 0x02	; 2
 3da:	0e 94 71 00 	call	0xe2	; 0xe2 <digitalWrite>
 3de:	87 ec       	ldi	r24, 0xC7	; 199
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	01 97       	sbiw	r24, 0x01	; 1
 3e4:	f1 f7       	brne	.-4      	; 0x3e2 <readByte+0x2c>
 3e6:	00 c0       	rjmp	.+0      	; 0x3e8 <readByte+0x32>
 3e8:	00 00       	nop
		bitWrite(data, i, digitalRead(DI, &DI_PIN));
 3ea:	66 e2       	ldi	r22, 0x26	; 38
 3ec:	70 e0       	ldi	r23, 0x00	; 0
 3ee:	81 e0       	ldi	r24, 0x01	; 1
 3f0:	0e 94 84 00 	call	0x108	; 0x108 <digitalRead>
 3f4:	b7 01       	movw	r22, r14
 3f6:	a6 01       	movw	r20, r12
 3f8:	00 2e       	mov	r0, r16
 3fa:	04 c0       	rjmp	.+8      	; 0x404 <__FUSE_REGION_LENGTH__+0x4>
 3fc:	44 0f       	add	r20, r20
 3fe:	55 1f       	adc	r21, r21
 400:	66 1f       	adc	r22, r22
 402:	77 1f       	adc	r23, r23
 404:	0a 94       	dec	r0
 406:	d2 f7       	brpl	.-12     	; 0x3fc <readByte+0x46>
 408:	88 23       	and	r24, r24
 40a:	c9 f0       	breq	.+50     	; 0x43e <__FUSE_REGION_LENGTH__+0x3e>
 40c:	c4 2b       	or	r28, r20
		digitalWrite(CL, &CL_PORT, 0); _delay_us(CCB_DELAY);
 40e:	40 e0       	ldi	r20, 0x00	; 0
 410:	68 e2       	ldi	r22, 0x28	; 40
 412:	70 e0       	ldi	r23, 0x00	; 0
 414:	82 e0       	ldi	r24, 0x02	; 2
 416:	0e 94 71 00 	call	0xe2	; 0xe2 <digitalWrite>
 41a:	87 ec       	ldi	r24, 0xC7	; 199
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	01 97       	sbiw	r24, 0x01	; 1
 420:	f1 f7       	brne	.-4      	; 0x41e <__FUSE_REGION_LENGTH__+0x1e>
 422:	00 c0       	rjmp	.+0      	; 0x424 <__FUSE_REGION_LENGTH__+0x24>
 424:	00 00       	nop
 426:	01 50       	subi	r16, 0x01	; 1
 428:	11 09       	sbc	r17, r1
 42a:	98 f6       	brcc	.-90     	; 0x3d2 <readByte+0x1c>
	};

	return data;
}
 42c:	8c 2f       	mov	r24, r28
 42e:	cf 91       	pop	r28
 430:	1f 91       	pop	r17
 432:	0f 91       	pop	r16
 434:	ff 90       	pop	r15
 436:	ef 90       	pop	r14
 438:	df 90       	pop	r13
 43a:	cf 90       	pop	r12
 43c:	08 95       	ret
		bitWrite(data, i, digitalRead(DI, &DI_PIN));
 43e:	40 95       	com	r20
 440:	c4 23       	and	r28, r20
 442:	e5 cf       	rjmp	.-54     	; 0x40e <__FUSE_REGION_LENGTH__+0xe>

00000444 <ccb>:
 *                                        *
 *                 ccb()                  *
 *  The universal send/receive function   *
 *                                        *
\******************************************/
void ccb(uint8_t address, uint8_t *data, int8_t dataLength, uint8_t mode) {
 444:	ef 92       	push	r14
 446:	ff 92       	push	r15
 448:	0f 93       	push	r16
 44a:	1f 93       	push	r17
 44c:	cf 93       	push	r28
 44e:	df 93       	push	r29
 450:	7b 01       	movw	r14, r22
 452:	c4 2f       	mov	r28, r20
 454:	d2 2f       	mov	r29, r18

    int8_t i; // i may reach negative values in the counters
	          // dataLength is typed "int8_t" for compatibility with this counter

	// Send the address, with the nibbles swapped (required by the CCB protocol to support 4-bit addresses)
	writeByte((address >> 4) | (address << 4));
 456:	82 95       	swap	r24
 458:	0e 94 a5 01 	call	0x34a	; 0x34a <writeByte>

	// Enter the data transfer mode
	digitalWrite(CL, &CL_PORT, 0);
 45c:	40 e0       	ldi	r20, 0x00	; 0
 45e:	68 e2       	ldi	r22, 0x28	; 40
 460:	70 e0       	ldi	r23, 0x00	; 0
 462:	82 e0       	ldi	r24, 0x02	; 2
 464:	0e 94 71 00 	call	0xe2	; 0xe2 <digitalWrite>
	digitalWrite(CE, &CL_PORT, 1);
 468:	41 e0       	ldi	r20, 0x01	; 1
 46a:	68 e2       	ldi	r22, 0x28	; 40
 46c:	70 e0       	ldi	r23, 0x00	; 0
 46e:	80 e0       	ldi	r24, 0x00	; 0
 470:	0e 94 71 00 	call	0xe2	; 0xe2 <digitalWrite>
 474:	87 ec       	ldi	r24, 0xC7	; 199
 476:	90 e0       	ldi	r25, 0x00	; 0
 478:	01 97       	sbiw	r24, 0x01	; 1
 47a:	f1 f7       	brne	.-4      	; 0x478 <ccb+0x34>
 47c:	00 c0       	rjmp	.+0      	; 0x47e <ccb+0x3a>
 47e:	00 00       	nop
	_delay_us(CCB_DELAY);

	switch(mode) {
 480:	dd 23       	and	r29, r29
 482:	71 f0       	breq	.+28     	; 0x4a0 <ccb+0x5c>
 484:	d1 30       	cpi	r29, 0x01	; 1
 486:	c1 f4       	brne	.+48     	; 0x4b8 <ccb+0x74>
 488:	de 2d       	mov	r29, r14
 48a:	87 01       	movw	r16, r14
		digitalWrite(DO, &DO_PORT, 0);
		break;

	case _CCB_RECEIVE:
		// Receive data
		for(i = 0; i < dataLength; i++)
 48c:	80 2f       	mov	r24, r16
 48e:	8d 1b       	sub	r24, r29
 490:	8c 17       	cp	r24, r28
 492:	94 f4       	brge	.+36     	; 0x4b8 <ccb+0x74>
			data[i] = readByte();
 494:	0e 94 db 01 	call	0x3b6	; 0x3b6 <readByte>
 498:	f8 01       	movw	r30, r16
 49a:	81 93       	st	Z+, r24
 49c:	8f 01       	movw	r16, r30
 49e:	f6 cf       	rjmp	.-20     	; 0x48c <ccb+0x48>
		for(i = dataLength - 1; i >= 0; i--)
 4a0:	c1 50       	subi	r28, 0x01	; 1
 4a2:	0c 2e       	mov	r0, r28
 4a4:	00 0c       	add	r0, r0
 4a6:	dd 0b       	sbc	r29, r29
 4a8:	c7 ff       	sbrs	r28, 7
 4aa:	19 c0       	rjmp	.+50     	; 0x4de <ccb+0x9a>
		digitalWrite(DO, &DO_PORT, 0);
 4ac:	40 e0       	ldi	r20, 0x00	; 0
 4ae:	68 e2       	ldi	r22, 0x28	; 40
 4b0:	70 e0       	ldi	r23, 0x00	; 0
 4b2:	83 e0       	ldi	r24, 0x03	; 3
 4b4:	0e 94 71 00 	call	0xe2	; 0xe2 <digitalWrite>
		break;
	};

	digitalWrite(CE, &CE_PORT, 0);
 4b8:	40 e0       	ldi	r20, 0x00	; 0
 4ba:	68 e2       	ldi	r22, 0x28	; 40
 4bc:	70 e0       	ldi	r23, 0x00	; 0
 4be:	80 e0       	ldi	r24, 0x00	; 0
 4c0:	0e 94 71 00 	call	0xe2	; 0xe2 <digitalWrite>
 4c4:	87 ec       	ldi	r24, 0xC7	; 199
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	01 97       	sbiw	r24, 0x01	; 1
 4ca:	f1 f7       	brne	.-4      	; 0x4c8 <ccb+0x84>
 4cc:	00 c0       	rjmp	.+0      	; 0x4ce <ccb+0x8a>
 4ce:	00 00       	nop
	_delay_us(CCB_DELAY);
}
 4d0:	df 91       	pop	r29
 4d2:	cf 91       	pop	r28
 4d4:	1f 91       	pop	r17
 4d6:	0f 91       	pop	r16
 4d8:	ff 90       	pop	r15
 4da:	ef 90       	pop	r14
 4dc:	08 95       	ret
				writeByte(data[i]);
 4de:	f7 01       	movw	r30, r14
 4e0:	ec 0f       	add	r30, r28
 4e2:	fd 1f       	adc	r31, r29
 4e4:	80 81       	ld	r24, Z
 4e6:	0e 94 a5 01 	call	0x34a	; 0x34a <writeByte>
 4ea:	21 97       	sbiw	r28, 0x01	; 1
 4ec:	dd cf       	rjmp	.-70     	; 0x4a8 <ccb+0x64>

000004ee <diPinState>:
 * Some CCB devices uses the DO pin for other functions  *
 * when the data bus is idle.  This method makes reading *
 * it easier                                             *
\*********************************************************/
uint8_t diPinState() {
	return digitalRead(DI, &DI_PIN);
 4ee:	66 e2       	ldi	r22, 0x26	; 38
 4f0:	70 e0       	ldi	r23, 0x00	; 0
 4f2:	81 e0       	ldi	r24, 0x01	; 1
 4f4:	0c 94 84 00 	jmp	0x108	; 0x108 <digitalRead>

000004f8 <LC72131_write>:
 * so the order of the data bytes must be the opposite  *
 * as the one shown on the device's datasheets          *
\********************************************************/
void LC72131_write(uint8_t address, uint8_t *data, int8_t dataLength) {

	ccb(address, data, dataLength, _CCB_SEND);
 4f8:	20 e0       	ldi	r18, 0x00	; 0
 4fa:	0c 94 22 02 	jmp	0x444	; 0x444 <ccb>

000004fe <LC72131_read>:
 *                      read()                        *
 *  receive dataLength (up to 127) bytes via CCB bus  *
\******************************************************/
void LC72131_read(uint8_t address, uint8_t *data, int8_t dataLength) {

	ccb(address, data, dataLength, _CCB_RECEIVE);
 4fe:	21 e0       	ldi	r18, 0x01	; 1
 500:	0c 94 22 02 	jmp	0x444	; 0x444 <ccb>

00000504 <readsw>:
    return 0;
}

uint8_t readsw (){

    if (digitalRead(UPSW,&UPSW_PIN)==0){
 504:	63 e2       	ldi	r22, 0x23	; 35
 506:	70 e0       	ldi	r23, 0x00	; 0
 508:	80 e0       	ldi	r24, 0x00	; 0
 50a:	0e 94 84 00 	call	0x108	; 0x108 <digitalRead>
 50e:	88 23       	and	r24, r24
 510:	e9 f0       	breq	.+58     	; 0x54c <readsw+0x48>
        if (digitalRead(UPSW,&UPSW_PIN)==0) {
            return UP;
        };
    };

    if (digitalRead(DOWNSW,&DOWNSW_PIN)==0){
 512:	63 e2       	ldi	r22, 0x23	; 35
 514:	70 e0       	ldi	r23, 0x00	; 0
 516:	81 e0       	ldi	r24, 0x01	; 1
 518:	0e 94 84 00 	call	0x108	; 0x108 <digitalRead>
 51c:	88 23       	and	r24, r24
 51e:	29 f1       	breq	.+74     	; 0x56a <readsw+0x66>
        if (digitalRead(DOWNSW,&DOWNSW_PIN)==0) {
            return DOWN;
        };
    };

    if (digitalRead(AMFMSW,&AMFMSW_PIN)==0){
 520:	63 e2       	ldi	r22, 0x23	; 35
 522:	70 e0       	ldi	r23, 0x00	; 0
 524:	82 e0       	ldi	r24, 0x02	; 2
 526:	0e 94 84 00 	call	0x108	; 0x108 <digitalRead>
 52a:	81 11       	cpse	r24, r1
 52c:	0d c0       	rjmp	.+26     	; 0x548 <readsw+0x44>
	__builtin_avr_delay_cycles(__ticks_dc);
 52e:	8f e3       	ldi	r24, 0x3F	; 63
 530:	9c e9       	ldi	r25, 0x9C	; 156
 532:	01 97       	sbiw	r24, 0x01	; 1
 534:	f1 f7       	brne	.-4      	; 0x532 <readsw+0x2e>
 536:	00 c0       	rjmp	.+0      	; 0x538 <readsw+0x34>
 538:	00 00       	nop
        _delay_ms(10);  // Some debounce time.
        if (digitalRead(AMFMSW,&AMFMSW_PIN)==0) {
 53a:	63 e2       	ldi	r22, 0x23	; 35
 53c:	70 e0       	ldi	r23, 0x00	; 0
 53e:	82 e0       	ldi	r24, 0x02	; 2
 540:	0e 94 84 00 	call	0x108	; 0x108 <digitalRead>
 544:	88 23       	and	r24, r24
 546:	01 f1       	breq	.+64     	; 0x588 <readsw+0x84>
            return TNMODE;
        };
    };

    return NONE;
 548:	80 e0       	ldi	r24, 0x00	; 0
 54a:	08 95       	ret
 54c:	8f e3       	ldi	r24, 0x3F	; 63
 54e:	9c e9       	ldi	r25, 0x9C	; 156
 550:	01 97       	sbiw	r24, 0x01	; 1
 552:	f1 f7       	brne	.-4      	; 0x550 <readsw+0x4c>
 554:	00 c0       	rjmp	.+0      	; 0x556 <readsw+0x52>
 556:	00 00       	nop
        if (digitalRead(UPSW,&UPSW_PIN)==0) {
 558:	63 e2       	ldi	r22, 0x23	; 35
 55a:	70 e0       	ldi	r23, 0x00	; 0
 55c:	80 e0       	ldi	r24, 0x00	; 0
 55e:	0e 94 84 00 	call	0x108	; 0x108 <digitalRead>
 562:	81 11       	cpse	r24, r1
 564:	d6 cf       	rjmp	.-84     	; 0x512 <readsw+0xe>
            return UP;
 566:	81 e0       	ldi	r24, 0x01	; 1
 568:	08 95       	ret
 56a:	8f e3       	ldi	r24, 0x3F	; 63
 56c:	9c e9       	ldi	r25, 0x9C	; 156
 56e:	01 97       	sbiw	r24, 0x01	; 1
 570:	f1 f7       	brne	.-4      	; 0x56e <readsw+0x6a>
 572:	00 c0       	rjmp	.+0      	; 0x574 <readsw+0x70>
 574:	00 00       	nop
        if (digitalRead(DOWNSW,&DOWNSW_PIN)==0) {
 576:	63 e2       	ldi	r22, 0x23	; 35
 578:	70 e0       	ldi	r23, 0x00	; 0
 57a:	81 e0       	ldi	r24, 0x01	; 1
 57c:	0e 94 84 00 	call	0x108	; 0x108 <digitalRead>
 580:	81 11       	cpse	r24, r1
 582:	ce cf       	rjmp	.-100    	; 0x520 <readsw+0x1c>
            return DOWN;
 584:	82 e0       	ldi	r24, 0x02	; 2
 586:	08 95       	ret
            return TNMODE;
 588:	83 e0       	ldi	r24, 0x03	; 3

}
 58a:	08 95       	ret

0000058c <PLL_Init>:
 *      Initialize the PLL settings  with       *
 * parameters common to booth AM and FM modes   *
\************************************************/
void PLL_Init() {

    pll_in1[0]=0;   // Zeroing byte 0 of pll_in1.
 58c:	e4 e1       	ldi	r30, 0x14	; 20
 58e:	f1 e0       	ldi	r31, 0x01	; 1
 590:	10 82       	st	Z, r1
    pll_in1[1]=0;   // Zeroing byte 1 of pll_in1.
 592:	11 82       	std	Z+1, r1	; 0x01
    pll_in1[2]=0;   // Zeroing byte 2 of pll_in1.
 594:	12 82       	std	Z+2, r1	; 0x02

    pll_in2[0]=0;   // Zeroing byte 0 of pll_in2.
    pll_in2[1]=0;   // Zeroing byte 1 of pll_in2.
    pll_in2[2]=0;   // Zeroing byte 2 of pll_in2.

    bitSet(pll_in2[0], IN2_IFS);   // IF counter in normal mode. Page 12 and 15 of the Datasheet.
 596:	e1 e1       	ldi	r30, 0x11	; 17
 598:	f1 e0       	ldi	r31, 0x01	; 1
 59a:	80 e1       	ldi	r24, 0x10	; 16
 59c:	80 83       	st	Z, r24
    bitSet(pll_in2[1], IN2_UL0);   // Phase error detection width = 0us. UL1=0, UL0=1. Page 11 of the Datasheet.
 59e:	81 83       	std	Z+1, r24	; 0x01
    bitSet(pll_in2[2], IN2_BO1);   // Mute off / normal tuner mode
 5a0:	82 83       	std	Z+2, r24	; 0x02
}
 5a2:	08 95       	ret

000005a4 <PLL_SetMode>:

void PLL_SetMode(uint8_t mode) {

    switch(mode) {
 5a4:	83 30       	cpi	r24, 0x03	; 3
 5a6:	c1 f1       	breq	.+112    	; 0x618 <PLL_SetMode+0x74>
 5a8:	80 f4       	brcc	.+32     	; 0x5ca <PLL_SetMode+0x26>
 5aa:	81 30       	cpi	r24, 0x01	; 1
 5ac:	89 f1       	breq	.+98     	; 0x610 <PLL_SetMode+0x6c>
 5ae:	82 30       	cpi	r24, 0x02	; 2
 5b0:	49 f1       	breq	.+82     	; 0x604 <PLL_SetMode+0x60>
            bitWrite(pll_in2[1], IN2_DZ1, 1); //
            bitWrite(pll_in2[2], IN2_BO2, 0); // AM mode
            break;
        }

    LC72131_write(LC72131_ADDR_IN1, pll_in1, 3);
 5b2:	43 e0       	ldi	r20, 0x03	; 3
 5b4:	64 e1       	ldi	r22, 0x14	; 20
 5b6:	71 e0       	ldi	r23, 0x01	; 1
 5b8:	82 e8       	ldi	r24, 0x82	; 130
 5ba:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <LC72131_write>
    LC72131_write(LC72131_ADDR_IN2, pll_in2, 3);
 5be:	43 e0       	ldi	r20, 0x03	; 3
 5c0:	61 e1       	ldi	r22, 0x11	; 17
 5c2:	71 e0       	ldi	r23, 0x01	; 1
 5c4:	82 e9       	ldi	r24, 0x92	; 146
 5c6:	0c 94 7c 02 	jmp	0x4f8	; 0x4f8 <LC72131_write>
    switch(mode) {
 5ca:	85 30       	cpi	r24, 0x05	; 5
 5cc:	69 f1       	breq	.+90     	; 0x628 <PLL_SetMode+0x84>
 5ce:	40 f1       	brcs	.+80     	; 0x620 <PLL_SetMode+0x7c>
 5d0:	86 30       	cpi	r24, 0x06	; 6
 5d2:	79 f7       	brne	.-34     	; 0x5b2 <PLL_SetMode+0xe>
            band = PLL_BAND_AM;
 5d4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <band>
            bitWrite(pll_in1[0], IN1_DVS, 0); // Programmable Divider divisor = 1
 5d8:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <pll_in1>
 5dc:	8d 78       	andi	r24, 0x8D	; 141
 5de:	88 68       	ori	r24, 0x88	; 136
 5e0:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <pll_in1>
            bitWrite(pll_in2[0], IN2_GT1, 0); //
 5e4:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <pll_in2>
 5e8:	8d 7f       	andi	r24, 0xFD	; 253
 5ea:	81 60       	ori	r24, 0x01	; 1
 5ec:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <pll_in2>
            bitWrite(pll_in2[1], IN2_DZ0, 0); // Dead zone (DZC).
 5f0:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <pll_in2+0x1>
 5f4:	8f 7b       	andi	r24, 0xBF	; 191
            bitWrite(pll_in2[1], IN2_DZ1, 1); //
 5f6:	80 68       	ori	r24, 0x80	; 128
 5f8:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <pll_in2+0x1>
            bitWrite(pll_in2[2], IN2_BO2, 0); // AM mode
 5fc:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <pll_in2+0x2>
 600:	8f 7d       	andi	r24, 0xDF	; 223
 602:	03 c0       	rjmp	.+6      	; 0x60a <PLL_SetMode+0x66>
            bitClear(pll_in2[2], IN2_BO4);
 604:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <pll_in2+0x2>
 608:	8f 77       	andi	r24, 0x7F	; 127
            bitWrite(pll_in2[2], IN2_BO2, 0); // AM mode
 60a:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <pll_in2+0x2>
            break;
 60e:	d1 cf       	rjmp	.-94     	; 0x5b2 <PLL_SetMode+0xe>
            bitSet(pll_in2[2], IN2_BO4);
 610:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <pll_in2+0x2>
 614:	80 68       	ori	r24, 0x80	; 128
 616:	f9 cf       	rjmp	.-14     	; 0x60a <PLL_SetMode+0x66>
            bitClear(pll_in2[2], IN2_BO1);
 618:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <pll_in2+0x2>
 61c:	8f 7e       	andi	r24, 0xEF	; 239
 61e:	f5 cf       	rjmp	.-22     	; 0x60a <PLL_SetMode+0x66>
            bitSet(pll_in2[2], IN2_BO1);
 620:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <pll_in2+0x2>
 624:	80 61       	ori	r24, 0x10	; 16
 626:	f1 cf       	rjmp	.-30     	; 0x60a <PLL_SetMode+0x66>
            band = PLL_BAND_FM;
 628:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <band>
            bitWrite(pll_in1[0], IN1_DVS, 1); // Programmable Divider divisor = 2
 62c:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <pll_in1>
 630:	8f 71       	andi	r24, 0x1F	; 31
 632:	8a 61       	ori	r24, 0x1A	; 26
 634:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <pll_in1>
            bitWrite(pll_in2[0], IN2_GT0, 0); // IF counter measurement period = 32ms
 638:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <pll_in2>
 63c:	8e 7f       	andi	r24, 0xFE	; 254
            bitWrite(pll_in2[0], IN2_GT1, 1); //
 63e:	82 60       	ori	r24, 0x02	; 2
 640:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <pll_in2>
            bitWrite(pll_in2[1], IN2_DZ1, 0); //
 644:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <pll_in2+0x1>
 648:	8f 77       	andi	r24, 0x7F	; 127
 64a:	80 64       	ori	r24, 0x40	; 64
 64c:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <pll_in2+0x1>
            bitWrite(pll_in2[2], IN2_BO2, 1); // FM mode
 650:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <pll_in2+0x2>
 654:	80 62       	ori	r24, 0x20	; 32
 656:	d9 cf       	rjmp	.-78     	; 0x60a <PLL_SetMode+0x66>

00000658 <PLL_Tune>:

    uint16_t fpd = 0;      // Frequency Programmable Divider (FPD).

    uint8_t tuned=0;

    switch(band) {
 658:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <band>
 65c:	25 30       	cpi	r18, 0x05	; 5
 65e:	21 f0       	breq	.+8      	; 0x668 <PLL_Tune+0x10>
 660:	26 30       	cpi	r18, 0x06	; 6
 662:	09 f1       	breq	.+66     	; 0x6a6 <PLL_Tune+0x4e>
        case PLL_BAND_AM:
        // AM: fpd = ((frequency + FI) / 10) << 4
        fpd = (frequency + 45) << 4;
        break;

        default: return 1;
 664:	91 e0       	ldi	r25, 0x01	; 1
 666:	1d c0       	rjmp	.+58     	; 0x6a2 <PLL_Tune+0x4a>
        fpd = (frequency + 107);
 668:	85 59       	subi	r24, 0x95	; 149
 66a:	9f 4f       	sbci	r25, 0xFF	; 255
    }

    pll_in1[1] = (uint8_t) (fpd >> 8);          // Loading the HIGH byte to the Programmable Divider.
 66c:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <pll_in1+0x1>
    pll_in1[2] =  (uint8_t) (fpd & 0x00ff);     // Loading the LOW byte to the Programmable Divider.
 670:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <pll_in1+0x2>

    LC72131_write(LC72131_ADDR_IN1, pll_in1, 3);
 674:	43 e0       	ldi	r20, 0x03	; 3
 676:	64 e1       	ldi	r22, 0x14	; 20
 678:	71 e0       	ldi	r23, 0x01	; 1
 67a:	82 e8       	ldi	r24, 0x82	; 130
 67c:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <LC72131_write>
 680:	2f ef       	ldi	r18, 0xFF	; 255
 682:	89 ef       	ldi	r24, 0xF9	; 249
 684:	90 e0       	ldi	r25, 0x00	; 0
 686:	21 50       	subi	r18, 0x01	; 1
 688:	80 40       	sbci	r24, 0x00	; 0
 68a:	90 40       	sbci	r25, 0x00	; 0
 68c:	e1 f7       	brne	.-8      	; 0x686 <PLL_Tune+0x2e>
 68e:	00 c0       	rjmp	.+0      	; 0x690 <PLL_Tune+0x38>
 690:	00 00       	nop

    _delay_ms(20); //Some delay to give time to the PLL tune output to set.

    if (digitalRead(TUNED,&TUNED_PIN)==0){
 692:	66 e2       	ldi	r22, 0x26	; 38
 694:	70 e0       	ldi	r23, 0x00	; 0
 696:	84 e0       	ldi	r24, 0x04	; 4
 698:	0e 94 84 00 	call	0x108	; 0x108 <digitalRead>
 69c:	91 e0       	ldi	r25, 0x01	; 1
 69e:	81 11       	cpse	r24, r1
 6a0:	90 e0       	ldi	r25, 0x00	; 0
        tuned=1;
    };

    return tuned;
}
 6a2:	89 2f       	mov	r24, r25
 6a4:	08 95       	ret
        fpd = (frequency + 45) << 4;
 6a6:	8d 96       	adiw	r24, 0x2d	; 45
 6a8:	24 e0       	ldi	r18, 0x04	; 4
 6aa:	88 0f       	add	r24, r24
 6ac:	99 1f       	adc	r25, r25
 6ae:	2a 95       	dec	r18
 6b0:	e1 f7       	brne	.-8      	; 0x6aa <PLL_Tune+0x52>
        break;
 6b2:	dc cf       	rjmp	.-72     	; 0x66c <PLL_Tune+0x14>

000006b4 <millis_init>:

void millis_init(void){

    TIMSK0 |= (1 << TOIE0);           // Enable overflow Interrupt υπερχείλισης for Timer/Counter0.
 6b4:	ee e6       	ldi	r30, 0x6E	; 110
 6b6:	f0 e0       	ldi	r31, 0x00	; 0
 6b8:	80 81       	ld	r24, Z
 6ba:	81 60       	ori	r24, 0x01	; 1
 6bc:	80 83       	st	Z, r24
    TCNT0 = 6;                        // Preload Timer with the calculated value for 1 msec.
 6be:	86 e0       	ldi	r24, 0x06	; 6
 6c0:	86 bd       	out	0x26, r24	; 38
    TCCR0B |= (1<<CS01) | (1<<CS00);  // Start Timer/Counter0 with Prescaler 64.
 6c2:	85 b5       	in	r24, 0x25	; 37
 6c4:	83 60       	ori	r24, 0x03	; 3
 6c6:	85 bd       	out	0x25, r24	; 37
}
 6c8:	08 95       	ret

000006ca <__vector_16>:

// Interrupt every 1 msec. More than enough to read the encoders.
ISR(TIMER0_OVF_vect){
 6ca:	1f 92       	push	r1
 6cc:	0f 92       	push	r0
 6ce:	0f b6       	in	r0, 0x3f	; 63
 6d0:	0f 92       	push	r0
 6d2:	11 24       	eor	r1, r1
 6d4:	8f 93       	push	r24
 6d6:	9f 93       	push	r25

    tick++;
 6d8:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <tick>
 6dc:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <tick+0x1>
 6e0:	01 96       	adiw	r24, 0x01	; 1
 6e2:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <tick+0x1>
 6e6:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <tick>
    TCNT0 += 6;  // Preload Timer with the calculated value for 1 msec.
 6ea:	86 b5       	in	r24, 0x26	; 38
 6ec:	8a 5f       	subi	r24, 0xFA	; 250
 6ee:	86 bd       	out	0x26, r24	; 38
}
 6f0:	9f 91       	pop	r25
 6f2:	8f 91       	pop	r24
 6f4:	0f 90       	pop	r0
 6f6:	0f be       	out	0x3f, r0	; 63
 6f8:	0f 90       	pop	r0
 6fa:	1f 90       	pop	r1
 6fc:	18 95       	reti

000006fe <utofix>:

void utofix(uint16_t x, char *s){
 6fe:	ef 92       	push	r14
 700:	ff 92       	push	r15
 702:	0f 93       	push	r16
 704:	1f 93       	push	r17
 706:	cf 93       	push	r28
 708:	df 93       	push	r29
 70a:	cd b7       	in	r28, 0x3d	; 61
 70c:	de b7       	in	r29, 0x3e	; 62
 70e:	2a 97       	sbiw	r28, 0x0a	; 10
 710:	0f b6       	in	r0, 0x3f	; 63
 712:	f8 94       	cli
 714:	de bf       	out	0x3e, r29	; 62
 716:	0f be       	out	0x3f, r0	; 63
 718:	cd bf       	out	0x3d, r28	; 61
 71a:	8b 01       	movw	r16, r22

    uint16_t temp;
    char str[10];

    temp = x/10;
 71c:	6a e0       	ldi	r22, 0x0A	; 10
 71e:	70 e0       	ldi	r23, 0x00	; 0
 720:	0e 94 78 05 	call	0xaf0	; 0xaf0 <__udivmodhi4>
 724:	7c 01       	movw	r14, r24
    ultoa(temp,str,10);
 726:	90 e0       	ldi	r25, 0x00	; 0
 728:	80 e0       	ldi	r24, 0x00	; 0
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__ultoa_ncheck (unsigned long, char *, unsigned char);
	return __ultoa_ncheck (__val, __s, __radix);
 72a:	2a e0       	ldi	r18, 0x0A	; 10
 72c:	ae 01       	movw	r20, r28
 72e:	4f 5f       	subi	r20, 0xFF	; 255
 730:	5f 4f       	sbci	r21, 0xFF	; 255
 732:	0e 94 9e 05 	call	0xb3c	; 0xb3c <__ultoa_ncheck>
    strcpy(s,str);
 736:	be 01       	movw	r22, r28
 738:	6f 5f       	subi	r22, 0xFF	; 255
 73a:	7f 4f       	sbci	r23, 0xFF	; 255
 73c:	c8 01       	movw	r24, r16
 73e:	0e 94 97 05 	call	0xb2e	; 0xb2e <strcpy>
    strcat(s,".");
 742:	65 e0       	ldi	r22, 0x05	; 5
 744:	71 e0       	ldi	r23, 0x01	; 1
 746:	c8 01       	movw	r24, r16
 748:	0e 94 8c 05 	call	0xb18	; 0xb18 <strcat>
    temp = (x%10);
    ultoa(temp,str,10);
 74c:	b7 01       	movw	r22, r14
 74e:	90 e0       	ldi	r25, 0x00	; 0
 750:	80 e0       	ldi	r24, 0x00	; 0
 752:	2a e0       	ldi	r18, 0x0A	; 10
 754:	ae 01       	movw	r20, r28
 756:	4f 5f       	subi	r20, 0xFF	; 255
 758:	5f 4f       	sbci	r21, 0xFF	; 255
 75a:	0e 94 9e 05 	call	0xb3c	; 0xb3c <__ultoa_ncheck>
    strcat(s,str);
 75e:	be 01       	movw	r22, r28
 760:	6f 5f       	subi	r22, 0xFF	; 255
 762:	7f 4f       	sbci	r23, 0xFF	; 255
 764:	c8 01       	movw	r24, r16
 766:	0e 94 8c 05 	call	0xb18	; 0xb18 <strcat>

}
 76a:	2a 96       	adiw	r28, 0x0a	; 10
 76c:	0f b6       	in	r0, 0x3f	; 63
 76e:	f8 94       	cli
 770:	de bf       	out	0x3e, r29	; 62
 772:	0f be       	out	0x3f, r0	; 63
 774:	cd bf       	out	0x3d, r28	; 61
 776:	df 91       	pop	r29
 778:	cf 91       	pop	r28
 77a:	1f 91       	pop	r17
 77c:	0f 91       	pop	r16
 77e:	ff 90       	pop	r15
 780:	ef 90       	pop	r14
 782:	08 95       	ret

00000784 <lcdupdate>:
void lcdupdate() {
 784:	cf 93       	push	r28
 786:	df 93       	push	r29
 788:	cd b7       	in	r28, 0x3d	; 61
 78a:	de b7       	in	r29, 0x3e	; 62
 78c:	2a 97       	sbiw	r28, 0x0a	; 10
 78e:	0f b6       	in	r0, 0x3f	; 63
 790:	f8 94       	cli
 792:	de bf       	out	0x3e, r29	; 62
 794:	0f be       	out	0x3f, r0	; 63
 796:	cd bf       	out	0x3d, r28	; 61
    lcd_home();
 798:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_home>
    if (band==PLL_BAND_FM){
 79c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <band>
 7a0:	85 30       	cpi	r24, 0x05	; 5
 7a2:	09 f0       	breq	.+2      	; 0x7a6 <lcdupdate+0x22>
 7a4:	43 c0       	rjmp	.+134    	; 0x82c <lcdupdate+0xa8>
        utofix(FMFrequency,s);
 7a6:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <FMFrequency>
 7aa:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <FMFrequency+0x1>
 7ae:	be 01       	movw	r22, r28
 7b0:	6f 5f       	subi	r22, 0xFF	; 255
 7b2:	7f 4f       	sbci	r23, 0xFF	; 255
 7b4:	0e 94 7f 03 	call	0x6fe	; 0x6fe <utofix>
        lcd_puts_P("FM ");
 7b8:	88 e7       	ldi	r24, 0x78	; 120
 7ba:	90 e0       	ldi	r25, 0x00	; 0
 7bc:	0e 94 0e 01 	call	0x21c	; 0x21c <lcd_puts_p>
        lcd_puts(s);
 7c0:	ce 01       	movw	r24, r28
 7c2:	01 96       	adiw	r24, 0x01	; 1
 7c4:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
        lcd_puts_P(" MHz ");
 7c8:	82 e7       	ldi	r24, 0x72	; 114
 7ca:	90 e0       	ldi	r25, 0x00	; 0
        lcd_puts_P(" KHz ");
 7cc:	0e 94 0e 01 	call	0x21c	; 0x21c <lcd_puts_p>
    if (digitalRead(STEREO,&STEREO_PIN)==0){
 7d0:	66 e2       	ldi	r22, 0x26	; 38
 7d2:	70 e0       	ldi	r23, 0x00	; 0
 7d4:	85 e0       	ldi	r24, 0x05	; 5
 7d6:	0e 94 84 00 	call	0x108	; 0x108 <digitalRead>
        lcd_gotoxy(13,0);
 7da:	60 e0       	ldi	r22, 0x00	; 0
    if (digitalRead(STEREO,&STEREO_PIN)==0){
 7dc:	81 11       	cpse	r24, r1
 7de:	3a c0       	rjmp	.+116    	; 0x854 <lcdupdate+0xd0>
        lcd_gotoxy(13,0);
 7e0:	8d e0       	ldi	r24, 0x0D	; 13
 7e2:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <lcd_gotoxy>
        lcd_putc('[');
 7e6:	8b e5       	ldi	r24, 0x5B	; 91
 7e8:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_putc>
        lcd_putc(STSYMBOL);
 7ec:	80 e0       	ldi	r24, 0x00	; 0
 7ee:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_putc>
        lcd_putc(']');
 7f2:	8d e5       	ldi	r24, 0x5D	; 93
 7f4:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_putc>
    if (tuned==1){
 7f8:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <tuned>
        lcd_gotoxy(13,1);
 7fc:	61 e0       	ldi	r22, 0x01	; 1
    if (tuned==1){
 7fe:	81 30       	cpi	r24, 0x01	; 1
 800:	89 f5       	brne	.+98     	; 0x864 <lcdupdate+0xe0>
        lcd_gotoxy(13,1);
 802:	8d e0       	ldi	r24, 0x0D	; 13
 804:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <lcd_gotoxy>
        lcd_putc('[');
 808:	8b e5       	ldi	r24, 0x5B	; 91
 80a:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_putc>
        lcd_putc(TNSYMBOL);
 80e:	81 e0       	ldi	r24, 0x01	; 1
 810:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_putc>
        lcd_putc(']');
 814:	8d e5       	ldi	r24, 0x5D	; 93
 816:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_putc>
}
 81a:	2a 96       	adiw	r28, 0x0a	; 10
 81c:	0f b6       	in	r0, 0x3f	; 63
 81e:	f8 94       	cli
 820:	de bf       	out	0x3e, r29	; 62
 822:	0f be       	out	0x3f, r0	; 63
 824:	cd bf       	out	0x3d, r28	; 61
 826:	df 91       	pop	r29
 828:	cf 91       	pop	r28
 82a:	08 95       	ret
        utofix(AMFrequency,s);
 82c:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <AMFrequency>
 830:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <AMFrequency+0x1>
 834:	be 01       	movw	r22, r28
 836:	6f 5f       	subi	r22, 0xFF	; 255
 838:	7f 4f       	sbci	r23, 0xFF	; 255
 83a:	0e 94 7f 03 	call	0x6fe	; 0x6fe <utofix>
        lcd_puts_P("AM ");
 83e:	8e e6       	ldi	r24, 0x6E	; 110
 840:	90 e0       	ldi	r25, 0x00	; 0
 842:	0e 94 0e 01 	call	0x21c	; 0x21c <lcd_puts_p>
        lcd_puts(s);
 846:	ce 01       	movw	r24, r28
 848:	01 96       	adiw	r24, 0x01	; 1
 84a:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
        lcd_puts_P(" KHz ");
 84e:	88 e6       	ldi	r24, 0x68	; 104
 850:	90 e0       	ldi	r25, 0x00	; 0
 852:	bc cf       	rjmp	.-136    	; 0x7cc <lcdupdate+0x48>
        lcd_gotoxy(13,0);
 854:	8d e0       	ldi	r24, 0x0D	; 13
 856:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <lcd_gotoxy>
        lcd_puts("[ ]");
 85a:	87 e0       	ldi	r24, 0x07	; 7
 85c:	91 e0       	ldi	r25, 0x01	; 1
 85e:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
 862:	ca cf       	rjmp	.-108    	; 0x7f8 <lcdupdate+0x74>
        lcd_gotoxy(13,1);
 864:	8d e0       	ldi	r24, 0x0D	; 13
 866:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <lcd_gotoxy>
        lcd_puts("[ ]");
 86a:	87 e0       	ldi	r24, 0x07	; 7
 86c:	91 e0       	ldi	r25, 0x01	; 1
 86e:	0e 94 02 01 	call	0x204	; 0x204 <lcd_puts>
}
 872:	d3 cf       	rjmp	.-90     	; 0x81a <lcdupdate+0x96>

00000874 <customchar>:

void customchar(){

    lcd_command(_BV(LCD_CGRAM)+STSYMBOL*8);
 874:	80 e4       	ldi	r24, 0x40	; 64
 876:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <lcd_command>
    lcd_putc(0b01110);
 87a:	8e e0       	ldi	r24, 0x0E	; 14
 87c:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_putc>
    lcd_putc(0b01001);
 880:	89 e0       	ldi	r24, 0x09	; 9
 882:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_putc>
    lcd_putc(0b01111);
 886:	8f e0       	ldi	r24, 0x0F	; 15
 888:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_putc>
    lcd_putc(0b01001);
 88c:	89 e0       	ldi	r24, 0x09	; 9
 88e:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_putc>
    lcd_putc(0b11001);
 892:	89 e1       	ldi	r24, 0x19	; 25
 894:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_putc>
    lcd_putc(0b11011);
 898:	8b e1       	ldi	r24, 0x1B	; 27
 89a:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_putc>
    lcd_putc(0b00011);
 89e:	83 e0       	ldi	r24, 0x03	; 3
 8a0:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_putc>
    lcd_putc(0b00000);
 8a4:	80 e0       	ldi	r24, 0x00	; 0
 8a6:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_putc>
    lcd_goto(0);
 8aa:	80 e0       	ldi	r24, 0x00	; 0
 8ac:	0e 94 ef 00 	call	0x1de	; 0x1de <lcd_goto>

    lcd_command(_BV(LCD_CGRAM)+TNSYMBOL*8);
 8b0:	88 e4       	ldi	r24, 0x48	; 72
 8b2:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <lcd_command>
    lcd_putc(0b10001);
 8b6:	81 e1       	ldi	r24, 0x11	; 17
 8b8:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_putc>
    lcd_putc(0b10101);
 8bc:	85 e1       	ldi	r24, 0x15	; 21
 8be:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_putc>
    lcd_putc(0b10101);
 8c2:	85 e1       	ldi	r24, 0x15	; 21
 8c4:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_putc>
    lcd_putc(0b01110);
 8c8:	8e e0       	ldi	r24, 0x0E	; 14
 8ca:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_putc>
    lcd_putc(0b00100);
 8ce:	84 e0       	ldi	r24, 0x04	; 4
 8d0:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_putc>
    lcd_putc(0b00100);
 8d4:	84 e0       	ldi	r24, 0x04	; 4
 8d6:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_putc>
    lcd_putc(0b00100);
 8da:	84 e0       	ldi	r24, 0x04	; 4
 8dc:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_putc>
    lcd_putc(0b00000);
 8e0:	80 e0       	ldi	r24, 0x00	; 0
 8e2:	0e 94 ff 00 	call	0x1fe	; 0x1fe <lcd_putc>
    lcd_goto(0);
 8e6:	80 e0       	ldi	r24, 0x00	; 0
 8e8:	0c 94 ef 00 	jmp	0x1de	; 0x1de <lcd_goto>

000008ec <main>:
    lcd_init();                   // LCD initialization.
 8ec:	0e 94 1c 01 	call	0x238	; 0x238 <lcd_init>
    lcd_clrscr();                 // Clear the LCD.
 8f0:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <lcd_clrscr>
    lcd_home();                   // Set the cursor at home position.
 8f4:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <lcd_home>
    customchar();                 // Create custom characters for STEREO and TUNED symbols.
 8f8:	0e 94 3a 04 	call	0x874	; 0x874 <customchar>
    TUNED_DDR &=  ~(1<<TUNED);    // TUNED pin as Input.
 8fc:	3c 98       	cbi	0x07, 4	; 7
    TUNED_PORT |= (1<<TUNED);     // TUNED pin pull-up resistor enabled.
 8fe:	44 9a       	sbi	0x08, 4	; 8
    STEREO_DDR &=  ~(1<<STEREO);  // STEREO pin as Input.
 900:	3d 98       	cbi	0x07, 5	; 7
    STEREO_PORT |= (1<<STEREO);   // STEREO pin pull-up resistor enabled.
 902:	45 9a       	sbi	0x08, 5	; 8
    UPSW_DDR &=  ~(1<<UPSW);      // UP switch pin as Input.
 904:	20 98       	cbi	0x04, 0	; 4
    UPSW_PORT |= (1<<UPSW);       // UP switch pin pull-up resistor enabled.
 906:	28 9a       	sbi	0x05, 0	; 5
    DOWNSW_DDR &=  ~(1<<DOWNSW);  // UP switch pin as Input.
 908:	21 98       	cbi	0x04, 1	; 4
    DOWNSW_PORT |= (1<<DOWNSW);   // UP switch pin pull-up resistor enabled.
 90a:	29 9a       	sbi	0x05, 1	; 5
    AMFMSW_DDR &=  ~(1<<AMFMSW);  // UP switch pin as Input.
 90c:	22 98       	cbi	0x04, 2	; 4
    AMFMSW_PORT |= (1<<AMFMSW);   // UP switch pin pull-up resistor enabled.
 90e:	2a 9a       	sbi	0x05, 2	; 5
    millis_init();                // Starting the time keeping function.
 910:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <millis_init>
    sei();                        // Enabling global Interrupts.
 914:	78 94       	sei
    lcd_puts_P("-- AVR RADIO --");
 916:	84 e9       	ldi	r24, 0x94	; 148
 918:	90 e0       	ldi	r25, 0x00	; 0
 91a:	0e 94 0e 01 	call	0x21c	; 0x21c <lcd_puts_p>
 91e:	2f ef       	ldi	r18, 0xFF	; 255
 920:	87 ea       	ldi	r24, 0xA7	; 167
 922:	91 e6       	ldi	r25, 0x61	; 97
 924:	21 50       	subi	r18, 0x01	; 1
 926:	80 40       	sbci	r24, 0x00	; 0
 928:	90 40       	sbci	r25, 0x00	; 0
 92a:	e1 f7       	brne	.-8      	; 0x924 <__stack+0x25>
 92c:	00 c0       	rjmp	.+0      	; 0x92e <__stack+0x2f>
 92e:	00 00       	nop
    lcd_clrscr();
 930:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <lcd_clrscr>
    LC72131_init();
 934:	0e 94 8f 01 	call	0x31e	; 0x31e <LC72131_init>
    PLL_SetMode(PLL_BAND_FM);
 938:	85 e0       	ldi	r24, 0x05	; 5
 93a:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <PLL_SetMode>
    tuned = PLL_Tune(FMFrequency);
 93e:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <FMFrequency>
 942:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <FMFrequency+0x1>
 946:	0e 94 2c 03 	call	0x658	; 0x658 <PLL_Tune>
 94a:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <tuned>
    uint8_t tunemode=0;
 94e:	c0 e0       	ldi	r28, 0x00	; 0
            if (FMFrequency >= 1080) FMFrequency=875;
 950:	0b e6       	ldi	r16, 0x6B	; 107
 952:	13 e0       	ldi	r17, 0x03	; 3
            if (FMFrequency <= 875) FMFrequency=1080;
 954:	88 e3       	ldi	r24, 0x38	; 56
 956:	e8 2e       	mov	r14, r24
 958:	84 e0       	ldi	r24, 0x04	; 4
 95a:	f8 2e       	mov	r15, r24
            tunemode ^= toggletn;
 95c:	d1 e0       	ldi	r29, 0x01	; 1
        if (readsw()==UP && tunemode==1){
 95e:	0e 94 82 02 	call	0x504	; 0x504 <readsw>
 962:	81 30       	cpi	r24, 0x01	; 1
 964:	09 f0       	breq	.+2      	; 0x968 <__stack+0x69>
 966:	5a c0       	rjmp	.+180    	; 0xa1c <__stack+0x11d>
 968:	c1 30       	cpi	r28, 0x01	; 1
 96a:	09 f0       	breq	.+2      	; 0x96e <__stack+0x6f>
 96c:	57 c0       	rjmp	.+174    	; 0xa1c <__stack+0x11d>
            tuned=0;
 96e:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <tuned>
            lcdupdate();
 972:	0e 94 c2 03 	call	0x784	; 0x784 <lcdupdate>
            while(tuned==0){
 976:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <tuned>
 97a:	88 23       	and	r24, r24
 97c:	91 f1       	breq	.+100    	; 0x9e2 <__stack+0xe3>
        if (readsw()==DOWN && tunemode==1){
 97e:	0e 94 82 02 	call	0x504	; 0x504 <readsw>
 982:	82 30       	cpi	r24, 0x02	; 2
 984:	09 f0       	breq	.+2      	; 0x988 <__stack+0x89>
 986:	8b c0       	rjmp	.+278    	; 0xa9e <__stack+0x19f>
 988:	c1 30       	cpi	r28, 0x01	; 1
 98a:	09 f0       	breq	.+2      	; 0x98e <__stack+0x8f>
 98c:	88 c0       	rjmp	.+272    	; 0xa9e <__stack+0x19f>
            tuned=0;
 98e:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <tuned>
                lcdupdate();
 992:	0e 94 c2 03 	call	0x784	; 0x784 <lcdupdate>
            while(tuned==0){
 996:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <tuned>
 99a:	88 23       	and	r24, r24
 99c:	09 f4       	brne	.+2      	; 0x9a0 <__stack+0xa1>
 99e:	62 c0       	rjmp	.+196    	; 0xa64 <__stack+0x165>
        if (readsw()==TNMODE){
 9a0:	0e 94 82 02 	call	0x504	; 0x504 <readsw>
 9a4:	83 30       	cpi	r24, 0x03	; 3
 9a6:	09 f4       	brne	.+2      	; 0x9aa <__stack+0xab>
            tunemode ^= toggletn;
 9a8:	cd 27       	eor	r28, r29
        lcdupdate();
 9aa:	0e 94 c2 03 	call	0x784	; 0x784 <lcdupdate>
            lcd_gotoxy(0,1);
 9ae:	61 e0       	ldi	r22, 0x01	; 1
 9b0:	80 e0       	ldi	r24, 0x00	; 0
        if (tunemode==0){
 9b2:	c1 11       	cpse	r28, r1
 9b4:	98 c0       	rjmp	.+304    	; 0xae6 <__stack+0x1e7>
            lcd_gotoxy(0,1);
 9b6:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <lcd_gotoxy>
            lcd_puts_P("MANUAL SCAN");
 9ba:	88 e8       	ldi	r24, 0x88	; 136
 9bc:	90 e0       	ldi	r25, 0x00	; 0
            lcd_puts_P("AUTO SCAN  ");
 9be:	0e 94 0e 01 	call	0x21c	; 0x21c <lcd_puts_p>
 9c2:	8f ef       	ldi	r24, 0xFF	; 255
 9c4:	93 ec       	ldi	r25, 0xC3	; 195
 9c6:	29 e0       	ldi	r18, 0x09	; 9
 9c8:	81 50       	subi	r24, 0x01	; 1
 9ca:	90 40       	sbci	r25, 0x00	; 0
 9cc:	20 40       	sbci	r18, 0x00	; 0
 9ce:	e1 f7       	brne	.-8      	; 0x9c8 <__stack+0xc9>
 9d0:	00 c0       	rjmp	.+0      	; 0x9d2 <__stack+0xd3>
 9d2:	00 00       	nop
 9d4:	8f e3       	ldi	r24, 0x3F	; 63
 9d6:	9c e9       	ldi	r25, 0x9C	; 156
 9d8:	01 97       	sbiw	r24, 0x01	; 1
 9da:	f1 f7       	brne	.-4      	; 0x9d8 <__stack+0xd9>
 9dc:	00 c0       	rjmp	.+0      	; 0x9de <__stack+0xdf>
 9de:	00 00       	nop
 9e0:	be cf       	rjmp	.-132    	; 0x95e <__stack+0x5f>
                FMFrequency++;
 9e2:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <FMFrequency>
 9e6:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <FMFrequency+0x1>
 9ea:	01 96       	adiw	r24, 0x01	; 1
 9ec:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <FMFrequency+0x1>
 9f0:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <FMFrequency>
                if (FMFrequency >= 1080) FMFrequency=875;
 9f4:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <FMFrequency>
 9f8:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <FMFrequency+0x1>
 9fc:	88 33       	cpi	r24, 0x38	; 56
 9fe:	94 40       	sbci	r25, 0x04	; 4
 a00:	20 f0       	brcs	.+8      	; 0xa0a <__stack+0x10b>
 a02:	10 93 04 01 	sts	0x0104, r17	; 0x800104 <FMFrequency+0x1>
 a06:	00 93 03 01 	sts	0x0103, r16	; 0x800103 <FMFrequency>
                tuned = PLL_Tune(FMFrequency);
 a0a:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <FMFrequency>
 a0e:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <FMFrequency+0x1>
 a12:	0e 94 2c 03 	call	0x658	; 0x658 <PLL_Tune>
 a16:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <tuned>
 a1a:	ad cf       	rjmp	.-166    	; 0x976 <__stack+0x77>
        }else if (readsw()==UP && tunemode==0){
 a1c:	0e 94 82 02 	call	0x504	; 0x504 <readsw>
 a20:	81 30       	cpi	r24, 0x01	; 1
 a22:	09 f0       	breq	.+2      	; 0xa26 <__stack+0x127>
 a24:	ac cf       	rjmp	.-168    	; 0x97e <__stack+0x7f>
 a26:	c1 11       	cpse	r28, r1
 a28:	aa cf       	rjmp	.-172    	; 0x97e <__stack+0x7f>
            FMFrequency++;
 a2a:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <FMFrequency>
 a2e:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <FMFrequency+0x1>
 a32:	01 96       	adiw	r24, 0x01	; 1
 a34:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <FMFrequency+0x1>
 a38:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <FMFrequency>
            if (FMFrequency >= 1080) FMFrequency=875;
 a3c:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <FMFrequency>
 a40:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <FMFrequency+0x1>
 a44:	88 33       	cpi	r24, 0x38	; 56
 a46:	94 40       	sbci	r25, 0x04	; 4
 a48:	20 f0       	brcs	.+8      	; 0xa52 <__stack+0x153>
 a4a:	10 93 04 01 	sts	0x0104, r17	; 0x800104 <FMFrequency+0x1>
 a4e:	00 93 03 01 	sts	0x0103, r16	; 0x800103 <FMFrequency>
            tuned = PLL_Tune(FMFrequency);
 a52:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <FMFrequency>
 a56:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <FMFrequency+0x1>
 a5a:	0e 94 2c 03 	call	0x658	; 0x658 <PLL_Tune>
 a5e:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <tuned>
 a62:	8d cf       	rjmp	.-230    	; 0x97e <__stack+0x7f>
                FMFrequency--;
 a64:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <FMFrequency>
 a68:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <FMFrequency+0x1>
 a6c:	01 97       	sbiw	r24, 0x01	; 1
 a6e:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <FMFrequency+0x1>
 a72:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <FMFrequency>
                if (FMFrequency <= 875) FMFrequency=1080;
 a76:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <FMFrequency>
 a7a:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <FMFrequency+0x1>
 a7e:	8c 36       	cpi	r24, 0x6C	; 108
 a80:	93 40       	sbci	r25, 0x03	; 3
 a82:	20 f4       	brcc	.+8      	; 0xa8c <__stack+0x18d>
 a84:	f0 92 04 01 	sts	0x0104, r15	; 0x800104 <FMFrequency+0x1>
 a88:	e0 92 03 01 	sts	0x0103, r14	; 0x800103 <FMFrequency>
                tuned = PLL_Tune(FMFrequency);
 a8c:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <FMFrequency>
 a90:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <FMFrequency+0x1>
 a94:	0e 94 2c 03 	call	0x658	; 0x658 <PLL_Tune>
 a98:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <tuned>
 a9c:	7a cf       	rjmp	.-268    	; 0x992 <__stack+0x93>
        }else if (readsw()==DOWN && tunemode==0){
 a9e:	0e 94 82 02 	call	0x504	; 0x504 <readsw>
 aa2:	82 30       	cpi	r24, 0x02	; 2
 aa4:	09 f0       	breq	.+2      	; 0xaa8 <__stack+0x1a9>
 aa6:	7c cf       	rjmp	.-264    	; 0x9a0 <__stack+0xa1>
 aa8:	c1 11       	cpse	r28, r1
 aaa:	7a cf       	rjmp	.-268    	; 0x9a0 <__stack+0xa1>
            FMFrequency--;
 aac:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <FMFrequency>
 ab0:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <FMFrequency+0x1>
 ab4:	01 97       	sbiw	r24, 0x01	; 1
 ab6:	90 93 04 01 	sts	0x0104, r25	; 0x800104 <FMFrequency+0x1>
 aba:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <FMFrequency>
            if (FMFrequency <= 875) FMFrequency=1080;
 abe:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <FMFrequency>
 ac2:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <FMFrequency+0x1>
 ac6:	8c 36       	cpi	r24, 0x6C	; 108
 ac8:	93 40       	sbci	r25, 0x03	; 3
 aca:	20 f4       	brcc	.+8      	; 0xad4 <__stack+0x1d5>
 acc:	f0 92 04 01 	sts	0x0104, r15	; 0x800104 <FMFrequency+0x1>
 ad0:	e0 92 03 01 	sts	0x0103, r14	; 0x800103 <FMFrequency>
            tuned = PLL_Tune(FMFrequency);
 ad4:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <FMFrequency>
 ad8:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <FMFrequency+0x1>
 adc:	0e 94 2c 03 	call	0x658	; 0x658 <PLL_Tune>
 ae0:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <tuned>
 ae4:	5d cf       	rjmp	.-326    	; 0x9a0 <__stack+0xa1>
            lcd_gotoxy(0,1);
 ae6:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <lcd_gotoxy>
            lcd_puts_P("AUTO SCAN  ");
 aea:	8c e7       	ldi	r24, 0x7C	; 124
 aec:	90 e0       	ldi	r25, 0x00	; 0
 aee:	67 cf       	rjmp	.-306    	; 0x9be <__stack+0xbf>

00000af0 <__udivmodhi4>:
 af0:	aa 1b       	sub	r26, r26
 af2:	bb 1b       	sub	r27, r27
 af4:	51 e1       	ldi	r21, 0x11	; 17
 af6:	07 c0       	rjmp	.+14     	; 0xb06 <__udivmodhi4_ep>

00000af8 <__udivmodhi4_loop>:
 af8:	aa 1f       	adc	r26, r26
 afa:	bb 1f       	adc	r27, r27
 afc:	a6 17       	cp	r26, r22
 afe:	b7 07       	cpc	r27, r23
 b00:	10 f0       	brcs	.+4      	; 0xb06 <__udivmodhi4_ep>
 b02:	a6 1b       	sub	r26, r22
 b04:	b7 0b       	sbc	r27, r23

00000b06 <__udivmodhi4_ep>:
 b06:	88 1f       	adc	r24, r24
 b08:	99 1f       	adc	r25, r25
 b0a:	5a 95       	dec	r21
 b0c:	a9 f7       	brne	.-22     	; 0xaf8 <__udivmodhi4_loop>
 b0e:	80 95       	com	r24
 b10:	90 95       	com	r25
 b12:	bc 01       	movw	r22, r24
 b14:	cd 01       	movw	r24, r26
 b16:	08 95       	ret

00000b18 <strcat>:
 b18:	fb 01       	movw	r30, r22
 b1a:	dc 01       	movw	r26, r24
 b1c:	0d 90       	ld	r0, X+
 b1e:	00 20       	and	r0, r0
 b20:	e9 f7       	brne	.-6      	; 0xb1c <strcat+0x4>
 b22:	11 97       	sbiw	r26, 0x01	; 1
 b24:	01 90       	ld	r0, Z+
 b26:	0d 92       	st	X+, r0
 b28:	00 20       	and	r0, r0
 b2a:	e1 f7       	brne	.-8      	; 0xb24 <strcat+0xc>
 b2c:	08 95       	ret

00000b2e <strcpy>:
 b2e:	fb 01       	movw	r30, r22
 b30:	dc 01       	movw	r26, r24
 b32:	01 90       	ld	r0, Z+
 b34:	0d 92       	st	X+, r0
 b36:	00 20       	and	r0, r0
 b38:	e1 f7       	brne	.-8      	; 0xb32 <strcpy+0x4>
 b3a:	08 95       	ret

00000b3c <__ultoa_ncheck>:
 b3c:	bb 27       	eor	r27, r27

00000b3e <__ultoa_common>:
 b3e:	fa 01       	movw	r30, r20
 b40:	a6 2f       	mov	r26, r22
 b42:	62 17       	cp	r22, r18
 b44:	71 05       	cpc	r23, r1
 b46:	81 05       	cpc	r24, r1
 b48:	91 05       	cpc	r25, r1
 b4a:	33 0b       	sbc	r19, r19
 b4c:	30 fb       	bst	r19, 0
 b4e:	66 f0       	brts	.+24     	; 0xb68 <__ultoa_common+0x2a>
 b50:	aa 27       	eor	r26, r26
 b52:	66 0f       	add	r22, r22
 b54:	77 1f       	adc	r23, r23
 b56:	88 1f       	adc	r24, r24
 b58:	99 1f       	adc	r25, r25
 b5a:	aa 1f       	adc	r26, r26
 b5c:	a2 17       	cp	r26, r18
 b5e:	10 f0       	brcs	.+4      	; 0xb64 <__ultoa_common+0x26>
 b60:	a2 1b       	sub	r26, r18
 b62:	63 95       	inc	r22
 b64:	38 50       	subi	r19, 0x08	; 8
 b66:	a9 f7       	brne	.-22     	; 0xb52 <__ultoa_common+0x14>
 b68:	a0 5d       	subi	r26, 0xD0	; 208
 b6a:	aa 33       	cpi	r26, 0x3A	; 58
 b6c:	08 f0       	brcs	.+2      	; 0xb70 <__ultoa_common+0x32>
 b6e:	a9 5d       	subi	r26, 0xD9	; 217
 b70:	a1 93       	st	Z+, r26
 b72:	36 f7       	brtc	.-52     	; 0xb40 <__ultoa_common+0x2>
 b74:	b1 11       	cpse	r27, r1
 b76:	b1 93       	st	Z+, r27
 b78:	10 82       	st	Z, r1
 b7a:	ca 01       	movw	r24, r20
 b7c:	0c 94 c0 05 	jmp	0xb80	; 0xb80 <strrev>

00000b80 <strrev>:
 b80:	dc 01       	movw	r26, r24
 b82:	fc 01       	movw	r30, r24
 b84:	67 2f       	mov	r22, r23
 b86:	71 91       	ld	r23, Z+
 b88:	77 23       	and	r23, r23
 b8a:	e1 f7       	brne	.-8      	; 0xb84 <strrev+0x4>
 b8c:	32 97       	sbiw	r30, 0x02	; 2
 b8e:	04 c0       	rjmp	.+8      	; 0xb98 <strrev+0x18>
 b90:	7c 91       	ld	r23, X
 b92:	6d 93       	st	X+, r22
 b94:	70 83       	st	Z, r23
 b96:	62 91       	ld	r22, -Z
 b98:	ae 17       	cp	r26, r30
 b9a:	bf 07       	cpc	r27, r31
 b9c:	c8 f3       	brcs	.-14     	; 0xb90 <strrev+0x10>
 b9e:	08 95       	ret

00000ba0 <_exit>:
 ba0:	f8 94       	cli

00000ba2 <__stop_program>:
 ba2:	ff cf       	rjmp	.-2      	; 0xba2 <__stop_program>
