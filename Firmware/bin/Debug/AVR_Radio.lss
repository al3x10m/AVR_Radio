
bin/Debug/AVR_Radio.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000a86  00000b1a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a86  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  0080010a  0080010a  00000b24  2**0
                  ALLOC
  3 .stab         00002898  00000000  00000000  00000b24  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001406  00000000  00000000  000033bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000047c2  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000047d4  2**2
                  CONTENTS, READONLY
  7 .debug_info   000005f4  00000000  00000000  00004814  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000005a2  00000000  00000000  00004e08  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001d  00000000  00000000  000053aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000208  00000000  00000000  000053c7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__ctors_end>
   4:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
   8:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
   c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  10:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  14:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  18:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  1c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  20:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  24:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  28:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  2c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  30:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  34:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  38:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  3c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  40:	0c 94 f4 02 	jmp	0x5e8	; 0x5e8 <__vector_16>
  44:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  48:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  4c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  50:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  54:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  58:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  5c:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  60:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>
  64:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	20 4d       	sbci	r18, 0xD0	; 208
  6a:	48 7a       	andi	r20, 0xA8	; 168
  6c:	20 00       	.word	0x0020	; ????

0000006e <__c.2236>:
  6e:	46 4d 20 00                                         FM .

00000072 <__c.2230>:
  72:	41 55 54 4f 20 53 43 41 4e 20 20 00                 AUTO SCAN  .

0000007e <__c.2228>:
  7e:	4d 41 4e 55 41 4c 20 53 43 41 4e 00                 MANUAL SCAN.

0000008a <__c.2220>:
  8a:	2d 2d 20 41 56 52 20 52 41 44 49 4f 20 2d 2d 00     -- AVR RADIO --.

0000009a <__ctors_end>:
  9a:	11 24       	eor	r1, r1
  9c:	1f be       	out	0x3f, r1	; 63
  9e:	cf ef       	ldi	r28, 0xFF	; 255
  a0:	d8 e0       	ldi	r29, 0x08	; 8
  a2:	de bf       	out	0x3e, r29	; 62
  a4:	cd bf       	out	0x3d, r28	; 61

000000a6 <__do_copy_data>:
  a6:	11 e0       	ldi	r17, 0x01	; 1
  a8:	a0 e0       	ldi	r26, 0x00	; 0
  aa:	b1 e0       	ldi	r27, 0x01	; 1
  ac:	e6 e8       	ldi	r30, 0x86	; 134
  ae:	fa e0       	ldi	r31, 0x0A	; 10
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <__do_copy_data+0x10>
  b2:	05 90       	lpm	r0, Z+
  b4:	0d 92       	st	X+, r0
  b6:	aa 30       	cpi	r26, 0x0A	; 10
  b8:	b1 07       	cpc	r27, r17
  ba:	d9 f7       	brne	.-10     	; 0xb2 <__do_copy_data+0xc>

000000bc <__do_clear_bss>:
  bc:	21 e0       	ldi	r18, 0x01	; 1
  be:	aa e0       	ldi	r26, 0x0A	; 10
  c0:	b1 e0       	ldi	r27, 0x01	; 1
  c2:	01 c0       	rjmp	.+2      	; 0xc6 <.do_clear_bss_start>

000000c4 <.do_clear_bss_loop>:
  c4:	1d 92       	st	X+, r1

000000c6 <.do_clear_bss_start>:
  c6:	a5 31       	cpi	r26, 0x15	; 21
  c8:	b2 07       	cpc	r27, r18
  ca:	e1 f7       	brne	.-8      	; 0xc4 <.do_clear_bss_loop>
  cc:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <main>
  d0:	0c 94 41 05 	jmp	0xa82	; 0xa82 <_exit>

000000d4 <__bad_interrupt>:
  d4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d8 <digitalWrite>:
#include <stdio.h>

#include "bit_manipulation.h"

void digitalWrite(uint8_t pin, volatile uint8_t *port, uint8_t val)
{
  d8:	fb 01       	movw	r30, r22
  da:	21 e0       	ldi	r18, 0x01	; 1
  dc:	30 e0       	ldi	r19, 0x00	; 0
  de:	b9 01       	movw	r22, r18
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <digitalWrite+0xe>
  e2:	66 0f       	add	r22, r22
  e4:	77 1f       	adc	r23, r23
  e6:	8a 95       	dec	r24
  e8:	e2 f7       	brpl	.-8      	; 0xe2 <digitalWrite+0xa>
  ea:	cb 01       	movw	r24, r22

        if (val == 0) {
                *port &= ~(1<<pin);
  ec:	90 81       	ld	r25, Z
        if (val == 0) {
  ee:	41 11       	cpse	r20, r1
  f0:	04 c0       	rjmp	.+8      	; 0xfa <digitalWrite+0x22>
                *port &= ~(1<<pin);
  f2:	80 95       	com	r24
  f4:	89 23       	and	r24, r25
        } else {
                *port |= (1<<pin);
  f6:	80 83       	st	Z, r24
        };
}
  f8:	08 95       	ret
                *port |= (1<<pin);
  fa:	89 2b       	or	r24, r25
  fc:	fc cf       	rjmp	.-8      	; 0xf6 <digitalWrite+0x1e>

000000fe <digitalRead>:

uint8_t digitalRead(uint8_t pin, uint8_t port)
{

        if (bit_is_clear(port, pin)) {
  fe:	70 e0       	ldi	r23, 0x00	; 0
 100:	02 c0       	rjmp	.+4      	; 0x106 <digitalRead+0x8>
 102:	75 95       	asr	r23
 104:	67 95       	ror	r22
 106:	8a 95       	dec	r24
 108:	e2 f7       	brpl	.-8      	; 0x102 <digitalRead+0x4>
                return 0;
        } else {
                return 1;
        }
}
 10a:	86 2f       	mov	r24, r22
 10c:	81 70       	andi	r24, 0x01	; 1
 10e:	08 95       	ret

00000110 <lcd_e_port_low>:
      case 4 : LCD_E4_PORT&=~_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT&=~_BV(LCD_E_PIN);
 110:	5b 98       	cbi	0x0b, 3	; 11
  #if (LCD_DISPLAYS>1)
    }
  #endif
}
 112:	08 95       	ret

00000114 <lcd_e_port_high>:
      case 4 : LCD_E4_PORT|=_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT|=_BV(LCD_E_PIN);
 114:	5b 9a       	sbi	0x0b, 3	; 11
  #if (LCD_DISPLAYS>1)
    }
  #endif
}
 116:	08 95       	ret

00000118 <lcd_write>:
          rs     1: write data
                 0: write instruction
Returns:  none
*************************************************************************/
static void lcd_write(uint8_t data,uint8_t rs)
  {
 118:	cf 93       	push	r28
 11a:	df 93       	push	r29
 11c:	c8 2f       	mov	r28, r24
 11e:	d6 2f       	mov	r29, r22
          Delay_us(5);
          PrevCmdInvolvedAddressCounter=0;
        }
    #endif

    if (rs)
 120:	66 23       	and	r22, r22
 122:	e1 f1       	breq	.+120    	; 0x19c <lcd_write+0x84>
      {
        lcd_rs_port_high();                            // RS=1: Write Character
 124:	5a 9a       	sbi	0x0b, 2	; 11
        PrevCmdInvolvedAddressCounter=0;
        #endif
      }

    #if LCD_BITS==4
      lcd_db7_port_set(data&_BV(7));                  //Output High Nibble
 126:	c7 ff       	sbrs	r28, 7
 128:	3b c0       	rjmp	.+118    	; 0x1a0 <lcd_write+0x88>
 12a:	5f 9a       	sbi	0x0b, 7	; 11
      lcd_db6_port_set(data&_BV(6));
 12c:	c6 ff       	sbrs	r28, 6
 12e:	3a c0       	rjmp	.+116    	; 0x1a4 <lcd_write+0x8c>
 130:	5e 9a       	sbi	0x0b, 6	; 11
      lcd_db5_port_set(data&_BV(5));
 132:	c5 ff       	sbrs	r28, 5
 134:	39 c0       	rjmp	.+114    	; 0x1a8 <lcd_write+0x90>
 136:	5d 9a       	sbi	0x0b, 5	; 11
      lcd_db4_port_set(data&_BV(4));
 138:	c4 ff       	sbrs	r28, 4
 13a:	38 c0       	rjmp	.+112    	; 0x1ac <lcd_write+0x94>
 13c:	5c 9a       	sbi	0x0b, 4	; 11

      Delay_ns(100);
 13e:	00 c0       	rjmp	.+0      	; 0x140 <lcd_write+0x28>
      lcd_e_port_high();
 140:	0e 94 8a 00 	call	0x114	; 0x114 <lcd_e_port_high>

      Delay_ns(500);
 144:	82 e0       	ldi	r24, 0x02	; 2
 146:	8a 95       	dec	r24
 148:	f1 f7       	brne	.-4      	; 0x146 <lcd_write+0x2e>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <lcd_write+0x34>
      lcd_e_port_low();
 14c:	0e 94 88 00 	call	0x110	; 0x110 <lcd_e_port_low>

      lcd_db7_port_set(data&_BV(3));                  //Output High Nibble
 150:	c3 ff       	sbrs	r28, 3
 152:	2e c0       	rjmp	.+92     	; 0x1b0 <lcd_write+0x98>
 154:	5f 9a       	sbi	0x0b, 7	; 11
      lcd_db6_port_set(data&_BV(2));
 156:	c2 ff       	sbrs	r28, 2
 158:	2d c0       	rjmp	.+90     	; 0x1b4 <lcd_write+0x9c>
 15a:	5e 9a       	sbi	0x0b, 6	; 11
      lcd_db5_port_set(data&_BV(1));
 15c:	c1 ff       	sbrs	r28, 1
 15e:	2c c0       	rjmp	.+88     	; 0x1b8 <lcd_write+0xa0>
 160:	5d 9a       	sbi	0x0b, 5	; 11
      lcd_db4_port_set(data&_BV(0));
 162:	c0 ff       	sbrs	r28, 0
 164:	2b c0       	rjmp	.+86     	; 0x1bc <lcd_write+0xa4>
 166:	5c 9a       	sbi	0x0b, 4	; 11

      Delay_ns(100);
 168:	00 c0       	rjmp	.+0      	; 0x16a <lcd_write+0x52>
      lcd_e_port_high();
 16a:	0e 94 8a 00 	call	0x114	; 0x114 <lcd_e_port_high>

      Delay_ns(500);
 16e:	92 e0       	ldi	r25, 0x02	; 2
 170:	9a 95       	dec	r25
 172:	f1 f7       	brne	.-4      	; 0x170 <lcd_write+0x58>
 174:	00 c0       	rjmp	.+0      	; 0x176 <lcd_write+0x5e>
      lcd_e_port_low();
 176:	0e 94 88 00 	call	0x110	; 0x110 <lcd_e_port_low>

      lcd_db7_port_high();                            // All Data Pins High (Inactive)
 17a:	5f 9a       	sbi	0x0b, 7	; 11
      lcd_db6_port_high();
 17c:	5e 9a       	sbi	0x0b, 6	; 11
      lcd_db5_port_high();
 17e:	5d 9a       	sbi	0x0b, 5	; 11
      lcd_db4_port_high();
 180:	5c 9a       	sbi	0x0b, 4	; 11
      lcd_db1_port_high();
      lcd_db0_port_high();
    #endif

    #if (WAIT_MODE==0 || RW_LINE_IMPLEMENTED==0)
      if (!rs && data<=((1<<LCD_CLR) | (1<<LCD_HOME))) // Is command clrscr or home?
 182:	d1 11       	cpse	r29, r1
 184:	1d c0       	rjmp	.+58     	; 0x1c0 <lcd_write+0xa8>
 186:	c4 30       	cpi	r28, 0x04	; 4
 188:	d8 f4       	brcc	.+54     	; 0x1c0 <lcd_write+0xa8>
        Delay_us(1640);
 18a:	8f e9       	ldi	r24, 0x9F	; 159
 18c:	99 e1       	ldi	r25, 0x19	; 25
 18e:	01 97       	sbiw	r24, 0x01	; 1
 190:	f1 f7       	brne	.-4      	; 0x18e <lcd_write+0x76>
 192:	00 c0       	rjmp	.+0      	; 0x194 <lcd_write+0x7c>
      else Delay_us(40);
 194:	00 00       	nop
    #endif
  }
 196:	df 91       	pop	r29
 198:	cf 91       	pop	r28
 19a:	08 95       	ret
        lcd_rs_port_low();                          // RS=0: Write Command
 19c:	5a 98       	cbi	0x0b, 2	; 11
 19e:	c3 cf       	rjmp	.-122    	; 0x126 <lcd_write+0xe>
      lcd_db7_port_set(data&_BV(7));                  //Output High Nibble
 1a0:	5f 98       	cbi	0x0b, 7	; 11
 1a2:	c4 cf       	rjmp	.-120    	; 0x12c <lcd_write+0x14>
      lcd_db6_port_set(data&_BV(6));
 1a4:	5e 98       	cbi	0x0b, 6	; 11
 1a6:	c5 cf       	rjmp	.-118    	; 0x132 <lcd_write+0x1a>
      lcd_db5_port_set(data&_BV(5));
 1a8:	5d 98       	cbi	0x0b, 5	; 11
 1aa:	c6 cf       	rjmp	.-116    	; 0x138 <lcd_write+0x20>
      lcd_db4_port_set(data&_BV(4));
 1ac:	5c 98       	cbi	0x0b, 4	; 11
 1ae:	c7 cf       	rjmp	.-114    	; 0x13e <lcd_write+0x26>
      lcd_db7_port_set(data&_BV(3));                  //Output High Nibble
 1b0:	5f 98       	cbi	0x0b, 7	; 11
 1b2:	d1 cf       	rjmp	.-94     	; 0x156 <lcd_write+0x3e>
      lcd_db6_port_set(data&_BV(2));
 1b4:	5e 98       	cbi	0x0b, 6	; 11
 1b6:	d2 cf       	rjmp	.-92     	; 0x15c <lcd_write+0x44>
      lcd_db5_port_set(data&_BV(1));
 1b8:	5d 98       	cbi	0x0b, 5	; 11
 1ba:	d3 cf       	rjmp	.-90     	; 0x162 <lcd_write+0x4a>
      lcd_db4_port_set(data&_BV(0));
 1bc:	5c 98       	cbi	0x0b, 4	; 11
 1be:	d4 cf       	rjmp	.-88     	; 0x168 <lcd_write+0x50>
      else Delay_us(40);
 1c0:	95 ed       	ldi	r25, 0xD5	; 213
 1c2:	9a 95       	dec	r25
 1c4:	f1 f7       	brne	.-4      	; 0x1c2 <lcd_write+0xaa>
 1c6:	e6 cf       	rjmp	.-52     	; 0x194 <lcd_write+0x7c>

000001c8 <lcd_command>:
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
  {
    lcd_write(cmd,0);
 1c8:	60 e0       	ldi	r22, 0x00	; 0
 1ca:	0c 94 8c 00 	jmp	0x118	; 0x118 <lcd_write>

000001ce <lcd_goto>:
Input:    pos position
Returns:  none
*************************************************************************/
void lcd_goto(uint8_t pos)
  {
    lcd_command((1<<LCD_DDRAM)+pos);
 1ce:	80 58       	subi	r24, 0x80	; 128
 1d0:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <lcd_command>

000001d4 <lcd_gotoxy>:
{
#if LCD_DISPLAY_LINES==1
    lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
#endif
#if LCD_DISPLAY_LINES==2
    if ( y==0 )
 1d4:	61 11       	cpse	r22, r1
 1d6:	03 c0       	rjmp	.+6      	; 0x1de <lcd_gotoxy+0xa>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
 1d8:	80 58       	subi	r24, 0x80	; 128
    else
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
 1da:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <lcd_command>
 1de:	80 54       	subi	r24, 0x40	; 64
 1e0:	fc cf       	rjmp	.-8      	; 0x1da <lcd_gotoxy+0x6>

000001e2 <lcd_clrscr>:
Input:    none
Returns:  none
*************************************************************************/
void lcd_clrscr()
  {
    lcd_command(1<<LCD_CLR);
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <lcd_command>

000001e8 <lcd_home>:
Input:    none
Returns:  none
*************************************************************************/
void lcd_home()
  {
    lcd_command(1<<LCD_HOME);
 1e8:	82 e0       	ldi	r24, 0x02	; 2
 1ea:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <lcd_command>

000001ee <lcd_putc>:
Input:    character to be displayed
Returns:  none
*************************************************************************/
void lcd_putc(char c)
  {
    lcd_write(c,1);
 1ee:	61 e0       	ldi	r22, 0x01	; 1
 1f0:	0c 94 8c 00 	jmp	0x118	; 0x118 <lcd_write>

000001f4 <lcd_puts>:
Display string
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
  {
 1f4:	cf 93       	push	r28
 1f6:	df 93       	push	r29
 1f8:	ec 01       	movw	r28, r24
    register char c;

    while ((c=*s++))
 1fa:	89 91       	ld	r24, Y+
 1fc:	81 11       	cpse	r24, r1
 1fe:	03 c0       	rjmp	.+6      	; 0x206 <lcd_puts+0x12>
      lcd_putc(c);
  }
 200:	df 91       	pop	r29
 202:	cf 91       	pop	r28
 204:	08 95       	ret
      lcd_putc(c);
 206:	0e 94 f7 00 	call	0x1ee	; 0x1ee <lcd_putc>
 20a:	f7 cf       	rjmp	.-18     	; 0x1fa <lcd_puts+0x6>

0000020c <lcd_puts_p>:
Display string from flash
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts_p(const char *progmem_s)
  {
 20c:	cf 93       	push	r28
 20e:	df 93       	push	r29
 210:	ec 01       	movw	r28, r24
    register char c;

    while ((c=pgm_read_byte(progmem_s++)))
 212:	fe 01       	movw	r30, r28
 214:	84 91       	lpm	r24, Z
 216:	21 96       	adiw	r28, 0x01	; 1
 218:	81 11       	cpse	r24, r1
 21a:	03 c0       	rjmp	.+6      	; 0x222 <lcd_puts_p+0x16>
      lcd_putc(c);
  }
 21c:	df 91       	pop	r29
 21e:	cf 91       	pop	r28
 220:	08 95       	ret
      lcd_putc(c);
 222:	0e 94 f7 00 	call	0x1ee	; 0x1ee <lcd_putc>
 226:	f5 cf       	rjmp	.-22     	; 0x212 <lcd_puts_p+0x6>

00000228 <lcd_init>:
                DDR(LCD_E_PORT)|=_BV(LCD_E_PIN);
 228:	53 9a       	sbi	0x0a, 3	; 10
*************************************************************************/
void lcd_init()
  {
    //Set All Pins as Output
    lcd_e_ddr_high();
    lcd_rs_ddr_high();
 22a:	52 9a       	sbi	0x0a, 2	; 10
    #if RW_LINE_IMPLEMENTED==1
      lcd_rw_ddr_high();
    #endif
    lcd_db7_ddr_high();
 22c:	57 9a       	sbi	0x0a, 7	; 10
    lcd_db6_ddr_high();
 22e:	56 9a       	sbi	0x0a, 6	; 10
    lcd_db5_ddr_high();
 230:	55 9a       	sbi	0x0a, 5	; 10
    lcd_db4_ddr_high();
 232:	54 9a       	sbi	0x0a, 4	; 10
      lcd_db1_ddr_high();
      lcd_db0_ddr_high();
    #endif

    //Set All Control Lines Low
    lcd_e_port_low();
 234:	0e 94 88 00 	call	0x110	; 0x110 <lcd_e_port_low>
    lcd_rs_port_low();
 238:	5a 98       	cbi	0x0b, 2	; 11
    #if RW_LINE_IMPLEMENTED==1
      lcd_rw_port_low();
    #endif

    //Set All Data Lines High
    lcd_db7_port_high();
 23a:	5f 9a       	sbi	0x0b, 7	; 11
    lcd_db6_port_high();
 23c:	5e 9a       	sbi	0x0b, 6	; 11
    lcd_db5_port_high();
 23e:	5d 9a       	sbi	0x0b, 5	; 11
    lcd_db4_port_high();
 240:	5c 9a       	sbi	0x0b, 4	; 11
      lcd_db1_port_high();
      lcd_db0_port_high();
    #endif

    //Startup Delay
    Delay_ms(DELAY_RESET);
 242:	8f e5       	ldi	r24, 0x5F	; 95
 244:	9a ee       	ldi	r25, 0xEA	; 234
 246:	01 97       	sbiw	r24, 0x01	; 1
 248:	f1 f7       	brne	.-4      	; 0x246 <lcd_init+0x1e>
 24a:	00 c0       	rjmp	.+0      	; 0x24c <lcd_init+0x24>
 24c:	00 00       	nop

    //Initialize Display
    lcd_db7_port_low();
 24e:	5f 98       	cbi	0x0b, 7	; 11
    lcd_db6_port_low();
 250:	5e 98       	cbi	0x0b, 6	; 11
    Delay_ns(100);
 252:	00 c0       	rjmp	.+0      	; 0x254 <lcd_init+0x2c>
    lcd_e_port_high();
 254:	0e 94 8a 00 	call	0x114	; 0x114 <lcd_e_port_high>
    Delay_ns(500);
 258:	92 e0       	ldi	r25, 0x02	; 2
 25a:	9a 95       	dec	r25
 25c:	f1 f7       	brne	.-4      	; 0x25a <lcd_init+0x32>
 25e:	00 c0       	rjmp	.+0      	; 0x260 <lcd_init+0x38>
    lcd_e_port_low();
 260:	0e 94 88 00 	call	0x110	; 0x110 <lcd_e_port_low>

    Delay_us(4100);
 264:	8f e0       	ldi	r24, 0x0F	; 15
 266:	90 e4       	ldi	r25, 0x40	; 64
 268:	01 97       	sbiw	r24, 0x01	; 1
 26a:	f1 f7       	brne	.-4      	; 0x268 <lcd_init+0x40>
 26c:	00 c0       	rjmp	.+0      	; 0x26e <lcd_init+0x46>
 26e:	00 00       	nop

    lcd_e_port_high();
 270:	0e 94 8a 00 	call	0x114	; 0x114 <lcd_e_port_high>
    Delay_ns(500);
 274:	92 e0       	ldi	r25, 0x02	; 2
 276:	9a 95       	dec	r25
 278:	f1 f7       	brne	.-4      	; 0x276 <lcd_init+0x4e>
 27a:	00 c0       	rjmp	.+0      	; 0x27c <lcd_init+0x54>
    lcd_e_port_low();
 27c:	0e 94 88 00 	call	0x110	; 0x110 <lcd_e_port_low>

    Delay_us(100);
 280:	8f e8       	ldi	r24, 0x8F	; 143
 282:	91 e0       	ldi	r25, 0x01	; 1
 284:	01 97       	sbiw	r24, 0x01	; 1
 286:	f1 f7       	brne	.-4      	; 0x284 <lcd_init+0x5c>
 288:	00 c0       	rjmp	.+0      	; 0x28a <lcd_init+0x62>
 28a:	00 00       	nop

    lcd_e_port_high();
 28c:	0e 94 8a 00 	call	0x114	; 0x114 <lcd_e_port_high>
    Delay_ns(500);
 290:	92 e0       	ldi	r25, 0x02	; 2
 292:	9a 95       	dec	r25
 294:	f1 f7       	brne	.-4      	; 0x292 <lcd_init+0x6a>
 296:	00 c0       	rjmp	.+0      	; 0x298 <lcd_init+0x70>
    lcd_e_port_low();
 298:	0e 94 88 00 	call	0x110	; 0x110 <lcd_e_port_low>

    Delay_us(40);
 29c:	85 ed       	ldi	r24, 0xD5	; 213
 29e:	8a 95       	dec	r24
 2a0:	f1 f7       	brne	.-4      	; 0x29e <lcd_init+0x76>
 2a2:	00 00       	nop

    //Init differs between 4-bit and 8-bit from here
    #if (LCD_BITS==4)
      lcd_db4_port_low();
 2a4:	5c 98       	cbi	0x0b, 4	; 11
      Delay_ns(100);
 2a6:	00 c0       	rjmp	.+0      	; 0x2a8 <lcd_init+0x80>
      lcd_e_port_high();
 2a8:	0e 94 8a 00 	call	0x114	; 0x114 <lcd_e_port_high>
      Delay_ns(500);
 2ac:	92 e0       	ldi	r25, 0x02	; 2
 2ae:	9a 95       	dec	r25
 2b0:	f1 f7       	brne	.-4      	; 0x2ae <lcd_init+0x86>
 2b2:	00 c0       	rjmp	.+0      	; 0x2b4 <lcd_init+0x8c>
      lcd_e_port_low();
 2b4:	0e 94 88 00 	call	0x110	; 0x110 <lcd_e_port_low>
      Delay_us(40);
 2b8:	85 ed       	ldi	r24, 0xD5	; 213
 2ba:	8a 95       	dec	r24
 2bc:	f1 f7       	brne	.-4      	; 0x2ba <lcd_init+0x92>
 2be:	00 00       	nop

      lcd_db4_port_low();
 2c0:	5c 98       	cbi	0x0b, 4	; 11
      Delay_ns(100);
 2c2:	00 c0       	rjmp	.+0      	; 0x2c4 <lcd_init+0x9c>
      lcd_e_port_high();
 2c4:	0e 94 8a 00 	call	0x114	; 0x114 <lcd_e_port_high>
      Delay_ns(500);
 2c8:	92 e0       	ldi	r25, 0x02	; 2
 2ca:	9a 95       	dec	r25
 2cc:	f1 f7       	brne	.-4      	; 0x2ca <lcd_init+0xa2>
 2ce:	00 c0       	rjmp	.+0      	; 0x2d0 <lcd_init+0xa8>
      lcd_e_port_low();
 2d0:	0e 94 88 00 	call	0x110	; 0x110 <lcd_e_port_low>
      Delay_ns(500);
 2d4:	82 e0       	ldi	r24, 0x02	; 2
 2d6:	8a 95       	dec	r24
 2d8:	f1 f7       	brne	.-4      	; 0x2d6 <lcd_init+0xae>
 2da:	00 c0       	rjmp	.+0      	; 0x2dc <lcd_init+0xb4>

      #if (LCD_DISPLAYS==1)
        if (LCD_DISPLAY_LINES>1)
          lcd_db7_port_high();
 2dc:	5f 9a       	sbi	0x0b, 7	; 11
          }
        if (c>1)
          lcd_db7_port_high();
      #endif

      Delay_ns(100);
 2de:	00 c0       	rjmp	.+0      	; 0x2e0 <lcd_init+0xb8>
      lcd_e_port_high();
 2e0:	0e 94 8a 00 	call	0x114	; 0x114 <lcd_e_port_high>
      Delay_ns(500);
 2e4:	92 e0       	ldi	r25, 0x02	; 2
 2e6:	9a 95       	dec	r25
 2e8:	f1 f7       	brne	.-4      	; 0x2e6 <lcd_init+0xbe>
 2ea:	00 c0       	rjmp	.+0      	; 0x2ec <lcd_init+0xc4>
      lcd_e_port_low();
 2ec:	0e 94 88 00 	call	0x110	; 0x110 <lcd_e_port_low>
      Delay_us(40);
 2f0:	85 ed       	ldi	r24, 0xD5	; 213
 2f2:	8a 95       	dec	r24
 2f4:	f1 f7       	brne	.-4      	; 0x2f2 <lcd_init+0xca>
 2f6:	00 00       	nop
      lcd_e_port_low();
      Delay_us(40);
    #endif

    //Display Off
    lcd_command(_BV(LCD_DISPLAYMODE));
 2f8:	88 e0       	ldi	r24, 0x08	; 8
 2fa:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <lcd_command>

    //Display Clear
    lcd_clrscr();
 2fe:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <lcd_clrscr>

    //Entry Mode Set
    lcd_command(_BV(LCD_ENTRY_MODE) | _BV(LCD_ENTRY_INC));
 302:	86 e0       	ldi	r24, 0x06	; 6
 304:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <lcd_command>

    //Display On
    lcd_command(_BV(LCD_DISPLAYMODE) | _BV(LCD_DISPLAYMODE_ON));
 308:	8c e0       	ldi	r24, 0x0C	; 12
 30a:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <lcd_command>

0000030e <LC72131_init>:
 *  Set pin functions and initial states  *
 *                                        *
\******************************************/
void LC72131_init() {

    CE_DDR |=  (1<<CE);   // CE pin as Output.
 30e:	38 9a       	sbi	0x07, 0	; 7

    DI_DDR &=  ~(1<<DI);  // DI pin as Input.
 310:	39 98       	cbi	0x07, 1	; 7
    DI_PORT |= (1<<DI);   // DI pin pull-up resistor enabled.
 312:	41 9a       	sbi	0x08, 1	; 8

    CL_DDR |=  (1<<CL);   // CL pin as Output.
 314:	3a 9a       	sbi	0x07, 2	; 7

    DO_DDR |=  (1<<DO);   // DO pin as Output.
 316:	3b 9a       	sbi	0x07, 3	; 7

	DO_PORT &= ~(1<<DO);  // DO pin low.
 318:	43 98       	cbi	0x08, 3	; 8
	CL_PORT &= ~(1<<CL);  // Clock pin low.
 31a:	42 98       	cbi	0x08, 2	; 8

	// Toggling CE one to "flush" the bus.
	CE_PORT |= (1<<CE);
 31c:	40 9a       	sbi	0x08, 0	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 31e:	87 ec       	ldi	r24, 0xC7	; 199
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	01 97       	sbiw	r24, 0x01	; 1
 324:	f1 f7       	brne	.-4      	; 0x322 <LC72131_init+0x14>
 326:	00 c0       	rjmp	.+0      	; 0x328 <LC72131_init+0x1a>
 328:	00 00       	nop
	_delay_us(CCB_DELAY);
	CE_PORT &= ~(1<<CE);
 32a:	40 98       	cbi	0x08, 0	; 8
 32c:	87 ec       	ldi	r24, 0xC7	; 199
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	01 97       	sbiw	r24, 0x01	; 1
 332:	f1 f7       	brne	.-4      	; 0x330 <LC72131_init+0x22>
 334:	00 c0       	rjmp	.+0      	; 0x336 <LC72131_init+0x28>
 336:	00 00       	nop
	_delay_us(CCB_DELAY);
}
 338:	08 95       	ret

0000033a <writeByte>:
 *                                        *
 *              writeByte()               *
 *     Send a single byte via CCB bus     *
 *                                        *
\******************************************/
void writeByte(uint8_t data) {
 33a:	0f 93       	push	r16
 33c:	1f 93       	push	r17
 33e:	cf 93       	push	r28
 340:	df 93       	push	r29
 342:	d0 e0       	ldi	r29, 0x00	; 0
 344:	c0 e0       	ldi	r28, 0x00	; 0

	// Send one byte out bia CCB bus (LSB first)
	for(int8_t i = 0; i <= 7; i++) {
		digitalWrite(DO, &DO_PORT, bitRead(data, i));
 346:	08 2f       	mov	r16, r24
 348:	10 e0       	ldi	r17, 0x00	; 0
 34a:	a8 01       	movw	r20, r16
 34c:	0c 2e       	mov	r0, r28
 34e:	02 c0       	rjmp	.+4      	; 0x354 <writeByte+0x1a>
 350:	55 95       	asr	r21
 352:	47 95       	ror	r20
 354:	0a 94       	dec	r0
 356:	e2 f7       	brpl	.-8      	; 0x350 <writeByte+0x16>
 358:	41 70       	andi	r20, 0x01	; 1
 35a:	68 e2       	ldi	r22, 0x28	; 40
 35c:	70 e0       	ldi	r23, 0x00	; 0
 35e:	83 e0       	ldi	r24, 0x03	; 3
 360:	0e 94 6c 00 	call	0xd8	; 0xd8 <digitalWrite>
		digitalWrite(CL, &CL_PORT, 1); _delay_us(CCB_DELAY);
 364:	41 e0       	ldi	r20, 0x01	; 1
 366:	68 e2       	ldi	r22, 0x28	; 40
 368:	70 e0       	ldi	r23, 0x00	; 0
 36a:	82 e0       	ldi	r24, 0x02	; 2
 36c:	0e 94 6c 00 	call	0xd8	; 0xd8 <digitalWrite>
 370:	87 ec       	ldi	r24, 0xC7	; 199
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	01 97       	sbiw	r24, 0x01	; 1
 376:	f1 f7       	brne	.-4      	; 0x374 <writeByte+0x3a>
 378:	00 c0       	rjmp	.+0      	; 0x37a <writeByte+0x40>
 37a:	00 00       	nop
		digitalWrite(CL, &CL_PORT, 0); _delay_us(CCB_DELAY);
 37c:	40 e0       	ldi	r20, 0x00	; 0
 37e:	68 e2       	ldi	r22, 0x28	; 40
 380:	70 e0       	ldi	r23, 0x00	; 0
 382:	82 e0       	ldi	r24, 0x02	; 2
 384:	0e 94 6c 00 	call	0xd8	; 0xd8 <digitalWrite>
 388:	87 ec       	ldi	r24, 0xC7	; 199
 38a:	90 e0       	ldi	r25, 0x00	; 0
 38c:	01 97       	sbiw	r24, 0x01	; 1
 38e:	f1 f7       	brne	.-4      	; 0x38c <writeByte+0x52>
 390:	00 c0       	rjmp	.+0      	; 0x392 <writeByte+0x58>
 392:	00 00       	nop
 394:	21 96       	adiw	r28, 0x01	; 1
	for(int8_t i = 0; i <= 7; i++) {
 396:	c8 30       	cpi	r28, 0x08	; 8
 398:	d1 05       	cpc	r29, r1
 39a:	b9 f6       	brne	.-82     	; 0x34a <writeByte+0x10>
	};
}
 39c:	df 91       	pop	r29
 39e:	cf 91       	pop	r28
 3a0:	1f 91       	pop	r17
 3a2:	0f 91       	pop	r16
 3a4:	08 95       	ret

000003a6 <readByte>:
 *                                        *
 *               readByte()               *
 *    Receive a single byte via CCB bus   *
 *                                        *
\******************************************/
uint8_t readByte() {
 3a6:	cf 92       	push	r12
 3a8:	df 92       	push	r13
 3aa:	ef 92       	push	r14
 3ac:	ff 92       	push	r15
 3ae:	0f 93       	push	r16
 3b0:	1f 93       	push	r17
 3b2:	cf 93       	push	r28
 3b4:	07 e0       	ldi	r16, 0x07	; 7
 3b6:	10 e0       	ldi	r17, 0x00	; 0

	uint8_t data = 0;
 3b8:	c0 e0       	ldi	r28, 0x00	; 0
 3ba:	c1 2c       	mov	r12, r1
 3bc:	d1 2c       	mov	r13, r1
 3be:	76 01       	movw	r14, r12
 3c0:	c3 94       	inc	r12
	// Receive one byte from the CCB bus (MSB first)
	for(int8_t i = 7; i >= 0; i--) {
		digitalWrite(CL, &CL_PORT, 1); _delay_us(CCB_DELAY);
 3c2:	41 e0       	ldi	r20, 0x01	; 1
 3c4:	68 e2       	ldi	r22, 0x28	; 40
 3c6:	70 e0       	ldi	r23, 0x00	; 0
 3c8:	82 e0       	ldi	r24, 0x02	; 2
 3ca:	0e 94 6c 00 	call	0xd8	; 0xd8 <digitalWrite>
 3ce:	87 ec       	ldi	r24, 0xC7	; 199
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	01 97       	sbiw	r24, 0x01	; 1
 3d4:	f1 f7       	brne	.-4      	; 0x3d2 <readByte+0x2c>
 3d6:	00 c0       	rjmp	.+0      	; 0x3d8 <readByte+0x32>
 3d8:	00 00       	nop
		bitWrite(data, i, digitalRead(DI, DI_PIN));
 3da:	66 b1       	in	r22, 0x06	; 6
 3dc:	81 e0       	ldi	r24, 0x01	; 1
 3de:	0e 94 7f 00 	call	0xfe	; 0xfe <digitalRead>
 3e2:	b7 01       	movw	r22, r14
 3e4:	a6 01       	movw	r20, r12
 3e6:	00 2e       	mov	r0, r16
 3e8:	04 c0       	rjmp	.+8      	; 0x3f2 <readByte+0x4c>
 3ea:	44 0f       	add	r20, r20
 3ec:	55 1f       	adc	r21, r21
 3ee:	66 1f       	adc	r22, r22
 3f0:	77 1f       	adc	r23, r23
 3f2:	0a 94       	dec	r0
 3f4:	d2 f7       	brpl	.-12     	; 0x3ea <readByte+0x44>
 3f6:	88 23       	and	r24, r24
 3f8:	c9 f0       	breq	.+50     	; 0x42c <__FUSE_REGION_LENGTH__+0x2c>
 3fa:	c4 2b       	or	r28, r20
		digitalWrite(CL, &CL_PORT, 0); _delay_us(CCB_DELAY);
 3fc:	40 e0       	ldi	r20, 0x00	; 0
 3fe:	68 e2       	ldi	r22, 0x28	; 40
 400:	70 e0       	ldi	r23, 0x00	; 0
 402:	82 e0       	ldi	r24, 0x02	; 2
 404:	0e 94 6c 00 	call	0xd8	; 0xd8 <digitalWrite>
 408:	87 ec       	ldi	r24, 0xC7	; 199
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	01 97       	sbiw	r24, 0x01	; 1
 40e:	f1 f7       	brne	.-4      	; 0x40c <__FUSE_REGION_LENGTH__+0xc>
 410:	00 c0       	rjmp	.+0      	; 0x412 <__FUSE_REGION_LENGTH__+0x12>
 412:	00 00       	nop
 414:	01 50       	subi	r16, 0x01	; 1
 416:	11 09       	sbc	r17, r1
 418:	a0 f6       	brcc	.-88     	; 0x3c2 <readByte+0x1c>
	};

	return data;
}
 41a:	8c 2f       	mov	r24, r28
 41c:	cf 91       	pop	r28
 41e:	1f 91       	pop	r17
 420:	0f 91       	pop	r16
 422:	ff 90       	pop	r15
 424:	ef 90       	pop	r14
 426:	df 90       	pop	r13
 428:	cf 90       	pop	r12
 42a:	08 95       	ret
		bitWrite(data, i, digitalRead(DI, DI_PIN));
 42c:	40 95       	com	r20
 42e:	c4 23       	and	r28, r20
 430:	e5 cf       	rjmp	.-54     	; 0x3fc <readByte+0x56>

00000432 <ccb>:
 *                                        *
 *                 ccb()                  *
 *  The universal send/receive function   *
 *                                        *
\******************************************/
void ccb(uint8_t address, uint8_t *data, int8_t dataLength, uint8_t mode) {
 432:	ef 92       	push	r14
 434:	ff 92       	push	r15
 436:	0f 93       	push	r16
 438:	1f 93       	push	r17
 43a:	cf 93       	push	r28
 43c:	df 93       	push	r29
 43e:	7b 01       	movw	r14, r22
 440:	c4 2f       	mov	r28, r20
 442:	d2 2f       	mov	r29, r18

    int8_t i; // i may reach negative values in the counters
	          // dataLength is typed "int8_t" for compatibility with this counter

	// Send the address, with the nibbles swapped (required by the CCB protocol to support 4-bit addresses)
	writeByte((address >> 4) | (address << 4));
 444:	82 95       	swap	r24
 446:	0e 94 9d 01 	call	0x33a	; 0x33a <writeByte>

	// Enter the data transfer mode
	digitalWrite(CL, &CL_PORT, 0);
 44a:	40 e0       	ldi	r20, 0x00	; 0
 44c:	68 e2       	ldi	r22, 0x28	; 40
 44e:	70 e0       	ldi	r23, 0x00	; 0
 450:	82 e0       	ldi	r24, 0x02	; 2
 452:	0e 94 6c 00 	call	0xd8	; 0xd8 <digitalWrite>
	digitalWrite(CE, &CL_PORT, 1);
 456:	41 e0       	ldi	r20, 0x01	; 1
 458:	68 e2       	ldi	r22, 0x28	; 40
 45a:	70 e0       	ldi	r23, 0x00	; 0
 45c:	80 e0       	ldi	r24, 0x00	; 0
 45e:	0e 94 6c 00 	call	0xd8	; 0xd8 <digitalWrite>
 462:	87 ec       	ldi	r24, 0xC7	; 199
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	01 97       	sbiw	r24, 0x01	; 1
 468:	f1 f7       	brne	.-4      	; 0x466 <ccb+0x34>
 46a:	00 c0       	rjmp	.+0      	; 0x46c <ccb+0x3a>
 46c:	00 00       	nop
	_delay_us(CCB_DELAY);

	switch(mode) {
 46e:	dd 23       	and	r29, r29
 470:	71 f0       	breq	.+28     	; 0x48e <ccb+0x5c>
 472:	d1 30       	cpi	r29, 0x01	; 1
 474:	c1 f4       	brne	.+48     	; 0x4a6 <ccb+0x74>
 476:	de 2d       	mov	r29, r14
 478:	87 01       	movw	r16, r14
		digitalWrite(DO, &DO_PORT, 0);
		break;

	case _CCB_RECEIVE:
		// Receive data
		for(i = 0; i < dataLength; i++)
 47a:	80 2f       	mov	r24, r16
 47c:	8d 1b       	sub	r24, r29
 47e:	8c 17       	cp	r24, r28
 480:	94 f4       	brge	.+36     	; 0x4a6 <ccb+0x74>
			data[i] = readByte();
 482:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <readByte>
 486:	f8 01       	movw	r30, r16
 488:	81 93       	st	Z+, r24
 48a:	8f 01       	movw	r16, r30
 48c:	f6 cf       	rjmp	.-20     	; 0x47a <ccb+0x48>
		for(i = dataLength - 1; i >= 0; i--)
 48e:	c1 50       	subi	r28, 0x01	; 1
 490:	0c 2e       	mov	r0, r28
 492:	00 0c       	add	r0, r0
 494:	dd 0b       	sbc	r29, r29
 496:	c7 ff       	sbrs	r28, 7
 498:	19 c0       	rjmp	.+50     	; 0x4cc <ccb+0x9a>
		digitalWrite(DO, &DO_PORT, 0);
 49a:	40 e0       	ldi	r20, 0x00	; 0
 49c:	68 e2       	ldi	r22, 0x28	; 40
 49e:	70 e0       	ldi	r23, 0x00	; 0
 4a0:	83 e0       	ldi	r24, 0x03	; 3
 4a2:	0e 94 6c 00 	call	0xd8	; 0xd8 <digitalWrite>
		break;
	};

	digitalWrite(CE, &CE_PORT, 0);
 4a6:	40 e0       	ldi	r20, 0x00	; 0
 4a8:	68 e2       	ldi	r22, 0x28	; 40
 4aa:	70 e0       	ldi	r23, 0x00	; 0
 4ac:	80 e0       	ldi	r24, 0x00	; 0
 4ae:	0e 94 6c 00 	call	0xd8	; 0xd8 <digitalWrite>
 4b2:	87 ec       	ldi	r24, 0xC7	; 199
 4b4:	90 e0       	ldi	r25, 0x00	; 0
 4b6:	01 97       	sbiw	r24, 0x01	; 1
 4b8:	f1 f7       	brne	.-4      	; 0x4b6 <ccb+0x84>
 4ba:	00 c0       	rjmp	.+0      	; 0x4bc <ccb+0x8a>
 4bc:	00 00       	nop
	_delay_us(CCB_DELAY);
}
 4be:	df 91       	pop	r29
 4c0:	cf 91       	pop	r28
 4c2:	1f 91       	pop	r17
 4c4:	0f 91       	pop	r16
 4c6:	ff 90       	pop	r15
 4c8:	ef 90       	pop	r14
 4ca:	08 95       	ret
				writeByte(data[i]);
 4cc:	f7 01       	movw	r30, r14
 4ce:	ec 0f       	add	r30, r28
 4d0:	fd 1f       	adc	r31, r29
 4d2:	80 81       	ld	r24, Z
 4d4:	0e 94 9d 01 	call	0x33a	; 0x33a <writeByte>
 4d8:	21 97       	sbiw	r28, 0x01	; 1
 4da:	dd cf       	rjmp	.-70     	; 0x496 <ccb+0x64>

000004dc <diPinState>:
 * Some CCB devices uses the DO pin for other functions  *
 * when the data bus is idle.  This method makes reading *
 * it easier                                             *
\*********************************************************/
uint8_t diPinState() {
	return digitalRead(DI, DI_PIN);
 4dc:	66 b1       	in	r22, 0x06	; 6
 4de:	81 e0       	ldi	r24, 0x01	; 1
 4e0:	0c 94 7f 00 	jmp	0xfe	; 0xfe <digitalRead>

000004e4 <LC72131_write>:
 * so the order of the data bytes must be the opposite  *
 * as the one shown on the device's datasheets          *
\********************************************************/
void LC72131_write(uint8_t address, uint8_t *data, int8_t dataLength) {

	ccb(address, data, dataLength, _CCB_SEND);
 4e4:	20 e0       	ldi	r18, 0x00	; 0
 4e6:	0c 94 19 02 	jmp	0x432	; 0x432 <ccb>

000004ea <LC72131_read>:
 *                      read()                        *
 *  receive dataLength (up to 127) bytes via CCB bus  *
\******************************************************/
void LC72131_read(uint8_t address, uint8_t *data, int8_t dataLength) {

	ccb(address, data, dataLength, _CCB_RECEIVE);
 4ea:	21 e0       	ldi	r18, 0x01	; 1
 4ec:	0c 94 19 02 	jmp	0x432	; 0x432 <ccb>

000004f0 <PLL_Init>:
 *                PLL_Init()                    *
 *        Initialize the PLL settings.          *
\************************************************/
void PLL_Init() {

    pll_in1[0]=0;   // Zeroing byte 0 of pll_in1.
 4f0:	e2 e1       	ldi	r30, 0x12	; 18
 4f2:	f1 e0       	ldi	r31, 0x01	; 1
 4f4:	10 82       	st	Z, r1
    pll_in1[1]=0;   // Zeroing byte 1 of pll_in1.
 4f6:	11 82       	std	Z+1, r1	; 0x01
    pll_in1[2]=0;   // Zeroing byte 2 of pll_in1.
 4f8:	12 82       	std	Z+2, r1	; 0x02

    pll_in2[0]=0;   // Zeroing byte 0 of pll_in2.
    pll_in2[1]=0;   // Zeroing byte 1 of pll_in2.
    pll_in2[2]=0;   // Zeroing byte 2 of pll_in2.

    bitSet(pll_in2[0], IN2_IFS);   // IF counter in normal mode. Page 12 and 15 of the Datasheet.
 4fa:	ef e0       	ldi	r30, 0x0F	; 15
 4fc:	f1 e0       	ldi	r31, 0x01	; 1
 4fe:	80 e1       	ldi	r24, 0x10	; 16
 500:	80 83       	st	Z, r24
    bitSet(pll_in2[1], IN2_UL0);   // Phase error detection width = 0us. UL1=0, UL0=1. Page 11 of the Datasheet.
 502:	81 83       	std	Z+1, r24	; 0x01
    bitSet(pll_in2[2], IN2_BO1);   // Mute off / normal tuner mode
 504:	82 83       	std	Z+2, r24	; 0x02
}
 506:	08 95       	ret

00000508 <PLL_SetMode>:

void PLL_SetMode(uint8_t mode) {

    switch(mode) {
 508:	83 30       	cpi	r24, 0x03	; 3
 50a:	b9 f1       	breq	.+110    	; 0x57a <PLL_SetMode+0x72>
 50c:	80 f4       	brcc	.+32     	; 0x52e <PLL_SetMode+0x26>
 50e:	81 30       	cpi	r24, 0x01	; 1
 510:	81 f1       	breq	.+96     	; 0x572 <PLL_SetMode+0x6a>
 512:	82 30       	cpi	r24, 0x02	; 2
 514:	41 f1       	breq	.+80     	; 0x566 <PLL_SetMode+0x5e>
            bitWrite(pll_in2[2], IN2_BO2, 0); // AM mode
            break;
*/
        }

    LC72131_write(LC72131_ADDR_IN1, pll_in1, 3);
 516:	43 e0       	ldi	r20, 0x03	; 3
 518:	62 e1       	ldi	r22, 0x12	; 18
 51a:	71 e0       	ldi	r23, 0x01	; 1
 51c:	82 e8       	ldi	r24, 0x82	; 130
 51e:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LC72131_write>
    LC72131_write(LC72131_ADDR_IN2, pll_in2, 3);
 522:	43 e0       	ldi	r20, 0x03	; 3
 524:	6f e0       	ldi	r22, 0x0F	; 15
 526:	71 e0       	ldi	r23, 0x01	; 1
 528:	82 e9       	ldi	r24, 0x92	; 146
 52a:	0c 94 72 02 	jmp	0x4e4	; 0x4e4 <LC72131_write>
    switch(mode) {
 52e:	84 30       	cpi	r24, 0x04	; 4
 530:	41 f1       	breq	.+80     	; 0x582 <PLL_SetMode+0x7a>
 532:	85 30       	cpi	r24, 0x05	; 5
 534:	81 f7       	brne	.-32     	; 0x516 <PLL_SetMode+0xe>
            band = PLL_BAND_FM;
 536:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <band>
            bitWrite(pll_in1[0], IN1_DVS, 1); // Programmable Divider divisor = 2
 53a:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <pll_in1>
 53e:	8f 71       	andi	r24, 0x1F	; 31
 540:	8a 61       	ori	r24, 0x1A	; 26
 542:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <pll_in1>
            bitWrite(pll_in2[0], IN2_GT0, 0); // IF counter measurement period = 32ms
 546:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <pll_in2>
 54a:	8e 7f       	andi	r24, 0xFE	; 254
            bitWrite(pll_in2[0], IN2_GT1, 1); //
 54c:	82 60       	ori	r24, 0x02	; 2
 54e:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <pll_in2>
            bitWrite(pll_in2[1], IN2_DZ1, 0); //
 552:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <pll_in2+0x1>
 556:	8f 77       	andi	r24, 0x7F	; 127
 558:	80 64       	ori	r24, 0x40	; 64
 55a:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <pll_in2+0x1>
            bitWrite(pll_in2[2], IN2_BO2, 1); // FM mode
 55e:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <pll_in2+0x2>
 562:	80 62       	ori	r24, 0x20	; 32
 564:	03 c0       	rjmp	.+6      	; 0x56c <PLL_SetMode+0x64>
            bitClear(pll_in2[2], IN2_BO4);
 566:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <pll_in2+0x2>
 56a:	8f 77       	andi	r24, 0x7F	; 127
            bitWrite(pll_in2[2], IN2_BO2, 1); // FM mode
 56c:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <pll_in2+0x2>
            break;
 570:	d2 cf       	rjmp	.-92     	; 0x516 <PLL_SetMode+0xe>
            bitSet(pll_in2[2], IN2_BO4);
 572:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <pll_in2+0x2>
 576:	80 68       	ori	r24, 0x80	; 128
 578:	f9 cf       	rjmp	.-14     	; 0x56c <PLL_SetMode+0x64>
            bitClear(pll_in2[2], IN2_BO1);
 57a:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <pll_in2+0x2>
 57e:	8f 7e       	andi	r24, 0xEF	; 239
 580:	f5 cf       	rjmp	.-22     	; 0x56c <PLL_SetMode+0x64>
            bitSet(pll_in2[2], IN2_BO1);
 582:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <pll_in2+0x2>
 586:	80 61       	ori	r24, 0x10	; 16
 588:	f1 cf       	rjmp	.-30     	; 0x56c <PLL_SetMode+0x64>

0000058a <PLL_Tune>:

    uint16_t fpd = 0;      // Frequency Programmable Divider (FPD).

    uint8_t tuned=0;

    switch(band) {
 58a:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <band>
 58e:	25 30       	cpi	r18, 0x05	; 5
 590:	f1 f4       	brne	.+60     	; 0x5ce <PLL_Tune+0x44>
        case PLL_BAND_FM:
        fpd = (frequency + 107);
 592:	85 59       	subi	r24, 0x95	; 149
 594:	9f 4f       	sbci	r25, 0xFF	; 255
        break;
*/
        default: return 1;
    }

    pll_in1[1] = (uint8_t) (fpd >> 8);          // Loading the HIGH byte to the Programmable Divider.
 596:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <pll_in1+0x1>
    pll_in1[2] =  (uint8_t) (fpd & 0x00ff);     // Loading the LOW byte to the Programmable Divider.
 59a:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <pll_in1+0x2>

    LC72131_write(LC72131_ADDR_IN1, pll_in1, 3);
 59e:	43 e0       	ldi	r20, 0x03	; 3
 5a0:	62 e1       	ldi	r22, 0x12	; 18
 5a2:	71 e0       	ldi	r23, 0x01	; 1
 5a4:	82 e8       	ldi	r24, 0x82	; 130
 5a6:	0e 94 72 02 	call	0x4e4	; 0x4e4 <LC72131_write>
	__builtin_avr_delay_cycles(__ticks_dc);
 5aa:	2f ef       	ldi	r18, 0xFF	; 255
 5ac:	89 ef       	ldi	r24, 0xF9	; 249
 5ae:	90 e0       	ldi	r25, 0x00	; 0
 5b0:	21 50       	subi	r18, 0x01	; 1
 5b2:	80 40       	sbci	r24, 0x00	; 0
 5b4:	90 40       	sbci	r25, 0x00	; 0
 5b6:	e1 f7       	brne	.-8      	; 0x5b0 <PLL_Tune+0x26>
 5b8:	00 c0       	rjmp	.+0      	; 0x5ba <PLL_Tune+0x30>
 5ba:	00 00       	nop

    _delay_ms(20); //Some delay to give time to the PLL tune output to set.

    if (digitalRead(TUNED,TUNED_PIN)==0){
 5bc:	66 b1       	in	r22, 0x06	; 6
 5be:	84 e0       	ldi	r24, 0x04	; 4
 5c0:	0e 94 7f 00 	call	0xfe	; 0xfe <digitalRead>
 5c4:	91 e0       	ldi	r25, 0x01	; 1
 5c6:	81 11       	cpse	r24, r1
 5c8:	90 e0       	ldi	r25, 0x00	; 0
        tuned=1;
    };

    return tuned;
}
 5ca:	89 2f       	mov	r24, r25
 5cc:	08 95       	ret
        default: return 1;
 5ce:	91 e0       	ldi	r25, 0x01	; 1
 5d0:	fc cf       	rjmp	.-8      	; 0x5ca <PLL_Tune+0x40>

000005d2 <millis_init>:

void millis_init(void){

    TIMSK0 |= (1 << TOIE0);           // Enable overflow Interrupt υπερχείλισης for Timer/Counter0.
 5d2:	ee e6       	ldi	r30, 0x6E	; 110
 5d4:	f0 e0       	ldi	r31, 0x00	; 0
 5d6:	80 81       	ld	r24, Z
 5d8:	81 60       	ori	r24, 0x01	; 1
 5da:	80 83       	st	Z, r24
    TCNT0 = 6;                        // Preload Timer with the calculated value for 1 msec.
 5dc:	86 e0       	ldi	r24, 0x06	; 6
 5de:	86 bd       	out	0x26, r24	; 38
    TCCR0B |= (1<<CS01) | (1<<CS00);  // Start Timer/Counter0 with Prescaler 64.
 5e0:	85 b5       	in	r24, 0x25	; 37
 5e2:	83 60       	ori	r24, 0x03	; 3
 5e4:	85 bd       	out	0x25, r24	; 37
}
 5e6:	08 95       	ret

000005e8 <__vector_16>:

// Interrupt every 1 msec. More than enough to read the encoders.
ISR(TIMER0_OVF_vect){
 5e8:	1f 92       	push	r1
 5ea:	0f 92       	push	r0
 5ec:	0f b6       	in	r0, 0x3f	; 63
 5ee:	0f 92       	push	r0
 5f0:	11 24       	eor	r1, r1
 5f2:	8f 93       	push	r24
 5f4:	9f 93       	push	r25
    tick++;
 5f6:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <tick>
 5fa:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <tick+0x1>
 5fe:	01 96       	adiw	r24, 0x01	; 1
 600:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <tick+0x1>
 604:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <tick>
    TCNT0 += 6;  // Preload Timer with the calculated value for 1 msec.
 608:	86 b5       	in	r24, 0x26	; 38
 60a:	8a 5f       	subi	r24, 0xFA	; 250
 60c:	86 bd       	out	0x26, r24	; 38
}
 60e:	9f 91       	pop	r25
 610:	8f 91       	pop	r24
 612:	0f 90       	pop	r0
 614:	0f be       	out	0x3f, r0	; 63
 616:	0f 90       	pop	r0
 618:	1f 90       	pop	r1
 61a:	18 95       	reti

0000061c <utofix>:

void utofix(uint16_t x, char *s){
 61c:	ef 92       	push	r14
 61e:	ff 92       	push	r15
 620:	0f 93       	push	r16
 622:	1f 93       	push	r17
 624:	cf 93       	push	r28
 626:	df 93       	push	r29
 628:	cd b7       	in	r28, 0x3d	; 61
 62a:	de b7       	in	r29, 0x3e	; 62
 62c:	2a 97       	sbiw	r28, 0x0a	; 10
 62e:	0f b6       	in	r0, 0x3f	; 63
 630:	f8 94       	cli
 632:	de bf       	out	0x3e, r29	; 62
 634:	0f be       	out	0x3f, r0	; 63
 636:	cd bf       	out	0x3d, r28	; 61
 638:	8b 01       	movw	r16, r22

    uint16_t temp;
    char str[10];

    temp = x/10;
 63a:	6a e0       	ldi	r22, 0x0A	; 10
 63c:	70 e0       	ldi	r23, 0x00	; 0
 63e:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <__udivmodhi4>
 642:	7c 01       	movw	r14, r24
    ultoa(temp,str,10);
 644:	90 e0       	ldi	r25, 0x00	; 0
 646:	80 e0       	ldi	r24, 0x00	; 0
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__ultoa_ncheck (unsigned long, char *, unsigned char);
	return __ultoa_ncheck (__val, __s, __radix);
 648:	2a e0       	ldi	r18, 0x0A	; 10
 64a:	ae 01       	movw	r20, r28
 64c:	4f 5f       	subi	r20, 0xFF	; 255
 64e:	5f 4f       	sbci	r21, 0xFF	; 255
 650:	0e 94 0f 05 	call	0xa1e	; 0xa1e <__ultoa_ncheck>
    strcpy(s,str);
 654:	be 01       	movw	r22, r28
 656:	6f 5f       	subi	r22, 0xFF	; 255
 658:	7f 4f       	sbci	r23, 0xFF	; 255
 65a:	c8 01       	movw	r24, r16
 65c:	0e 94 08 05 	call	0xa10	; 0xa10 <strcpy>
    strcat(s,".");
 660:	63 e0       	ldi	r22, 0x03	; 3
 662:	71 e0       	ldi	r23, 0x01	; 1
 664:	c8 01       	movw	r24, r16
 666:	0e 94 fd 04 	call	0x9fa	; 0x9fa <strcat>
    temp = (x%10);
    ultoa(temp,str,10);
 66a:	b7 01       	movw	r22, r14
 66c:	90 e0       	ldi	r25, 0x00	; 0
 66e:	80 e0       	ldi	r24, 0x00	; 0
 670:	2a e0       	ldi	r18, 0x0A	; 10
 672:	ae 01       	movw	r20, r28
 674:	4f 5f       	subi	r20, 0xFF	; 255
 676:	5f 4f       	sbci	r21, 0xFF	; 255
 678:	0e 94 0f 05 	call	0xa1e	; 0xa1e <__ultoa_ncheck>
    strcat(s,str);
 67c:	be 01       	movw	r22, r28
 67e:	6f 5f       	subi	r22, 0xFF	; 255
 680:	7f 4f       	sbci	r23, 0xFF	; 255
 682:	c8 01       	movw	r24, r16
 684:	0e 94 fd 04 	call	0x9fa	; 0x9fa <strcat>

}
 688:	2a 96       	adiw	r28, 0x0a	; 10
 68a:	0f b6       	in	r0, 0x3f	; 63
 68c:	f8 94       	cli
 68e:	de bf       	out	0x3e, r29	; 62
 690:	0f be       	out	0x3f, r0	; 63
 692:	cd bf       	out	0x3d, r28	; 61
 694:	df 91       	pop	r29
 696:	cf 91       	pop	r28
 698:	1f 91       	pop	r17
 69a:	0f 91       	pop	r16
 69c:	ff 90       	pop	r15
 69e:	ef 90       	pop	r14
 6a0:	08 95       	ret

000006a2 <lcdupdate>:
void lcdupdate() {
 6a2:	cf 93       	push	r28
 6a4:	df 93       	push	r29
 6a6:	cd b7       	in	r28, 0x3d	; 61
 6a8:	de b7       	in	r29, 0x3e	; 62
 6aa:	2a 97       	sbiw	r28, 0x0a	; 10
 6ac:	0f b6       	in	r0, 0x3f	; 63
 6ae:	f8 94       	cli
 6b0:	de bf       	out	0x3e, r29	; 62
 6b2:	0f be       	out	0x3f, r0	; 63
 6b4:	cd bf       	out	0x3d, r28	; 61
    lcd_home();
 6b6:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <lcd_home>
        utofix(FMFrequency,s);
 6ba:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <FMFrequency>
 6be:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <FMFrequency+0x1>
 6c2:	be 01       	movw	r22, r28
 6c4:	6f 5f       	subi	r22, 0xFF	; 255
 6c6:	7f 4f       	sbci	r23, 0xFF	; 255
 6c8:	0e 94 0e 03 	call	0x61c	; 0x61c <utofix>
        lcd_puts_P("FM ");
 6cc:	8e e6       	ldi	r24, 0x6E	; 110
 6ce:	90 e0       	ldi	r25, 0x00	; 0
 6d0:	0e 94 06 01 	call	0x20c	; 0x20c <lcd_puts_p>
        lcd_puts(s);
 6d4:	ce 01       	movw	r24, r28
 6d6:	01 96       	adiw	r24, 0x01	; 1
 6d8:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_puts>
        lcd_puts_P(" MHz ");
 6dc:	88 e6       	ldi	r24, 0x68	; 104
 6de:	90 e0       	ldi	r25, 0x00	; 0
 6e0:	0e 94 06 01 	call	0x20c	; 0x20c <lcd_puts_p>
    if (digitalRead(STEREO,STEREO_PIN)==0){
 6e4:	66 b1       	in	r22, 0x06	; 6
 6e6:	85 e0       	ldi	r24, 0x05	; 5
 6e8:	0e 94 7f 00 	call	0xfe	; 0xfe <digitalRead>
        lcd_gotoxy(13,0);
 6ec:	60 e0       	ldi	r22, 0x00	; 0
    if (digitalRead(STEREO,STEREO_PIN)==0){
 6ee:	81 11       	cpse	r24, r1
 6f0:	26 c0       	rjmp	.+76     	; 0x73e <lcdupdate+0x9c>
        lcd_gotoxy(13,0);
 6f2:	8d e0       	ldi	r24, 0x0D	; 13
 6f4:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <lcd_gotoxy>
        lcd_putc('[');
 6f8:	8b e5       	ldi	r24, 0x5B	; 91
 6fa:	0e 94 f7 00 	call	0x1ee	; 0x1ee <lcd_putc>
        lcd_putc(STSYMBOL);
 6fe:	80 e0       	ldi	r24, 0x00	; 0
 700:	0e 94 f7 00 	call	0x1ee	; 0x1ee <lcd_putc>
        lcd_putc(']');
 704:	8d e5       	ldi	r24, 0x5D	; 93
 706:	0e 94 f7 00 	call	0x1ee	; 0x1ee <lcd_putc>
    if (tuned==1){
 70a:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <tuned>
        lcd_gotoxy(13,1);
 70e:	61 e0       	ldi	r22, 0x01	; 1
    if (tuned==1){
 710:	81 30       	cpi	r24, 0x01	; 1
 712:	e9 f4       	brne	.+58     	; 0x74e <lcdupdate+0xac>
        lcd_gotoxy(13,1);
 714:	8d e0       	ldi	r24, 0x0D	; 13
 716:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <lcd_gotoxy>
        lcd_putc('[');
 71a:	8b e5       	ldi	r24, 0x5B	; 91
 71c:	0e 94 f7 00 	call	0x1ee	; 0x1ee <lcd_putc>
        lcd_putc(TNSYMBOL);
 720:	81 e0       	ldi	r24, 0x01	; 1
 722:	0e 94 f7 00 	call	0x1ee	; 0x1ee <lcd_putc>
        lcd_putc(']');
 726:	8d e5       	ldi	r24, 0x5D	; 93
 728:	0e 94 f7 00 	call	0x1ee	; 0x1ee <lcd_putc>
}
 72c:	2a 96       	adiw	r28, 0x0a	; 10
 72e:	0f b6       	in	r0, 0x3f	; 63
 730:	f8 94       	cli
 732:	de bf       	out	0x3e, r29	; 62
 734:	0f be       	out	0x3f, r0	; 63
 736:	cd bf       	out	0x3d, r28	; 61
 738:	df 91       	pop	r29
 73a:	cf 91       	pop	r28
 73c:	08 95       	ret
        lcd_gotoxy(13,0);
 73e:	8d e0       	ldi	r24, 0x0D	; 13
 740:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <lcd_gotoxy>
        lcd_puts("[ ]");
 744:	85 e0       	ldi	r24, 0x05	; 5
 746:	91 e0       	ldi	r25, 0x01	; 1
 748:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_puts>
 74c:	de cf       	rjmp	.-68     	; 0x70a <lcdupdate+0x68>
        lcd_gotoxy(13,1);
 74e:	8d e0       	ldi	r24, 0x0D	; 13
 750:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <lcd_gotoxy>
        lcd_puts("[ ]");
 754:	85 e0       	ldi	r24, 0x05	; 5
 756:	91 e0       	ldi	r25, 0x01	; 1
 758:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <lcd_puts>
}
 75c:	e7 cf       	rjmp	.-50     	; 0x72c <lcdupdate+0x8a>

0000075e <customchar>:

void customchar(){

    lcd_command(_BV(LCD_CGRAM)+STSYMBOL*8);     // ______
 75e:	80 e4       	ldi	r24, 0x40	; 64
 760:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <lcd_command>
    lcd_putc(0b01110);                          //| ### |
 764:	8e e0       	ldi	r24, 0x0E	; 14
 766:	0e 94 f7 00 	call	0x1ee	; 0x1ee <lcd_putc>
    lcd_putc(0b01001);                          //| #  #|
 76a:	89 e0       	ldi	r24, 0x09	; 9
 76c:	0e 94 f7 00 	call	0x1ee	; 0x1ee <lcd_putc>
    lcd_putc(0b01111);                          //| ####|
 770:	8f e0       	ldi	r24, 0x0F	; 15
 772:	0e 94 f7 00 	call	0x1ee	; 0x1ee <lcd_putc>
    lcd_putc(0b01001);                          //| #  #|
 776:	89 e0       	ldi	r24, 0x09	; 9
 778:	0e 94 f7 00 	call	0x1ee	; 0x1ee <lcd_putc>
    lcd_putc(0b11001);                          //|##  #|
 77c:	89 e1       	ldi	r24, 0x19	; 25
 77e:	0e 94 f7 00 	call	0x1ee	; 0x1ee <lcd_putc>
    lcd_putc(0b11011);                          //|## ##|
 782:	8b e1       	ldi	r24, 0x1B	; 27
 784:	0e 94 f7 00 	call	0x1ee	; 0x1ee <lcd_putc>
    lcd_putc(0b00011);                          //|   ##|
 788:	83 e0       	ldi	r24, 0x03	; 3
 78a:	0e 94 f7 00 	call	0x1ee	; 0x1ee <lcd_putc>
    lcd_putc(0b00000);                          //|_____|
 78e:	80 e0       	ldi	r24, 0x00	; 0
 790:	0e 94 f7 00 	call	0x1ee	; 0x1ee <lcd_putc>
    lcd_goto(0);
 794:	80 e0       	ldi	r24, 0x00	; 0
 796:	0e 94 e7 00 	call	0x1ce	; 0x1ce <lcd_goto>

    lcd_command(_BV(LCD_CGRAM)+TNSYMBOL*8);     // ______
 79a:	88 e4       	ldi	r24, 0x48	; 72
 79c:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <lcd_command>
    lcd_putc(0b10001);                          //|#   #|
 7a0:	81 e1       	ldi	r24, 0x11	; 17
 7a2:	0e 94 f7 00 	call	0x1ee	; 0x1ee <lcd_putc>
    lcd_putc(0b10101);                          //|# # #|
 7a6:	85 e1       	ldi	r24, 0x15	; 21
 7a8:	0e 94 f7 00 	call	0x1ee	; 0x1ee <lcd_putc>
    lcd_putc(0b10101);                          //|# # #|
 7ac:	85 e1       	ldi	r24, 0x15	; 21
 7ae:	0e 94 f7 00 	call	0x1ee	; 0x1ee <lcd_putc>
    lcd_putc(0b01110);                          //| ### |
 7b2:	8e e0       	ldi	r24, 0x0E	; 14
 7b4:	0e 94 f7 00 	call	0x1ee	; 0x1ee <lcd_putc>
    lcd_putc(0b00100);                          //|  #  |
 7b8:	84 e0       	ldi	r24, 0x04	; 4
 7ba:	0e 94 f7 00 	call	0x1ee	; 0x1ee <lcd_putc>
    lcd_putc(0b00100);                          //|  #  |
 7be:	84 e0       	ldi	r24, 0x04	; 4
 7c0:	0e 94 f7 00 	call	0x1ee	; 0x1ee <lcd_putc>
    lcd_putc(0b00100);                          //|  #  |
 7c4:	84 e0       	ldi	r24, 0x04	; 4
 7c6:	0e 94 f7 00 	call	0x1ee	; 0x1ee <lcd_putc>
    lcd_putc(0b00000);                          //|_____|
 7ca:	80 e0       	ldi	r24, 0x00	; 0
 7cc:	0e 94 f7 00 	call	0x1ee	; 0x1ee <lcd_putc>
    lcd_goto(0);
 7d0:	80 e0       	ldi	r24, 0x00	; 0
 7d2:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <lcd_goto>

000007d6 <main>:
    lcd_init();                   // LCD initialization.
 7d6:	0e 94 14 01 	call	0x228	; 0x228 <lcd_init>
    lcd_clrscr();                 // Clear the LCD.
 7da:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <lcd_clrscr>
    lcd_home();                   // Set the cursor at home position.
 7de:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <lcd_home>
    customchar();                 // Create custom characters for STEREO and TUNED symbols.
 7e2:	0e 94 af 03 	call	0x75e	; 0x75e <customchar>
    TUNED_DDR &=  ~(1<<TUNED);    // TUNED pin as Input.
 7e6:	3c 98       	cbi	0x07, 4	; 7
    TUNED_PORT |= (1<<TUNED);     // TUNED pin pull-up resistor enabled.
 7e8:	44 9a       	sbi	0x08, 4	; 8
    STEREO_DDR &=  ~(1<<STEREO);  // STEREO pin as Input.
 7ea:	3d 98       	cbi	0x07, 5	; 7
    STEREO_PORT |= (1<<STEREO);   // STEREO pin pull-up resistor enabled.
 7ec:	45 9a       	sbi	0x08, 5	; 8
    UPSW_DDR &=  ~(1<<UPSW);      // UP switch pin as Input.
 7ee:	20 98       	cbi	0x04, 0	; 4
    UPSW_PORT |= (1<<UPSW);       // UP switch pin pull-up resistor enabled.
 7f0:	28 9a       	sbi	0x05, 0	; 5
    DOWNSW_DDR &=  ~(1<<DOWNSW);  // UP switch pin as Input.
 7f2:	21 98       	cbi	0x04, 1	; 4
    DOWNSW_PORT |= (1<<DOWNSW);   // UP switch pin pull-up resistor enabled.
 7f4:	29 9a       	sbi	0x05, 1	; 5
    SCANSW_DDR &=  ~(1<<SCANSW);  // UP switch pin as Input.
 7f6:	22 98       	cbi	0x04, 2	; 4
    SCANSW_PORT |= (1<<SCANSW);   // UP switch pin pull-up resistor enabled.
 7f8:	2a 9a       	sbi	0x05, 2	; 5
    millis_init();                // Starting the time keeping function.
 7fa:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <millis_init>
    sei();                        // Enabling global Interrupts.
 7fe:	78 94       	sei
    lcd_puts_P("-- AVR RADIO --");
 800:	8a e8       	ldi	r24, 0x8A	; 138
 802:	90 e0       	ldi	r25, 0x00	; 0
 804:	0e 94 06 01 	call	0x20c	; 0x20c <lcd_puts_p>
 808:	2f ef       	ldi	r18, 0xFF	; 255
 80a:	87 ea       	ldi	r24, 0xA7	; 167
 80c:	91 e6       	ldi	r25, 0x61	; 97
 80e:	21 50       	subi	r18, 0x01	; 1
 810:	80 40       	sbci	r24, 0x00	; 0
 812:	90 40       	sbci	r25, 0x00	; 0
 814:	e1 f7       	brne	.-8      	; 0x80e <main+0x38>
 816:	00 c0       	rjmp	.+0      	; 0x818 <main+0x42>
 818:	00 00       	nop
    lcd_clrscr();
 81a:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <lcd_clrscr>
    LC72131_init();
 81e:	0e 94 87 01 	call	0x30e	; 0x30e <LC72131_init>
    PLL_SetMode(PLL_BAND_FM);
 822:	85 e0       	ldi	r24, 0x05	; 5
 824:	0e 94 84 02 	call	0x508	; 0x508 <PLL_SetMode>
    tuned = PLL_Tune(FMFrequency);
 828:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <FMFrequency>
 82c:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <FMFrequency+0x1>
 830:	0e 94 c5 02 	call	0x58a	; 0x58a <PLL_Tune>
 834:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <tuned>
    uint8_t scanmode=0;
 838:	c0 e0       	ldi	r28, 0x00	; 0
                if (FMFrequency >= 1080) FMFrequency=875;
 83a:	0b e6       	ldi	r16, 0x6B	; 107
 83c:	13 e0       	ldi	r17, 0x03	; 3
                if (FMFrequency <= 875) FMFrequency=1080;
 83e:	88 e3       	ldi	r24, 0x38	; 56
 840:	e8 2e       	mov	r14, r24
 842:	84 e0       	ldi	r24, 0x04	; 4
 844:	f8 2e       	mov	r15, r24
            scanmode ^= toggletn;
 846:	d1 e0       	ldi	r29, 0x01	; 1
        if (bit_is_clear(UPSW_PIN,UPSW)){
 848:	18 99       	sbic	0x03, 0	; 3
 84a:	12 c0       	rjmp	.+36     	; 0x870 <main+0x9a>
            if (scanmode==1){
 84c:	c1 30       	cpi	r28, 0x01	; 1
 84e:	09 f0       	breq	.+2      	; 0x852 <main+0x7c>
 850:	62 c0       	rjmp	.+196    	; 0x916 <__stack+0x17>
                tuned=0;
 852:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <tuned>
                while(tuned==0){
 856:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <tuned>
 85a:	88 23       	and	r24, r24
 85c:	e9 f1       	breq	.+122    	; 0x8d8 <main+0x102>
 85e:	8f ef       	ldi	r24, 0xFF	; 255
 860:	91 ee       	ldi	r25, 0xE1	; 225
 862:	24 e0       	ldi	r18, 0x04	; 4
 864:	81 50       	subi	r24, 0x01	; 1
 866:	90 40       	sbci	r25, 0x00	; 0
 868:	20 40       	sbci	r18, 0x00	; 0
 86a:	e1 f7       	brne	.-8      	; 0x864 <main+0x8e>
 86c:	00 c0       	rjmp	.+0      	; 0x86e <main+0x98>
 86e:	00 00       	nop
        if (bit_is_clear(DOWNSW_PIN,DOWNSW)){
 870:	19 99       	sbic	0x03, 1	; 3
 872:	13 c0       	rjmp	.+38     	; 0x89a <main+0xc4>
            if (scanmode==1){
 874:	c1 30       	cpi	r28, 0x01	; 1
 876:	09 f0       	breq	.+2      	; 0x87a <main+0xa4>
 878:	8a c0       	rjmp	.+276    	; 0x98e <__stack+0x8f>
                tuned=0;
 87a:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <tuned>
                while(tuned==0){
 87e:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <tuned>
 882:	88 23       	and	r24, r24
 884:	09 f4       	brne	.+2      	; 0x888 <main+0xb2>
 886:	64 c0       	rjmp	.+200    	; 0x950 <__stack+0x51>
 888:	8f ef       	ldi	r24, 0xFF	; 255
 88a:	91 ee       	ldi	r25, 0xE1	; 225
 88c:	24 e0       	ldi	r18, 0x04	; 4
 88e:	81 50       	subi	r24, 0x01	; 1
 890:	90 40       	sbci	r25, 0x00	; 0
 892:	20 40       	sbci	r18, 0x00	; 0
 894:	e1 f7       	brne	.-8      	; 0x88e <main+0xb8>
 896:	00 c0       	rjmp	.+0      	; 0x898 <main+0xc2>
 898:	00 00       	nop
        if (bit_is_clear(SCANSW_PIN,SCANSW)){
 89a:	1a 99       	sbic	0x03, 2	; 3
 89c:	0a c0       	rjmp	.+20     	; 0x8b2 <main+0xdc>
            scanmode ^= toggletn;
 89e:	cd 27       	eor	r28, r29
 8a0:	8f ef       	ldi	r24, 0xFF	; 255
 8a2:	93 ec       	ldi	r25, 0xC3	; 195
 8a4:	29 e0       	ldi	r18, 0x09	; 9
 8a6:	81 50       	subi	r24, 0x01	; 1
 8a8:	90 40       	sbci	r25, 0x00	; 0
 8aa:	20 40       	sbci	r18, 0x00	; 0
 8ac:	e1 f7       	brne	.-8      	; 0x8a6 <main+0xd0>
 8ae:	00 c0       	rjmp	.+0      	; 0x8b0 <main+0xda>
 8b0:	00 00       	nop
            lcd_gotoxy(0,1);
 8b2:	61 e0       	ldi	r22, 0x01	; 1
 8b4:	80 e0       	ldi	r24, 0x00	; 0
        if (scanmode==0){
 8b6:	c1 11       	cpse	r28, r1
 8b8:	87 c0       	rjmp	.+270    	; 0x9c8 <__stack+0xc9>
            lcd_gotoxy(0,1);
 8ba:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <lcd_gotoxy>
            lcd_puts_P("MANUAL SCAN");
 8be:	8e e7       	ldi	r24, 0x7E	; 126
 8c0:	90 e0       	ldi	r25, 0x00	; 0
            lcd_puts_P("AUTO SCAN  ");
 8c2:	0e 94 06 01 	call	0x20c	; 0x20c <lcd_puts_p>
        lcdupdate();
 8c6:	0e 94 51 03 	call	0x6a2	; 0x6a2 <lcdupdate>
 8ca:	8f e9       	ldi	r24, 0x9F	; 159
 8cc:	9f e0       	ldi	r25, 0x0F	; 15
 8ce:	01 97       	sbiw	r24, 0x01	; 1
 8d0:	f1 f7       	brne	.-4      	; 0x8ce <main+0xf8>
 8d2:	00 c0       	rjmp	.+0      	; 0x8d4 <main+0xfe>
 8d4:	00 00       	nop
 8d6:	b8 cf       	rjmp	.-144    	; 0x848 <main+0x72>
                    FMFrequency++;
 8d8:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <FMFrequency>
 8dc:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <FMFrequency+0x1>
 8e0:	01 96       	adiw	r24, 0x01	; 1
 8e2:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <FMFrequency+0x1>
 8e6:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <FMFrequency>
                    if (FMFrequency >= 1080) FMFrequency=875;
 8ea:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <FMFrequency>
 8ee:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <FMFrequency+0x1>
 8f2:	88 33       	cpi	r24, 0x38	; 56
 8f4:	94 40       	sbci	r25, 0x04	; 4
 8f6:	20 f0       	brcs	.+8      	; 0x900 <__stack+0x1>
 8f8:	10 93 02 01 	sts	0x0102, r17	; 0x800102 <FMFrequency+0x1>
 8fc:	00 93 01 01 	sts	0x0101, r16	; 0x800101 <FMFrequency>
                    tuned = PLL_Tune(FMFrequency);
 900:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <FMFrequency>
 904:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <FMFrequency+0x1>
 908:	0e 94 c5 02 	call	0x58a	; 0x58a <PLL_Tune>
 90c:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <tuned>
                    lcdupdate();
 910:	0e 94 51 03 	call	0x6a2	; 0x6a2 <lcdupdate>
 914:	a0 cf       	rjmp	.-192    	; 0x856 <main+0x80>
                FMFrequency++;
 916:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <FMFrequency>
 91a:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <FMFrequency+0x1>
 91e:	01 96       	adiw	r24, 0x01	; 1
 920:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <FMFrequency+0x1>
 924:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <FMFrequency>
                if (FMFrequency >= 1080) FMFrequency=875;
 928:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <FMFrequency>
 92c:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <FMFrequency+0x1>
 930:	88 33       	cpi	r24, 0x38	; 56
 932:	94 40       	sbci	r25, 0x04	; 4
 934:	20 f0       	brcs	.+8      	; 0x93e <__stack+0x3f>
 936:	10 93 02 01 	sts	0x0102, r17	; 0x800102 <FMFrequency+0x1>
 93a:	00 93 01 01 	sts	0x0101, r16	; 0x800101 <FMFrequency>
                tuned = PLL_Tune(FMFrequency);
 93e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <FMFrequency>
 942:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <FMFrequency+0x1>
 946:	0e 94 c5 02 	call	0x58a	; 0x58a <PLL_Tune>
 94a:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <tuned>
 94e:	87 cf       	rjmp	.-242    	; 0x85e <main+0x88>
                    FMFrequency--;
 950:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <FMFrequency>
 954:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <FMFrequency+0x1>
 958:	01 97       	sbiw	r24, 0x01	; 1
 95a:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <FMFrequency+0x1>
 95e:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <FMFrequency>
                    if (FMFrequency <= 875) FMFrequency=1080;
 962:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <FMFrequency>
 966:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <FMFrequency+0x1>
 96a:	8c 36       	cpi	r24, 0x6C	; 108
 96c:	93 40       	sbci	r25, 0x03	; 3
 96e:	20 f4       	brcc	.+8      	; 0x978 <__stack+0x79>
 970:	f0 92 02 01 	sts	0x0102, r15	; 0x800102 <FMFrequency+0x1>
 974:	e0 92 01 01 	sts	0x0101, r14	; 0x800101 <FMFrequency>
                    tuned = PLL_Tune(FMFrequency);
 978:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <FMFrequency>
 97c:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <FMFrequency+0x1>
 980:	0e 94 c5 02 	call	0x58a	; 0x58a <PLL_Tune>
 984:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <tuned>
                    lcdupdate();
 988:	0e 94 51 03 	call	0x6a2	; 0x6a2 <lcdupdate>
 98c:	78 cf       	rjmp	.-272    	; 0x87e <main+0xa8>
                FMFrequency--;
 98e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <FMFrequency>
 992:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <FMFrequency+0x1>
 996:	01 97       	sbiw	r24, 0x01	; 1
 998:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <FMFrequency+0x1>
 99c:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <FMFrequency>
                if (FMFrequency <= 875) FMFrequency=1080;
 9a0:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <FMFrequency>
 9a4:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <FMFrequency+0x1>
 9a8:	8c 36       	cpi	r24, 0x6C	; 108
 9aa:	93 40       	sbci	r25, 0x03	; 3
 9ac:	20 f4       	brcc	.+8      	; 0x9b6 <__stack+0xb7>
 9ae:	f0 92 02 01 	sts	0x0102, r15	; 0x800102 <FMFrequency+0x1>
 9b2:	e0 92 01 01 	sts	0x0101, r14	; 0x800101 <FMFrequency>
                tuned = PLL_Tune(FMFrequency);
 9b6:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <FMFrequency>
 9ba:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <FMFrequency+0x1>
 9be:	0e 94 c5 02 	call	0x58a	; 0x58a <PLL_Tune>
 9c2:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <tuned>
 9c6:	60 cf       	rjmp	.-320    	; 0x888 <main+0xb2>
            lcd_gotoxy(0,1);
 9c8:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <lcd_gotoxy>
            lcd_puts_P("AUTO SCAN  ");
 9cc:	82 e7       	ldi	r24, 0x72	; 114
 9ce:	90 e0       	ldi	r25, 0x00	; 0
 9d0:	78 cf       	rjmp	.-272    	; 0x8c2 <main+0xec>

000009d2 <__udivmodhi4>:
 9d2:	aa 1b       	sub	r26, r26
 9d4:	bb 1b       	sub	r27, r27
 9d6:	51 e1       	ldi	r21, 0x11	; 17
 9d8:	07 c0       	rjmp	.+14     	; 0x9e8 <__udivmodhi4_ep>

000009da <__udivmodhi4_loop>:
 9da:	aa 1f       	adc	r26, r26
 9dc:	bb 1f       	adc	r27, r27
 9de:	a6 17       	cp	r26, r22
 9e0:	b7 07       	cpc	r27, r23
 9e2:	10 f0       	brcs	.+4      	; 0x9e8 <__udivmodhi4_ep>
 9e4:	a6 1b       	sub	r26, r22
 9e6:	b7 0b       	sbc	r27, r23

000009e8 <__udivmodhi4_ep>:
 9e8:	88 1f       	adc	r24, r24
 9ea:	99 1f       	adc	r25, r25
 9ec:	5a 95       	dec	r21
 9ee:	a9 f7       	brne	.-22     	; 0x9da <__udivmodhi4_loop>
 9f0:	80 95       	com	r24
 9f2:	90 95       	com	r25
 9f4:	bc 01       	movw	r22, r24
 9f6:	cd 01       	movw	r24, r26
 9f8:	08 95       	ret

000009fa <strcat>:
 9fa:	fb 01       	movw	r30, r22
 9fc:	dc 01       	movw	r26, r24
 9fe:	0d 90       	ld	r0, X+
 a00:	00 20       	and	r0, r0
 a02:	e9 f7       	brne	.-6      	; 0x9fe <strcat+0x4>
 a04:	11 97       	sbiw	r26, 0x01	; 1
 a06:	01 90       	ld	r0, Z+
 a08:	0d 92       	st	X+, r0
 a0a:	00 20       	and	r0, r0
 a0c:	e1 f7       	brne	.-8      	; 0xa06 <strcat+0xc>
 a0e:	08 95       	ret

00000a10 <strcpy>:
 a10:	fb 01       	movw	r30, r22
 a12:	dc 01       	movw	r26, r24
 a14:	01 90       	ld	r0, Z+
 a16:	0d 92       	st	X+, r0
 a18:	00 20       	and	r0, r0
 a1a:	e1 f7       	brne	.-8      	; 0xa14 <strcpy+0x4>
 a1c:	08 95       	ret

00000a1e <__ultoa_ncheck>:
 a1e:	bb 27       	eor	r27, r27

00000a20 <__ultoa_common>:
 a20:	fa 01       	movw	r30, r20
 a22:	a6 2f       	mov	r26, r22
 a24:	62 17       	cp	r22, r18
 a26:	71 05       	cpc	r23, r1
 a28:	81 05       	cpc	r24, r1
 a2a:	91 05       	cpc	r25, r1
 a2c:	33 0b       	sbc	r19, r19
 a2e:	30 fb       	bst	r19, 0
 a30:	66 f0       	brts	.+24     	; 0xa4a <__ultoa_common+0x2a>
 a32:	aa 27       	eor	r26, r26
 a34:	66 0f       	add	r22, r22
 a36:	77 1f       	adc	r23, r23
 a38:	88 1f       	adc	r24, r24
 a3a:	99 1f       	adc	r25, r25
 a3c:	aa 1f       	adc	r26, r26
 a3e:	a2 17       	cp	r26, r18
 a40:	10 f0       	brcs	.+4      	; 0xa46 <__ultoa_common+0x26>
 a42:	a2 1b       	sub	r26, r18
 a44:	63 95       	inc	r22
 a46:	38 50       	subi	r19, 0x08	; 8
 a48:	a9 f7       	brne	.-22     	; 0xa34 <__ultoa_common+0x14>
 a4a:	a0 5d       	subi	r26, 0xD0	; 208
 a4c:	aa 33       	cpi	r26, 0x3A	; 58
 a4e:	08 f0       	brcs	.+2      	; 0xa52 <__ultoa_common+0x32>
 a50:	a9 5d       	subi	r26, 0xD9	; 217
 a52:	a1 93       	st	Z+, r26
 a54:	36 f7       	brtc	.-52     	; 0xa22 <__ultoa_common+0x2>
 a56:	b1 11       	cpse	r27, r1
 a58:	b1 93       	st	Z+, r27
 a5a:	10 82       	st	Z, r1
 a5c:	ca 01       	movw	r24, r20
 a5e:	0c 94 31 05 	jmp	0xa62	; 0xa62 <strrev>

00000a62 <strrev>:
 a62:	dc 01       	movw	r26, r24
 a64:	fc 01       	movw	r30, r24
 a66:	67 2f       	mov	r22, r23
 a68:	71 91       	ld	r23, Z+
 a6a:	77 23       	and	r23, r23
 a6c:	e1 f7       	brne	.-8      	; 0xa66 <strrev+0x4>
 a6e:	32 97       	sbiw	r30, 0x02	; 2
 a70:	04 c0       	rjmp	.+8      	; 0xa7a <strrev+0x18>
 a72:	7c 91       	ld	r23, X
 a74:	6d 93       	st	X+, r22
 a76:	70 83       	st	Z, r23
 a78:	62 91       	ld	r22, -Z
 a7a:	ae 17       	cp	r26, r30
 a7c:	bf 07       	cpc	r27, r31
 a7e:	c8 f3       	brcs	.-14     	; 0xa72 <strrev+0x10>
 a80:	08 95       	ret

00000a82 <_exit>:
 a82:	f8 94       	cli

00000a84 <__stop_program>:
 a84:	ff cf       	rjmp	.-2      	; 0xa84 <__stop_program>
