
bin/Debug/AVR_Radio.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  000006d0  00000764  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006d0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800116  00800116  0000077a  2**0
                  ALLOC
  3 .stab         0000222c  00000000  00000000  0000077c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001309  00000000  00000000  000029a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00003cb1  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003cc4  2**2
                  CONTENTS, READONLY
  7 .debug_info   000005f4  00000000  00000000  00003d04  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000005a2  00000000  00000000  000042f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000001d  00000000  00000000  0000489a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000208  00000000  00000000  000048b7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 ed       	ldi	r30, 0xD0	; 208
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 31       	cpi	r26, 0x16	; 22
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e1       	ldi	r26, 0x16	; 22
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ad 31       	cpi	r26, 0x1D	; 29
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 2b 03 	call	0x656	; 0x656 <main>
  9e:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <digitalWrite>:
#include <stdio.h>

#include "bit_manipulation.h"

void digitalWrite(uint8_t pin, volatile uint8_t *port, uint8_t val)
{
  a6:	fb 01       	movw	r30, r22
  a8:	21 e0       	ldi	r18, 0x01	; 1
  aa:	30 e0       	ldi	r19, 0x00	; 0
  ac:	b9 01       	movw	r22, r18
  ae:	02 c0       	rjmp	.+4      	; 0xb4 <digitalWrite+0xe>
  b0:	66 0f       	add	r22, r22
  b2:	77 1f       	adc	r23, r23
  b4:	8a 95       	dec	r24
  b6:	e2 f7       	brpl	.-8      	; 0xb0 <digitalWrite+0xa>
  b8:	cb 01       	movw	r24, r22

        if (val == 0) {
                *port &= ~(1<<pin);
  ba:	90 81       	ld	r25, Z
        if (val == 0) {
  bc:	41 11       	cpse	r20, r1
  be:	04 c0       	rjmp	.+8      	; 0xc8 <digitalWrite+0x22>
                *port &= ~(1<<pin);
  c0:	80 95       	com	r24
  c2:	89 23       	and	r24, r25
        } else {
                *port |= (1<<pin);
  c4:	80 83       	st	Z, r24
        };
}
  c6:	08 95       	ret
                *port |= (1<<pin);
  c8:	89 2b       	or	r24, r25
  ca:	fc cf       	rjmp	.-8      	; 0xc4 <digitalWrite+0x1e>

000000cc <digitalRead>:

uint8_t digitalRead(uint8_t pin, volatile uint8_t *port)
{

        if (bit_is_clear(*port, pin)) {
  cc:	fb 01       	movw	r30, r22
  ce:	20 81       	ld	r18, Z
  d0:	30 e0       	ldi	r19, 0x00	; 0
  d2:	a9 01       	movw	r20, r18
  d4:	02 c0       	rjmp	.+4      	; 0xda <digitalRead+0xe>
  d6:	55 95       	asr	r21
  d8:	47 95       	ror	r20
  da:	8a 95       	dec	r24
  dc:	e2 f7       	brpl	.-8      	; 0xd6 <digitalRead+0xa>
  de:	ca 01       	movw	r24, r20
                return 0;
        } else {
                return 1;
        }
}
  e0:	81 70       	andi	r24, 0x01	; 1
  e2:	08 95       	ret

000000e4 <lcd_e_port_low>:
      case 4 : LCD_E4_PORT&=~_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT&=~_BV(LCD_E_PIN);
  e4:	5b 98       	cbi	0x0b, 3	; 11
  #if (LCD_DISPLAYS>1)
    }
  #endif
}
  e6:	08 95       	ret

000000e8 <lcd_e_port_high>:
      case 4 : LCD_E4_PORT|=_BV(LCD_E4_PIN);
               break;
      #endif
      default :
  #endif
                LCD_E_PORT|=_BV(LCD_E_PIN);
  e8:	5b 9a       	sbi	0x0b, 3	; 11
  #if (LCD_DISPLAYS>1)
    }
  #endif
}
  ea:	08 95       	ret

000000ec <lcd_write>:
          rs     1: write data
                 0: write instruction
Returns:  none
*************************************************************************/
static void lcd_write(uint8_t data,uint8_t rs)
  {
  ec:	cf 93       	push	r28
  ee:	df 93       	push	r29
  f0:	c8 2f       	mov	r28, r24
  f2:	d6 2f       	mov	r29, r22
          Delay_us(5);
          PrevCmdInvolvedAddressCounter=0;
        }
    #endif

    if (rs)
  f4:	66 23       	and	r22, r22
  f6:	e1 f1       	breq	.+120    	; 0x170 <lcd_write+0x84>
      {
        lcd_rs_port_high();                            // RS=1: Write Character
  f8:	5a 9a       	sbi	0x0b, 2	; 11
        PrevCmdInvolvedAddressCounter=0;
        #endif
      }

    #if LCD_BITS==4
      lcd_db7_port_set(data&_BV(7));                  //Output High Nibble
  fa:	c7 ff       	sbrs	r28, 7
  fc:	3b c0       	rjmp	.+118    	; 0x174 <lcd_write+0x88>
  fe:	5f 9a       	sbi	0x0b, 7	; 11
      lcd_db6_port_set(data&_BV(6));
 100:	c6 ff       	sbrs	r28, 6
 102:	3a c0       	rjmp	.+116    	; 0x178 <lcd_write+0x8c>
 104:	5e 9a       	sbi	0x0b, 6	; 11
      lcd_db5_port_set(data&_BV(5));
 106:	c5 ff       	sbrs	r28, 5
 108:	39 c0       	rjmp	.+114    	; 0x17c <lcd_write+0x90>
 10a:	5d 9a       	sbi	0x0b, 5	; 11
      lcd_db4_port_set(data&_BV(4));
 10c:	c4 ff       	sbrs	r28, 4
 10e:	38 c0       	rjmp	.+112    	; 0x180 <lcd_write+0x94>
 110:	5c 9a       	sbi	0x0b, 4	; 11

      Delay_ns(100);
 112:	00 c0       	rjmp	.+0      	; 0x114 <lcd_write+0x28>
      lcd_e_port_high();
 114:	0e 94 74 00 	call	0xe8	; 0xe8 <lcd_e_port_high>

      Delay_ns(500);
 118:	82 e0       	ldi	r24, 0x02	; 2
 11a:	8a 95       	dec	r24
 11c:	f1 f7       	brne	.-4      	; 0x11a <lcd_write+0x2e>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <lcd_write+0x34>
      lcd_e_port_low();
 120:	0e 94 72 00 	call	0xe4	; 0xe4 <lcd_e_port_low>

      lcd_db7_port_set(data&_BV(3));                  //Output High Nibble
 124:	c3 ff       	sbrs	r28, 3
 126:	2e c0       	rjmp	.+92     	; 0x184 <lcd_write+0x98>
 128:	5f 9a       	sbi	0x0b, 7	; 11
      lcd_db6_port_set(data&_BV(2));
 12a:	c2 ff       	sbrs	r28, 2
 12c:	2d c0       	rjmp	.+90     	; 0x188 <lcd_write+0x9c>
 12e:	5e 9a       	sbi	0x0b, 6	; 11
      lcd_db5_port_set(data&_BV(1));
 130:	c1 ff       	sbrs	r28, 1
 132:	2c c0       	rjmp	.+88     	; 0x18c <lcd_write+0xa0>
 134:	5d 9a       	sbi	0x0b, 5	; 11
      lcd_db4_port_set(data&_BV(0));
 136:	c0 ff       	sbrs	r28, 0
 138:	2b c0       	rjmp	.+86     	; 0x190 <lcd_write+0xa4>
 13a:	5c 9a       	sbi	0x0b, 4	; 11

      Delay_ns(100);
 13c:	00 c0       	rjmp	.+0      	; 0x13e <lcd_write+0x52>
      lcd_e_port_high();
 13e:	0e 94 74 00 	call	0xe8	; 0xe8 <lcd_e_port_high>

      Delay_ns(500);
 142:	92 e0       	ldi	r25, 0x02	; 2
 144:	9a 95       	dec	r25
 146:	f1 f7       	brne	.-4      	; 0x144 <lcd_write+0x58>
 148:	00 c0       	rjmp	.+0      	; 0x14a <lcd_write+0x5e>
      lcd_e_port_low();
 14a:	0e 94 72 00 	call	0xe4	; 0xe4 <lcd_e_port_low>

      lcd_db7_port_high();                            // All Data Pins High (Inactive)
 14e:	5f 9a       	sbi	0x0b, 7	; 11
      lcd_db6_port_high();
 150:	5e 9a       	sbi	0x0b, 6	; 11
      lcd_db5_port_high();
 152:	5d 9a       	sbi	0x0b, 5	; 11
      lcd_db4_port_high();
 154:	5c 9a       	sbi	0x0b, 4	; 11
      lcd_db1_port_high();
      lcd_db0_port_high();
    #endif

    #if (WAIT_MODE==0 || RW_LINE_IMPLEMENTED==0)
      if (!rs && data<=((1<<LCD_CLR) | (1<<LCD_HOME))) // Is command clrscr or home?
 156:	d1 11       	cpse	r29, r1
 158:	1d c0       	rjmp	.+58     	; 0x194 <lcd_write+0xa8>
 15a:	c4 30       	cpi	r28, 0x04	; 4
 15c:	d8 f4       	brcc	.+54     	; 0x194 <lcd_write+0xa8>
        Delay_us(1640);
 15e:	8f e9       	ldi	r24, 0x9F	; 159
 160:	99 e1       	ldi	r25, 0x19	; 25
 162:	01 97       	sbiw	r24, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <lcd_write+0x76>
 166:	00 c0       	rjmp	.+0      	; 0x168 <lcd_write+0x7c>
      else Delay_us(40);
 168:	00 00       	nop
    #endif
  }
 16a:	df 91       	pop	r29
 16c:	cf 91       	pop	r28
 16e:	08 95       	ret
        lcd_rs_port_low();                          // RS=0: Write Command
 170:	5a 98       	cbi	0x0b, 2	; 11
 172:	c3 cf       	rjmp	.-122    	; 0xfa <lcd_write+0xe>
      lcd_db7_port_set(data&_BV(7));                  //Output High Nibble
 174:	5f 98       	cbi	0x0b, 7	; 11
 176:	c4 cf       	rjmp	.-120    	; 0x100 <lcd_write+0x14>
      lcd_db6_port_set(data&_BV(6));
 178:	5e 98       	cbi	0x0b, 6	; 11
 17a:	c5 cf       	rjmp	.-118    	; 0x106 <lcd_write+0x1a>
      lcd_db5_port_set(data&_BV(5));
 17c:	5d 98       	cbi	0x0b, 5	; 11
 17e:	c6 cf       	rjmp	.-116    	; 0x10c <lcd_write+0x20>
      lcd_db4_port_set(data&_BV(4));
 180:	5c 98       	cbi	0x0b, 4	; 11
 182:	c7 cf       	rjmp	.-114    	; 0x112 <lcd_write+0x26>
      lcd_db7_port_set(data&_BV(3));                  //Output High Nibble
 184:	5f 98       	cbi	0x0b, 7	; 11
 186:	d1 cf       	rjmp	.-94     	; 0x12a <lcd_write+0x3e>
      lcd_db6_port_set(data&_BV(2));
 188:	5e 98       	cbi	0x0b, 6	; 11
 18a:	d2 cf       	rjmp	.-92     	; 0x130 <lcd_write+0x44>
      lcd_db5_port_set(data&_BV(1));
 18c:	5d 98       	cbi	0x0b, 5	; 11
 18e:	d3 cf       	rjmp	.-90     	; 0x136 <lcd_write+0x4a>
      lcd_db4_port_set(data&_BV(0));
 190:	5c 98       	cbi	0x0b, 4	; 11
 192:	d4 cf       	rjmp	.-88     	; 0x13c <lcd_write+0x50>
      else Delay_us(40);
 194:	95 ed       	ldi	r25, 0xD5	; 213
 196:	9a 95       	dec	r25
 198:	f1 f7       	brne	.-4      	; 0x196 <lcd_write+0xaa>
 19a:	e6 cf       	rjmp	.-52     	; 0x168 <lcd_write+0x7c>

0000019c <lcd_command>:
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
  {
    lcd_write(cmd,0);
 19c:	60 e0       	ldi	r22, 0x00	; 0
 19e:	0c 94 76 00 	jmp	0xec	; 0xec <lcd_write>

000001a2 <lcd_goto>:
Input:    pos position
Returns:  none
*************************************************************************/
void lcd_goto(uint8_t pos)
  {
    lcd_command((1<<LCD_DDRAM)+pos);
 1a2:	80 58       	subi	r24, 0x80	; 128
 1a4:	0c 94 ce 00 	jmp	0x19c	; 0x19c <lcd_command>

000001a8 <lcd_gotoxy>:
{
#if LCD_DISPLAY_LINES==1
    lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
#endif
#if LCD_DISPLAY_LINES==2
    if ( y==0 )
 1a8:	61 11       	cpse	r22, r1
 1aa:	03 c0       	rjmp	.+6      	; 0x1b2 <lcd_gotoxy+0xa>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
 1ac:	80 58       	subi	r24, 0x80	; 128
    else
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
 1ae:	0c 94 ce 00 	jmp	0x19c	; 0x19c <lcd_command>
 1b2:	80 54       	subi	r24, 0x40	; 64
 1b4:	fc cf       	rjmp	.-8      	; 0x1ae <lcd_gotoxy+0x6>

000001b6 <lcd_clrscr>:
Input:    none
Returns:  none
*************************************************************************/
void lcd_clrscr()
  {
    lcd_command(1<<LCD_CLR);
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	0c 94 ce 00 	jmp	0x19c	; 0x19c <lcd_command>

000001bc <lcd_home>:
Input:    none
Returns:  none
*************************************************************************/
void lcd_home()
  {
    lcd_command(1<<LCD_HOME);
 1bc:	82 e0       	ldi	r24, 0x02	; 2
 1be:	0c 94 ce 00 	jmp	0x19c	; 0x19c <lcd_command>

000001c2 <lcd_putc>:
Input:    character to be displayed
Returns:  none
*************************************************************************/
void lcd_putc(char c)
  {
    lcd_write(c,1);
 1c2:	61 e0       	ldi	r22, 0x01	; 1
 1c4:	0c 94 76 00 	jmp	0xec	; 0xec <lcd_write>

000001c8 <lcd_puts>:
Display string
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
  {
 1c8:	cf 93       	push	r28
 1ca:	df 93       	push	r29
 1cc:	ec 01       	movw	r28, r24
    register char c;

    while ((c=*s++))
 1ce:	89 91       	ld	r24, Y+
 1d0:	81 11       	cpse	r24, r1
 1d2:	03 c0       	rjmp	.+6      	; 0x1da <lcd_puts+0x12>
      lcd_putc(c);
  }
 1d4:	df 91       	pop	r29
 1d6:	cf 91       	pop	r28
 1d8:	08 95       	ret
      lcd_putc(c);
 1da:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <lcd_putc>
 1de:	f7 cf       	rjmp	.-18     	; 0x1ce <lcd_puts+0x6>

000001e0 <lcd_puts_p>:
Display string from flash
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts_p(const char *progmem_s)
  {
 1e0:	cf 93       	push	r28
 1e2:	df 93       	push	r29
 1e4:	ec 01       	movw	r28, r24
    register char c;

    while ((c=pgm_read_byte(progmem_s++)))
 1e6:	fe 01       	movw	r30, r28
 1e8:	84 91       	lpm	r24, Z
 1ea:	21 96       	adiw	r28, 0x01	; 1
 1ec:	81 11       	cpse	r24, r1
 1ee:	03 c0       	rjmp	.+6      	; 0x1f6 <lcd_puts_p+0x16>
      lcd_putc(c);
  }
 1f0:	df 91       	pop	r29
 1f2:	cf 91       	pop	r28
 1f4:	08 95       	ret
      lcd_putc(c);
 1f6:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <lcd_putc>
 1fa:	f5 cf       	rjmp	.-22     	; 0x1e6 <lcd_puts_p+0x6>

000001fc <lcd_init>:
                DDR(LCD_E_PORT)|=_BV(LCD_E_PIN);
 1fc:	53 9a       	sbi	0x0a, 3	; 10
*************************************************************************/
void lcd_init()
  {
    //Set All Pins as Output
    lcd_e_ddr_high();
    lcd_rs_ddr_high();
 1fe:	52 9a       	sbi	0x0a, 2	; 10
    #if RW_LINE_IMPLEMENTED==1
      lcd_rw_ddr_high();
    #endif
    lcd_db7_ddr_high();
 200:	57 9a       	sbi	0x0a, 7	; 10
    lcd_db6_ddr_high();
 202:	56 9a       	sbi	0x0a, 6	; 10
    lcd_db5_ddr_high();
 204:	55 9a       	sbi	0x0a, 5	; 10
    lcd_db4_ddr_high();
 206:	54 9a       	sbi	0x0a, 4	; 10
      lcd_db1_ddr_high();
      lcd_db0_ddr_high();
    #endif

    //Set All Control Lines Low
    lcd_e_port_low();
 208:	0e 94 72 00 	call	0xe4	; 0xe4 <lcd_e_port_low>
    lcd_rs_port_low();
 20c:	5a 98       	cbi	0x0b, 2	; 11
    #if RW_LINE_IMPLEMENTED==1
      lcd_rw_port_low();
    #endif

    //Set All Data Lines High
    lcd_db7_port_high();
 20e:	5f 9a       	sbi	0x0b, 7	; 11
    lcd_db6_port_high();
 210:	5e 9a       	sbi	0x0b, 6	; 11
    lcd_db5_port_high();
 212:	5d 9a       	sbi	0x0b, 5	; 11
    lcd_db4_port_high();
 214:	5c 9a       	sbi	0x0b, 4	; 11
      lcd_db1_port_high();
      lcd_db0_port_high();
    #endif

    //Startup Delay
    Delay_ms(DELAY_RESET);
 216:	8f e5       	ldi	r24, 0x5F	; 95
 218:	9a ee       	ldi	r25, 0xEA	; 234
 21a:	01 97       	sbiw	r24, 0x01	; 1
 21c:	f1 f7       	brne	.-4      	; 0x21a <lcd_init+0x1e>
 21e:	00 c0       	rjmp	.+0      	; 0x220 <lcd_init+0x24>
 220:	00 00       	nop

    //Initialize Display
    lcd_db7_port_low();
 222:	5f 98       	cbi	0x0b, 7	; 11
    lcd_db6_port_low();
 224:	5e 98       	cbi	0x0b, 6	; 11
    Delay_ns(100);
 226:	00 c0       	rjmp	.+0      	; 0x228 <lcd_init+0x2c>
    lcd_e_port_high();
 228:	0e 94 74 00 	call	0xe8	; 0xe8 <lcd_e_port_high>
    Delay_ns(500);
 22c:	92 e0       	ldi	r25, 0x02	; 2
 22e:	9a 95       	dec	r25
 230:	f1 f7       	brne	.-4      	; 0x22e <lcd_init+0x32>
 232:	00 c0       	rjmp	.+0      	; 0x234 <lcd_init+0x38>
    lcd_e_port_low();
 234:	0e 94 72 00 	call	0xe4	; 0xe4 <lcd_e_port_low>

    Delay_us(4100);
 238:	8f e0       	ldi	r24, 0x0F	; 15
 23a:	90 e4       	ldi	r25, 0x40	; 64
 23c:	01 97       	sbiw	r24, 0x01	; 1
 23e:	f1 f7       	brne	.-4      	; 0x23c <lcd_init+0x40>
 240:	00 c0       	rjmp	.+0      	; 0x242 <lcd_init+0x46>
 242:	00 00       	nop

    lcd_e_port_high();
 244:	0e 94 74 00 	call	0xe8	; 0xe8 <lcd_e_port_high>
    Delay_ns(500);
 248:	92 e0       	ldi	r25, 0x02	; 2
 24a:	9a 95       	dec	r25
 24c:	f1 f7       	brne	.-4      	; 0x24a <lcd_init+0x4e>
 24e:	00 c0       	rjmp	.+0      	; 0x250 <lcd_init+0x54>
    lcd_e_port_low();
 250:	0e 94 72 00 	call	0xe4	; 0xe4 <lcd_e_port_low>

    Delay_us(100);
 254:	8f e8       	ldi	r24, 0x8F	; 143
 256:	91 e0       	ldi	r25, 0x01	; 1
 258:	01 97       	sbiw	r24, 0x01	; 1
 25a:	f1 f7       	brne	.-4      	; 0x258 <lcd_init+0x5c>
 25c:	00 c0       	rjmp	.+0      	; 0x25e <lcd_init+0x62>
 25e:	00 00       	nop

    lcd_e_port_high();
 260:	0e 94 74 00 	call	0xe8	; 0xe8 <lcd_e_port_high>
    Delay_ns(500);
 264:	92 e0       	ldi	r25, 0x02	; 2
 266:	9a 95       	dec	r25
 268:	f1 f7       	brne	.-4      	; 0x266 <lcd_init+0x6a>
 26a:	00 c0       	rjmp	.+0      	; 0x26c <lcd_init+0x70>
    lcd_e_port_low();
 26c:	0e 94 72 00 	call	0xe4	; 0xe4 <lcd_e_port_low>

    Delay_us(40);
 270:	85 ed       	ldi	r24, 0xD5	; 213
 272:	8a 95       	dec	r24
 274:	f1 f7       	brne	.-4      	; 0x272 <lcd_init+0x76>
 276:	00 00       	nop

    //Init differs between 4-bit and 8-bit from here
    #if (LCD_BITS==4)
      lcd_db4_port_low();
 278:	5c 98       	cbi	0x0b, 4	; 11
      Delay_ns(100);
 27a:	00 c0       	rjmp	.+0      	; 0x27c <lcd_init+0x80>
      lcd_e_port_high();
 27c:	0e 94 74 00 	call	0xe8	; 0xe8 <lcd_e_port_high>
      Delay_ns(500);
 280:	92 e0       	ldi	r25, 0x02	; 2
 282:	9a 95       	dec	r25
 284:	f1 f7       	brne	.-4      	; 0x282 <lcd_init+0x86>
 286:	00 c0       	rjmp	.+0      	; 0x288 <lcd_init+0x8c>
      lcd_e_port_low();
 288:	0e 94 72 00 	call	0xe4	; 0xe4 <lcd_e_port_low>
      Delay_us(40);
 28c:	85 ed       	ldi	r24, 0xD5	; 213
 28e:	8a 95       	dec	r24
 290:	f1 f7       	brne	.-4      	; 0x28e <lcd_init+0x92>
 292:	00 00       	nop

      lcd_db4_port_low();
 294:	5c 98       	cbi	0x0b, 4	; 11
      Delay_ns(100);
 296:	00 c0       	rjmp	.+0      	; 0x298 <lcd_init+0x9c>
      lcd_e_port_high();
 298:	0e 94 74 00 	call	0xe8	; 0xe8 <lcd_e_port_high>
      Delay_ns(500);
 29c:	92 e0       	ldi	r25, 0x02	; 2
 29e:	9a 95       	dec	r25
 2a0:	f1 f7       	brne	.-4      	; 0x29e <lcd_init+0xa2>
 2a2:	00 c0       	rjmp	.+0      	; 0x2a4 <lcd_init+0xa8>
      lcd_e_port_low();
 2a4:	0e 94 72 00 	call	0xe4	; 0xe4 <lcd_e_port_low>
      Delay_ns(500);
 2a8:	82 e0       	ldi	r24, 0x02	; 2
 2aa:	8a 95       	dec	r24
 2ac:	f1 f7       	brne	.-4      	; 0x2aa <lcd_init+0xae>
 2ae:	00 c0       	rjmp	.+0      	; 0x2b0 <lcd_init+0xb4>

      #if (LCD_DISPLAYS==1)
        if (LCD_DISPLAY_LINES>1)
          lcd_db7_port_high();
 2b0:	5f 9a       	sbi	0x0b, 7	; 11
          }
        if (c>1)
          lcd_db7_port_high();
      #endif

      Delay_ns(100);
 2b2:	00 c0       	rjmp	.+0      	; 0x2b4 <lcd_init+0xb8>
      lcd_e_port_high();
 2b4:	0e 94 74 00 	call	0xe8	; 0xe8 <lcd_e_port_high>
      Delay_ns(500);
 2b8:	92 e0       	ldi	r25, 0x02	; 2
 2ba:	9a 95       	dec	r25
 2bc:	f1 f7       	brne	.-4      	; 0x2ba <lcd_init+0xbe>
 2be:	00 c0       	rjmp	.+0      	; 0x2c0 <lcd_init+0xc4>
      lcd_e_port_low();
 2c0:	0e 94 72 00 	call	0xe4	; 0xe4 <lcd_e_port_low>
      Delay_us(40);
 2c4:	85 ed       	ldi	r24, 0xD5	; 213
 2c6:	8a 95       	dec	r24
 2c8:	f1 f7       	brne	.-4      	; 0x2c6 <lcd_init+0xca>
 2ca:	00 00       	nop
      lcd_e_port_low();
      Delay_us(40);
    #endif

    //Display Off
    lcd_command(_BV(LCD_DISPLAYMODE));
 2cc:	88 e0       	ldi	r24, 0x08	; 8
 2ce:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_command>

    //Display Clear
    lcd_clrscr();
 2d2:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_clrscr>

    //Entry Mode Set
    lcd_command(_BV(LCD_ENTRY_MODE) | _BV(LCD_ENTRY_INC));
 2d6:	86 e0       	ldi	r24, 0x06	; 6
 2d8:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_command>

    //Display On
    lcd_command(_BV(LCD_DISPLAYMODE) | _BV(LCD_DISPLAYMODE_ON));
 2dc:	8c e0       	ldi	r24, 0x0C	; 12
 2de:	0c 94 ce 00 	jmp	0x19c	; 0x19c <lcd_command>

000002e2 <PLL_Init>:
 * Initialize the PLL settings vectors with     *
 * parameters common to booth AM and FM modes   *
\************************************************/
void PLL_Init() {

    pll_in1[0]=0;   // Zeroing byte 0 of pll_in1.
 2e2:	ea e1       	ldi	r30, 0x1A	; 26
 2e4:	f1 e0       	ldi	r31, 0x01	; 1
 2e6:	10 82       	st	Z, r1
    pll_in1[1]=0;   // Zeroing byte 1 of pll_in1.
 2e8:	11 82       	std	Z+1, r1	; 0x01
    pll_in1[2]=0;   // Zeroing byte 2 of pll_in1.
 2ea:	12 82       	std	Z+2, r1	; 0x02

    pll_in2[0]=0;   // Zeroing byte 0 of pll_in2.
    pll_in2[1]=0;   // Zeroing byte 1 of pll_in2.
    pll_in2[2]=0;   // Zeroing byte 2 of pll_in2.

    bitSet(pll_in2[0], IN2_IFS);   // IF counter in normal mode. Page 12 and 15 of the Datasheet.
 2ec:	e7 e1       	ldi	r30, 0x17	; 23
 2ee:	f1 e0       	ldi	r31, 0x01	; 1
 2f0:	80 e1       	ldi	r24, 0x10	; 16
 2f2:	80 83       	st	Z, r24
    bitSet(pll_in2[1], IN2_UL0);   // Phase error detection width = 0us. UL1=0, UL0=1. Page 11 of the Datasheet.
 2f4:	81 83       	std	Z+1, r24	; 0x01
    bitSet(pll_in2[2], IN2_BO2);   // Mute off / normal tuner mode
 2f6:	80 e2       	ldi	r24, 0x20	; 32
 2f8:	82 83       	std	Z+2, r24	; 0x02
}
 2fa:	08 95       	ret

000002fc <PLL_SetMode>:

void PLL_SetMode(uint8_t mode) {

  switch(mode) {
 2fc:	83 30       	cpi	r24, 0x03	; 3
 2fe:	c1 f1       	breq	.+112    	; 0x370 <PLL_SetMode+0x74>
 300:	80 f4       	brcc	.+32     	; 0x322 <PLL_SetMode+0x26>
 302:	81 30       	cpi	r24, 0x01	; 1
 304:	89 f1       	breq	.+98     	; 0x368 <PLL_SetMode+0x6c>
 306:	82 30       	cpi	r24, 0x02	; 2
 308:	49 f1       	breq	.+82     	; 0x35c <PLL_SetMode+0x60>
      bitWrite(pll_in2[1], IN2_DZ0, 0); // Dead zone = DZC
      bitWrite(pll_in2[1], IN2_DZ1, 1); //
      bitWrite(pll_in2[2], IN2_BO1, 1); // AM mode
      break;
  }
  LC72131_write(0x82, pll_in1, 3);
 30a:	43 e0       	ldi	r20, 0x03	; 3
 30c:	6a e1       	ldi	r22, 0x1A	; 26
 30e:	71 e0       	ldi	r23, 0x01	; 1
 310:	82 e8       	ldi	r24, 0x82	; 130
 312:	0e 94 25 03 	call	0x64a	; 0x64a <LC72131_write>
  LC72131_write(0x92, pll_in2, 3);
 316:	43 e0       	ldi	r20, 0x03	; 3
 318:	67 e1       	ldi	r22, 0x17	; 23
 31a:	71 e0       	ldi	r23, 0x01	; 1
 31c:	82 e9       	ldi	r24, 0x92	; 146
 31e:	0c 94 25 03 	jmp	0x64a	; 0x64a <LC72131_write>
  switch(mode) {
 322:	85 30       	cpi	r24, 0x05	; 5
 324:	69 f1       	breq	.+90     	; 0x380 <PLL_SetMode+0x84>
 326:	40 f1       	brcs	.+80     	; 0x378 <PLL_SetMode+0x7c>
 328:	86 30       	cpi	r24, 0x06	; 6
 32a:	79 f7       	brne	.-34     	; 0x30a <PLL_SetMode+0xe>
      band = PLL_BAND_AM;
 32c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <band>
      bitWrite(pll_in1[0], IN1_DVS, 0); // Programmable Divider divisor = 1
 330:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <pll_in1>
 334:	8d 7e       	andi	r24, 0xED	; 237
 336:	80 68       	ori	r24, 0x80	; 128
 338:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <pll_in1>
      bitWrite(pll_in2[0], IN2_GT1, 0); //
 33c:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <pll_in2>
 340:	8d 7f       	andi	r24, 0xFD	; 253
 342:	81 60       	ori	r24, 0x01	; 1
 344:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <pll_in2>
      bitWrite(pll_in2[1], IN2_DZ0, 0); // Dead zone = DZC
 348:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <pll_in2+0x1>
 34c:	8f 7b       	andi	r24, 0xBF	; 191
      bitWrite(pll_in2[1], IN2_DZ1, 1); //
 34e:	80 68       	ori	r24, 0x80	; 128
 350:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <pll_in2+0x1>
      bitWrite(pll_in2[2], IN2_BO1, 1); // AM mode
 354:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <pll_in2+0x2>
 358:	80 61       	ori	r24, 0x10	; 16
 35a:	03 c0       	rjmp	.+6      	; 0x362 <PLL_SetMode+0x66>
      bitClear(pll_in2[2], IN2_BO3);
 35c:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <pll_in2+0x2>
 360:	8f 7b       	andi	r24, 0xBF	; 191
      bitWrite(pll_in2[2], IN2_BO1, 1); // AM mode
 362:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <pll_in2+0x2>
      break;
 366:	d1 cf       	rjmp	.-94     	; 0x30a <PLL_SetMode+0xe>
      bitSet(pll_in2[2], IN2_BO3);
 368:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <pll_in2+0x2>
 36c:	80 64       	ori	r24, 0x40	; 64
 36e:	f9 cf       	rjmp	.-14     	; 0x362 <PLL_SetMode+0x66>
      bitClear(pll_in2[2], IN2_BO2);
 370:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <pll_in2+0x2>
 374:	8f 7d       	andi	r24, 0xDF	; 223
 376:	f5 cf       	rjmp	.-22     	; 0x362 <PLL_SetMode+0x66>
      bitSet(pll_in2[2], IN2_BO2);
 378:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <pll_in2+0x2>
 37c:	80 62       	ori	r24, 0x20	; 32
 37e:	f1 cf       	rjmp	.-30     	; 0x362 <PLL_SetMode+0x66>
      band = PLL_BAND_FM;
 380:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <band>
      bitWrite(pll_in1[0], IN1_DVS, 1); // Programmable Divider divisor = 2
 384:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <pll_in1>
 388:	8f 77       	andi	r24, 0x7F	; 127
 38a:	8a 61       	ori	r24, 0x1A	; 26
 38c:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <pll_in1>
      bitWrite(pll_in2[0], IN2_GT0, 0); // IF counter mesurement period = 32ms
 390:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <pll_in2>
 394:	8e 7f       	andi	r24, 0xFE	; 254
      bitWrite(pll_in2[0], IN2_GT1, 1); //
 396:	82 60       	ori	r24, 0x02	; 2
 398:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <pll_in2>
      bitWrite(pll_in2[1], IN2_DZ1, 0); //
 39c:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <pll_in2+0x1>
 3a0:	8f 77       	andi	r24, 0x7F	; 127
 3a2:	80 64       	ori	r24, 0x40	; 64
 3a4:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <pll_in2+0x1>
      bitWrite(pll_in2[2], IN2_BO1, 0); // FM mode
 3a8:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <pll_in2+0x2>
 3ac:	8f 7e       	andi	r24, 0xEF	; 239
 3ae:	d9 cf       	rjmp	.-78     	; 0x362 <PLL_SetMode+0x66>

000003b0 <PLL_Tune>:
 * representation can be directly sent to the PLL and is    *
 * easy to represent:                                       *
 * - FM mode (divisor = 100): frequency (MHz) * 10          *
 * - AM mode (divisor = 10):  frequency (kHZ) / 10          *
\************************************************************/
uint8_t PLL_Tune(uint16_t frequency) {
 3b0:	0f 93       	push	r16
 3b2:	1f 93       	push	r17
 3b4:	cf 93       	push	r28
 3b6:	df 93       	push	r29
 3b8:	00 d0       	rcall	.+0      	; 0x3ba <PLL_Tune+0xa>
 3ba:	1f 92       	push	r1
 3bc:	cd b7       	in	r28, 0x3d	; 61
 3be:	de b7       	in	r29, 0x3e	; 62

    uint16_t fpd = 0;
    uint8_t i = 0;
    uint8_t r[3];

    switch(band) {
 3c0:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <band>
 3c4:	25 30       	cpi	r18, 0x05	; 5
 3c6:	29 f0       	breq	.+10     	; 0x3d2 <PLL_Tune+0x22>
 3c8:	26 30       	cpi	r18, 0x06	; 6
 3ca:	09 f4       	brne	.+2      	; 0x3ce <PLL_Tune+0x1e>
 3cc:	48 c0       	rjmp	.+144    	; 0x45e <__FUSE_REGION_LENGTH__+0x5e>
        case PLL_BAND_AM:
        // AM: fpd = ((frequency + FI) / 10) << 4
        fpd = (frequency + 45) << 4;
        break;

        default: return 1;
 3ce:	81 e0       	ldi	r24, 0x01	; 1
 3d0:	3e c0       	rjmp	.+124    	; 0x44e <__FUSE_REGION_LENGTH__+0x4e>
        fpd = (frequency + 107);
 3d2:	8c 01       	movw	r16, r24
 3d4:	05 59       	subi	r16, 0x95	; 149
 3d6:	1f 4f       	sbci	r17, 0xFF	; 255
    }

    PLL_SetMode(PLL_MUTE);   // YST93x only injects FI signal into the PLL when in MUTE mode
 3d8:	83 e0       	ldi	r24, 0x03	; 3
 3da:	0e 94 7e 01 	call	0x2fc	; 0x2fc <PLL_SetMode>

    // Reset the IF counter and program the Frequency Programmable Divider (fpd)
    bitClear(pll_in1[0], IN1_CTE);
 3de:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <pll_in1>
 3e2:	8b 7f       	andi	r24, 0xFB	; 251
 3e4:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <pll_in1>
    pll_in1[1] = (uint8_t) (fpd >> 8);
 3e8:	10 93 1b 01 	sts	0x011B, r17	; 0x80011b <pll_in1+0x1>
    pll_in1[2] =  (uint8_t) (fpd & 0x00ff);
 3ec:	00 93 1c 01 	sts	0x011C, r16	; 0x80011c <pll_in1+0x2>
    LC72131_write(0x82, pll_in1, 3);
 3f0:	43 e0       	ldi	r20, 0x03	; 3
 3f2:	6a e1       	ldi	r22, 0x1A	; 26
 3f4:	71 e0       	ldi	r23, 0x01	; 1
 3f6:	82 e8       	ldi	r24, 0x82	; 130
 3f8:	0e 94 25 03 	call	0x64a	; 0x64a <LC72131_write>

    // Start the IF counter
    bitSet(pll_in1[0], IN1_CTE);
 3fc:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <pll_in1>
 400:	84 60       	ori	r24, 0x04	; 4
 402:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <pll_in1>
    LC72131_write(0x82, pll_in1, 3);
 406:	43 e0       	ldi	r20, 0x03	; 3
 408:	6a e1       	ldi	r22, 0x1A	; 26
 40a:	71 e0       	ldi	r23, 0x01	; 1
 40c:	82 e8       	ldi	r24, 0x82	; 130
 40e:	0e 94 25 03 	call	0x64a	; 0x64a <LC72131_write>
 412:	12 e3       	ldi	r17, 0x32	; 50
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 414:	8f e3       	ldi	r24, 0x3F	; 63
 416:	9c e9       	ldi	r25, 0x9C	; 156
 418:	01 97       	sbiw	r24, 0x01	; 1
 41a:	f1 f7       	brne	.-4      	; 0x418 <__FUSE_REGION_LENGTH__+0x18>
 41c:	00 c0       	rjmp	.+0      	; 0x41e <__FUSE_REGION_LENGTH__+0x1e>
 41e:	00 00       	nop

    // Wait for PLL to be locked (DO_UL == 1)
    while(i < 50) {
        _delay_ms(10);
        LC72131_read(0xa2, r, 3);  // Discard the 1st result: it is latched from the last count (as said on the datasheet)
 420:	43 e0       	ldi	r20, 0x03	; 3
 422:	be 01       	movw	r22, r28
 424:	6f 5f       	subi	r22, 0xFF	; 255
 426:	7f 4f       	sbci	r23, 0xFF	; 255
 428:	82 ea       	ldi	r24, 0xA2	; 162
 42a:	0e 94 28 03 	call	0x650	; 0x650 <LC72131_read>
        LC72131_read(0xa2, r, 3);  // The 20 rightmost bits from r[0..2] are the IF counter result
 42e:	43 e0       	ldi	r20, 0x03	; 3
 430:	be 01       	movw	r22, r28
 432:	6f 5f       	subi	r22, 0xFF	; 255
 434:	7f 4f       	sbci	r23, 0xFF	; 255
 436:	82 ea       	ldi	r24, 0xA2	; 162
 438:	0e 94 28 03 	call	0x650	; 0x650 <LC72131_read>
        i = (bitRead(r[0], DO_UL)) ? 100 : i + 1;
 43c:	89 81       	ldd	r24, Y+1	; 0x01
 43e:	84 fd       	sbrc	r24, 4
 440:	02 c0       	rjmp	.+4      	; 0x446 <__FUSE_REGION_LENGTH__+0x46>
 442:	11 50       	subi	r17, 0x01	; 1
    while(i < 50) {
 444:	39 f7       	brne	.-50     	; 0x414 <__FUSE_REGION_LENGTH__+0x14>
    };

    PLL_SetMode(PLL_UNMUTE);   // Mute off / normal tuner mode
 446:	84 e0       	ldi	r24, 0x04	; 4
 448:	0e 94 7e 01 	call	0x2fc	; 0x2fc <PLL_SetMode>
 44c:	80 e0       	ldi	r24, 0x00	; 0

    return 0;
}
 44e:	0f 90       	pop	r0
 450:	0f 90       	pop	r0
 452:	0f 90       	pop	r0
 454:	df 91       	pop	r29
 456:	cf 91       	pop	r28
 458:	1f 91       	pop	r17
 45a:	0f 91       	pop	r16
 45c:	08 95       	ret
        fpd = (frequency + 45) << 4;
 45e:	8c 01       	movw	r16, r24
 460:	03 5d       	subi	r16, 0xD3	; 211
 462:	1f 4f       	sbci	r17, 0xFF	; 255
 464:	84 e0       	ldi	r24, 0x04	; 4
 466:	00 0f       	add	r16, r16
 468:	11 1f       	adc	r17, r17
 46a:	8a 95       	dec	r24
 46c:	e1 f7       	brne	.-8      	; 0x466 <__FUSE_REGION_LENGTH__+0x66>
        break;
 46e:	b4 cf       	rjmp	.-152    	; 0x3d8 <PLL_Tune+0x28>

00000470 <LC72131_init>:
 *                 init()                 *
 *  Set pin functions and initial states  *
\******************************************/
void LC72131_init() {

    CE_DDR |=  (1<<CE);   // CE pin as Output.
 470:	38 9a       	sbi	0x07, 0	; 7

    DI_DDR &=  ~(1<<DI);  // DI pin as Input.
 472:	39 98       	cbi	0x07, 1	; 7
    DI_PORT |= (1<<DI);   // DI pin pull-up resistor enabled.
 474:	41 9a       	sbi	0x08, 1	; 8

    CL_DDR |=  (1<<CL);   // CL pin as Output.
 476:	3a 9a       	sbi	0x07, 2	; 7

    DO_DDR |=  (1<<DO);   // DO pin as Output.
 478:	3b 9a       	sbi	0x07, 3	; 7

	DO_PORT &= ~(1<<DO);  // DO pin low.
 47a:	43 98       	cbi	0x08, 3	; 8
	CL_PORT &= ~(1<<CL);  // Clock pin low.
 47c:	42 98       	cbi	0x08, 2	; 8

	// Toggling CE one to "flush" the bus.
	CE_PORT |= (1<<CE);
 47e:	40 9a       	sbi	0x08, 0	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 480:	8f e8       	ldi	r24, 0x8F	; 143
 482:	91 e0       	ldi	r25, 0x01	; 1
 484:	01 97       	sbiw	r24, 0x01	; 1
 486:	f1 f7       	brne	.-4      	; 0x484 <LC72131_init+0x14>
 488:	00 c0       	rjmp	.+0      	; 0x48a <LC72131_init+0x1a>
 48a:	00 00       	nop
	_delay_us(CCB_DELAY);
	CE_PORT &= ~(1<<CE);
 48c:	40 98       	cbi	0x08, 0	; 8
 48e:	8f e8       	ldi	r24, 0x8F	; 143
 490:	91 e0       	ldi	r25, 0x01	; 1
 492:	01 97       	sbiw	r24, 0x01	; 1
 494:	f1 f7       	brne	.-4      	; 0x492 <LC72131_init+0x22>
 496:	00 c0       	rjmp	.+0      	; 0x498 <LC72131_init+0x28>
 498:	00 00       	nop
	_delay_us(CCB_DELAY);
}
 49a:	08 95       	ret

0000049c <writeByte>:

/************************************\
 *           writeByte()            *
 *  Send a single byte via CCB bus  *
\************************************/
void writeByte(uint8_t data) {
 49c:	0f 93       	push	r16
 49e:	1f 93       	push	r17
 4a0:	cf 93       	push	r28
 4a2:	df 93       	push	r29
 4a4:	d0 e0       	ldi	r29, 0x00	; 0
 4a6:	c0 e0       	ldi	r28, 0x00	; 0
	// Send one byte out bia CCB bus (LSB first)
	for(int8_t i = 0; i <= 7; i++) {
		digitalWrite(DO, &DO_PORT, bitRead(data, i));
 4a8:	08 2f       	mov	r16, r24
 4aa:	10 e0       	ldi	r17, 0x00	; 0
 4ac:	a8 01       	movw	r20, r16
 4ae:	0c 2e       	mov	r0, r28
 4b0:	02 c0       	rjmp	.+4      	; 0x4b6 <writeByte+0x1a>
 4b2:	55 95       	asr	r21
 4b4:	47 95       	ror	r20
 4b6:	0a 94       	dec	r0
 4b8:	e2 f7       	brpl	.-8      	; 0x4b2 <writeByte+0x16>
 4ba:	41 70       	andi	r20, 0x01	; 1
 4bc:	68 e2       	ldi	r22, 0x28	; 40
 4be:	70 e0       	ldi	r23, 0x00	; 0
 4c0:	83 e0       	ldi	r24, 0x03	; 3
 4c2:	0e 94 53 00 	call	0xa6	; 0xa6 <digitalWrite>
		digitalWrite(CL, &CL_PORT, 1); _delay_us(CCB_DELAY);
 4c6:	41 e0       	ldi	r20, 0x01	; 1
 4c8:	68 e2       	ldi	r22, 0x28	; 40
 4ca:	70 e0       	ldi	r23, 0x00	; 0
 4cc:	82 e0       	ldi	r24, 0x02	; 2
 4ce:	0e 94 53 00 	call	0xa6	; 0xa6 <digitalWrite>
 4d2:	8f e8       	ldi	r24, 0x8F	; 143
 4d4:	91 e0       	ldi	r25, 0x01	; 1
 4d6:	01 97       	sbiw	r24, 0x01	; 1
 4d8:	f1 f7       	brne	.-4      	; 0x4d6 <writeByte+0x3a>
 4da:	00 c0       	rjmp	.+0      	; 0x4dc <writeByte+0x40>
 4dc:	00 00       	nop
		digitalWrite(CL, &CL_PORT, 0); _delay_us(CCB_DELAY);
 4de:	40 e0       	ldi	r20, 0x00	; 0
 4e0:	68 e2       	ldi	r22, 0x28	; 40
 4e2:	70 e0       	ldi	r23, 0x00	; 0
 4e4:	82 e0       	ldi	r24, 0x02	; 2
 4e6:	0e 94 53 00 	call	0xa6	; 0xa6 <digitalWrite>
 4ea:	8f e8       	ldi	r24, 0x8F	; 143
 4ec:	91 e0       	ldi	r25, 0x01	; 1
 4ee:	01 97       	sbiw	r24, 0x01	; 1
 4f0:	f1 f7       	brne	.-4      	; 0x4ee <writeByte+0x52>
 4f2:	00 c0       	rjmp	.+0      	; 0x4f4 <writeByte+0x58>
 4f4:	00 00       	nop
 4f6:	21 96       	adiw	r28, 0x01	; 1
	for(int8_t i = 0; i <= 7; i++) {
 4f8:	c8 30       	cpi	r28, 0x08	; 8
 4fa:	d1 05       	cpc	r29, r1
 4fc:	b9 f6       	brne	.-82     	; 0x4ac <writeByte+0x10>
	}
}
 4fe:	df 91       	pop	r29
 500:	cf 91       	pop	r28
 502:	1f 91       	pop	r17
 504:	0f 91       	pop	r16
 506:	08 95       	ret

00000508 <readByte>:

/***************************************\
 *             readByte()              *
 *  Receive a single byte via CCB bus  *
\***************************************/
uint8_t readByte() {
 508:	cf 92       	push	r12
 50a:	df 92       	push	r13
 50c:	ef 92       	push	r14
 50e:	ff 92       	push	r15
 510:	0f 93       	push	r16
 512:	1f 93       	push	r17
 514:	cf 93       	push	r28
 516:	07 e0       	ldi	r16, 0x07	; 7
 518:	10 e0       	ldi	r17, 0x00	; 0
	uint8_t data = 0;
 51a:	c0 e0       	ldi	r28, 0x00	; 0
 51c:	c1 2c       	mov	r12, r1
 51e:	d1 2c       	mov	r13, r1
 520:	76 01       	movw	r14, r12
 522:	c3 94       	inc	r12
	// Receive one byte from the CCB bus (MSB first)
	for(int8_t i = 7; i >= 0; i--) {
		digitalWrite(CL, &CL_PORT, 1); _delay_us(CCB_DELAY);
 524:	41 e0       	ldi	r20, 0x01	; 1
 526:	68 e2       	ldi	r22, 0x28	; 40
 528:	70 e0       	ldi	r23, 0x00	; 0
 52a:	82 e0       	ldi	r24, 0x02	; 2
 52c:	0e 94 53 00 	call	0xa6	; 0xa6 <digitalWrite>
 530:	8f e8       	ldi	r24, 0x8F	; 143
 532:	91 e0       	ldi	r25, 0x01	; 1
 534:	01 97       	sbiw	r24, 0x01	; 1
 536:	f1 f7       	brne	.-4      	; 0x534 <readByte+0x2c>
 538:	00 c0       	rjmp	.+0      	; 0x53a <readByte+0x32>
 53a:	00 00       	nop
		bitWrite(data, i, digitalRead(DI, &DI_PIN));
 53c:	66 e2       	ldi	r22, 0x26	; 38
 53e:	70 e0       	ldi	r23, 0x00	; 0
 540:	81 e0       	ldi	r24, 0x01	; 1
 542:	0e 94 66 00 	call	0xcc	; 0xcc <digitalRead>
 546:	b7 01       	movw	r22, r14
 548:	a6 01       	movw	r20, r12
 54a:	00 2e       	mov	r0, r16
 54c:	04 c0       	rjmp	.+8      	; 0x556 <readByte+0x4e>
 54e:	44 0f       	add	r20, r20
 550:	55 1f       	adc	r21, r21
 552:	66 1f       	adc	r22, r22
 554:	77 1f       	adc	r23, r23
 556:	0a 94       	dec	r0
 558:	d2 f7       	brpl	.-12     	; 0x54e <readByte+0x46>
 55a:	88 23       	and	r24, r24
 55c:	c9 f0       	breq	.+50     	; 0x590 <readByte+0x88>
 55e:	c4 2b       	or	r28, r20
		digitalWrite(CL, &CL_PORT, 0); _delay_us(CCB_DELAY);
 560:	40 e0       	ldi	r20, 0x00	; 0
 562:	68 e2       	ldi	r22, 0x28	; 40
 564:	70 e0       	ldi	r23, 0x00	; 0
 566:	82 e0       	ldi	r24, 0x02	; 2
 568:	0e 94 53 00 	call	0xa6	; 0xa6 <digitalWrite>
 56c:	8f e8       	ldi	r24, 0x8F	; 143
 56e:	91 e0       	ldi	r25, 0x01	; 1
 570:	01 97       	sbiw	r24, 0x01	; 1
 572:	f1 f7       	brne	.-4      	; 0x570 <readByte+0x68>
 574:	00 c0       	rjmp	.+0      	; 0x576 <readByte+0x6e>
 576:	00 00       	nop
 578:	01 50       	subi	r16, 0x01	; 1
 57a:	11 09       	sbc	r17, r1
 57c:	98 f6       	brcc	.-90     	; 0x524 <readByte+0x1c>
	}
	return data;
}
 57e:	8c 2f       	mov	r24, r28
 580:	cf 91       	pop	r28
 582:	1f 91       	pop	r17
 584:	0f 91       	pop	r16
 586:	ff 90       	pop	r15
 588:	ef 90       	pop	r14
 58a:	df 90       	pop	r13
 58c:	cf 90       	pop	r12
 58e:	08 95       	ret
		bitWrite(data, i, digitalRead(DI, &DI_PIN));
 590:	40 95       	com	r20
 592:	c4 23       	and	r28, r20
 594:	e5 cf       	rjmp	.-54     	; 0x560 <readByte+0x58>

00000596 <ccb>:

/*****************************************\
 *                 ccb()                 *
 *  The universal send/receive function  *
\*****************************************/
void ccb(uint8_t address, uint8_t *data, int8_t dataLength, uint8_t mode) {
 596:	ef 92       	push	r14
 598:	ff 92       	push	r15
 59a:	0f 93       	push	r16
 59c:	1f 93       	push	r17
 59e:	cf 93       	push	r28
 5a0:	df 93       	push	r29
 5a2:	7b 01       	movw	r14, r22
 5a4:	c4 2f       	mov	r28, r20
 5a6:	d2 2f       	mov	r29, r18
	int8_t i; // i may reach negative values in the counters
	          // dataLength is typed "int8_t" for compatibility with this counter

	// Send the address, with the nibbles swapped (required by the CCB protocol to support 4-bit addresses)
	writeByte((address >> 4) | (address << 4));
 5a8:	82 95       	swap	r24
 5aa:	0e 94 4e 02 	call	0x49c	; 0x49c <writeByte>

	// Enter the data transfer mode
	digitalWrite(CL, &CL_PORT, 0);
 5ae:	40 e0       	ldi	r20, 0x00	; 0
 5b0:	68 e2       	ldi	r22, 0x28	; 40
 5b2:	70 e0       	ldi	r23, 0x00	; 0
 5b4:	82 e0       	ldi	r24, 0x02	; 2
 5b6:	0e 94 53 00 	call	0xa6	; 0xa6 <digitalWrite>
	digitalWrite(CE, &CL_PORT, 1);
 5ba:	41 e0       	ldi	r20, 0x01	; 1
 5bc:	68 e2       	ldi	r22, 0x28	; 40
 5be:	70 e0       	ldi	r23, 0x00	; 0
 5c0:	80 e0       	ldi	r24, 0x00	; 0
 5c2:	0e 94 53 00 	call	0xa6	; 0xa6 <digitalWrite>
 5c6:	8f e8       	ldi	r24, 0x8F	; 143
 5c8:	91 e0       	ldi	r25, 0x01	; 1
 5ca:	01 97       	sbiw	r24, 0x01	; 1
 5cc:	f1 f7       	brne	.-4      	; 0x5ca <ccb+0x34>
 5ce:	00 c0       	rjmp	.+0      	; 0x5d0 <ccb+0x3a>
 5d0:	00 00       	nop
	_delay_us(CCB_DELAY);

	switch(mode) {
 5d2:	dd 23       	and	r29, r29
 5d4:	71 f0       	breq	.+28     	; 0x5f2 <ccb+0x5c>
 5d6:	d1 30       	cpi	r29, 0x01	; 1
 5d8:	c1 f4       	brne	.+48     	; 0x60a <ccb+0x74>
 5da:	de 2d       	mov	r29, r14
 5dc:	87 01       	movw	r16, r14
		digitalWrite(DO, &DO_PORT, 0);
		break;

	case _CCB_RECEIVE:
		// Receive data
		for(i = 0; i < dataLength; i++)
 5de:	80 2f       	mov	r24, r16
 5e0:	8d 1b       	sub	r24, r29
 5e2:	8c 17       	cp	r24, r28
 5e4:	94 f4       	brge	.+36     	; 0x60a <ccb+0x74>
			data[i] = readByte();
 5e6:	0e 94 84 02 	call	0x508	; 0x508 <readByte>
 5ea:	f8 01       	movw	r30, r16
 5ec:	81 93       	st	Z+, r24
 5ee:	8f 01       	movw	r16, r30
 5f0:	f6 cf       	rjmp	.-20     	; 0x5de <ccb+0x48>
		for(i = dataLength - 1; i >= 0; i--)
 5f2:	c1 50       	subi	r28, 0x01	; 1
 5f4:	0c 2e       	mov	r0, r28
 5f6:	00 0c       	add	r0, r0
 5f8:	dd 0b       	sbc	r29, r29
 5fa:	c7 ff       	sbrs	r28, 7
 5fc:	19 c0       	rjmp	.+50     	; 0x630 <ccb+0x9a>
		digitalWrite(DO, &DO_PORT, 0);
 5fe:	40 e0       	ldi	r20, 0x00	; 0
 600:	68 e2       	ldi	r22, 0x28	; 40
 602:	70 e0       	ldi	r23, 0x00	; 0
 604:	83 e0       	ldi	r24, 0x03	; 3
 606:	0e 94 53 00 	call	0xa6	; 0xa6 <digitalWrite>
		break;
	}

	digitalWrite(CE, &CE_PORT, 0);
 60a:	40 e0       	ldi	r20, 0x00	; 0
 60c:	68 e2       	ldi	r22, 0x28	; 40
 60e:	70 e0       	ldi	r23, 0x00	; 0
 610:	80 e0       	ldi	r24, 0x00	; 0
 612:	0e 94 53 00 	call	0xa6	; 0xa6 <digitalWrite>
 616:	8f e8       	ldi	r24, 0x8F	; 143
 618:	91 e0       	ldi	r25, 0x01	; 1
 61a:	01 97       	sbiw	r24, 0x01	; 1
 61c:	f1 f7       	brne	.-4      	; 0x61a <ccb+0x84>
 61e:	00 c0       	rjmp	.+0      	; 0x620 <ccb+0x8a>
 620:	00 00       	nop
	_delay_us(CCB_DELAY);
}
 622:	df 91       	pop	r29
 624:	cf 91       	pop	r28
 626:	1f 91       	pop	r17
 628:	0f 91       	pop	r16
 62a:	ff 90       	pop	r15
 62c:	ef 90       	pop	r14
 62e:	08 95       	ret
				writeByte(data[i]);
 630:	f7 01       	movw	r30, r14
 632:	ec 0f       	add	r30, r28
 634:	fd 1f       	adc	r31, r29
 636:	80 81       	ld	r24, Z
 638:	0e 94 4e 02 	call	0x49c	; 0x49c <writeByte>
 63c:	21 97       	sbiw	r28, 0x01	; 1
 63e:	dd cf       	rjmp	.-70     	; 0x5fa <ccb+0x64>

00000640 <diPinState>:
 * Some CCB devices uses the DO pin for other functions  *
 * when the data bus is idle.  This method makes reading *
 * it easier                                             *
\*********************************************************/
uint8_t diPinState() {
	return digitalRead(DI, &DI_PIN);
 640:	66 e2       	ldi	r22, 0x26	; 38
 642:	70 e0       	ldi	r23, 0x00	; 0
 644:	81 e0       	ldi	r24, 0x01	; 1
 646:	0c 94 66 00 	jmp	0xcc	; 0xcc <digitalRead>

0000064a <LC72131_write>:
 * backwards (from the rightmost to the leftmost byte), *
 * so the order of the data bytes must be the opposite  *
 * as the one shown on the device's datasheets          *
\********************************************************/
void LC72131_write(uint8_t address, uint8_t *data, int8_t dataLength) {
	ccb(address, data, dataLength, _CCB_SEND);
 64a:	20 e0       	ldi	r18, 0x00	; 0
 64c:	0c 94 cb 02 	jmp	0x596	; 0x596 <ccb>

00000650 <LC72131_read>:
 650:	21 e0       	ldi	r18, 0x01	; 1
 652:	0c 94 cb 02 	jmp	0x596	; 0x596 <ccb>

00000656 <main>:
    lcd_init();             // LCD initialization.
 656:	0e 94 fe 00 	call	0x1fc	; 0x1fc <lcd_init>
    lcd_clrscr();           // Clear the LCD.
 65a:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_clrscr>
    lcd_home();             // Set the cursor at home position.
 65e:	0e 94 de 00 	call	0x1bc	; 0x1bc <lcd_home>
    lcd_puts("This is a test!");
 662:	85 e0       	ldi	r24, 0x05	; 5
 664:	91 e0       	ldi	r25, 0x01	; 1
 666:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <lcd_puts>
	__builtin_avr_delay_cycles(__ticks_dc);
 66a:	2f ef       	ldi	r18, 0xFF	; 255
 66c:	87 ea       	ldi	r24, 0xA7	; 167
 66e:	91 e6       	ldi	r25, 0x61	; 97
 670:	21 50       	subi	r18, 0x01	; 1
 672:	80 40       	sbci	r24, 0x00	; 0
 674:	90 40       	sbci	r25, 0x00	; 0
 676:	e1 f7       	brne	.-8      	; 0x670 <main+0x1a>
 678:	00 c0       	rjmp	.+0      	; 0x67a <main+0x24>
 67a:	00 00       	nop
    lcd_clrscr();
 67c:	0e 94 db 00 	call	0x1b6	; 0x1b6 <lcd_clrscr>
    LC72131_init();
 680:	0e 94 38 02 	call	0x470	; 0x470 <LC72131_init>
    PLL_SetMode(PLL_BAND_FM);
 684:	85 e0       	ldi	r24, 0x05	; 5
 686:	0e 94 7e 01 	call	0x2fc	; 0x2fc <PLL_SetMode>
    tuned = PLL_Tune(FMFrequency);
 68a:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <FMFrequency>
 68e:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <FMFrequency+0x1>
 692:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <PLL_Tune>
 696:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <__data_end>
 69a:	2f ef       	ldi	r18, 0xFF	; 255
 69c:	83 e2       	ldi	r24, 0x23	; 35
 69e:	94 ef       	ldi	r25, 0xF4	; 244
 6a0:	21 50       	subi	r18, 0x01	; 1
 6a2:	80 40       	sbci	r24, 0x00	; 0
 6a4:	90 40       	sbci	r25, 0x00	; 0
 6a6:	e1 f7       	brne	.-8      	; 0x6a0 <main+0x4a>
 6a8:	00 c0       	rjmp	.+0      	; 0x6aa <main+0x54>
 6aa:	00 00       	nop
     PLL_SetMode(PLL_MUTE);
 6ac:	83 e0       	ldi	r24, 0x03	; 3
 6ae:	0e 94 7e 01 	call	0x2fc	; 0x2fc <PLL_SetMode>
 6b2:	2f ef       	ldi	r18, 0xFF	; 255
 6b4:	83 e2       	ldi	r24, 0x23	; 35
 6b6:	94 ef       	ldi	r25, 0xF4	; 244
 6b8:	21 50       	subi	r18, 0x01	; 1
 6ba:	80 40       	sbci	r24, 0x00	; 0
 6bc:	90 40       	sbci	r25, 0x00	; 0
 6be:	e1 f7       	brne	.-8      	; 0x6b8 <main+0x62>
 6c0:	00 c0       	rjmp	.+0      	; 0x6c2 <main+0x6c>
 6c2:	00 00       	nop
     PLL_SetMode(PLL_UNMUTE);
 6c4:	84 e0       	ldi	r24, 0x04	; 4
 6c6:	0e 94 7e 01 	call	0x2fc	; 0x2fc <PLL_SetMode>
 6ca:	ff cf       	rjmp	.-2      	; 0x6ca <main+0x74>

000006cc <_exit>:
 6cc:	f8 94       	cli

000006ce <__stop_program>:
 6ce:	ff cf       	rjmp	.-2      	; 0x6ce <__stop_program>
